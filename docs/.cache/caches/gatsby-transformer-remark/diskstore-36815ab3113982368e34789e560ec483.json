{"expireTime":9007200819376323000,"key":"transformer-remark-markdown-html-ast-66107d38bebbf677a09985f64468381d-gatsby-remark-autolink-headersgatsby-remark-copy-linked-filesgatsby-remark-prismjsgatsby-remark-check-links-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Time to accomplish: "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"15 Minutes"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Up until now, our graph API hasn't been very useful. We can inspect our graph's schema, but we can't actually run queries against it. Now that we've built our schema and data sources, it's time to leverage all of our hard work by calling our data sources in our graph API's resolver functions to possibly trigger business logic and/or to fetch and/or update data."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"what-is-a-resolver"},"children":[{"type":"element","tagName":"a","properties":{"href":"#what-is-a-resolver","aria-label":"what is a resolver permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"What is a resolver?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Resolvers"}]},{"type":"text","value":" provide the instructions for turning a GraphQL operation (a query, mutation, or subscription) into data. They either return the same type of data we specify in our schema or a promise for that data."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before we can start writing resolvers, we need to learn more about what a resolver function looks like. Resolver functions accept four arguments:"}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token function-variable function\">fieldName</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> info</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> data<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"parent"}]},{"type":"text","value":": An object that contains the result returned from the resolver on the parent type"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"args"}]},{"type":"text","value":": An object that contains the arguments passed to the field"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"context"}]},{"type":"text","value":": An object shared by all resolvers in a GraphQL operation. We use the context to contain per-request state such as authentication information and access our data sources."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"info"}]},{"type":"text","value":": Information about the execution state of the operation which should only be used in advanced cases"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Remember the "},{"type":"raw","value":"<code class=\"language-text\">LaunchAPI</code>"},{"type":"text","value":" and "},{"type":"raw","value":"<code class=\"language-text\">UserAPI</code>"},{"type":"text","value":" data sources we created in the previous section and passed to the "},{"type":"raw","value":"<code class=\"language-text\">context</code>"},{"type":"text","value":" property of "},{"type":"raw","value":"<code class=\"language-text\">ApolloServer</code>"},{"type":"text","value":"? We're going to call them in our resolvers by accessing the "},{"type":"raw","value":"<code class=\"language-text\">context</code>"},{"type":"text","value":" argument."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This might sound confusing at first, but it will start to make more sense once we dive into practical examples. Let's get started!"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"connecting-resolvers-to-warthog-server"},"children":[{"type":"element","tagName":"a","properties":{"href":"#connecting-resolvers-to-warthog-server","aria-label":"connecting resolvers to warthog server permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Connecting resolvers to Warthog Server"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"First, let's connect our resolver map to Warthog Server. Right now, it's just an empty object, but we should add it to our "},{"type":"raw","value":"<code class=\"language-text\">ApolloServer</code>"},{"type":"text","value":" instance so we don't have to do it later. Navigate to "},{"type":"raw","value":"<code class=\"language-text\">src/index.js</code>"},{"type":"text","value":" and add the following code to the file:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"src/index.js"}]}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ApolloServer <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'warthog-server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./schema'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./utils'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./resolvers'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> LaunchAPI <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./datasources/launch'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> UserAPI <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./datasources/user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  typeDefs<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  resolvers<span class=\"token punctuation\">,</span></span>  <span class=\"token function-variable function\">dataSources</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    launchAPI<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LaunchAPI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    userAPI<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserAPI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> store <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">🚀 Server ready at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Warthog Server will automatically add the "},{"type":"raw","value":"<code class=\"language-text\">launchAPI</code>"},{"type":"text","value":" and "},{"type":"raw","value":"<code class=\"language-text\">userAPI</code>"},{"type":"text","value":" to our resolvers' context so we can easily call them."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"write-query-resolvers"},"children":[{"type":"element","tagName":"a","properties":{"href":"#write-query-resolvers","aria-label":"write query resolvers permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Write Query resolvers"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"First, let's start by writing our resolvers for the "},{"type":"raw","value":"<code class=\"language-text\">launches</code>"},{"type":"text","value":", "},{"type":"raw","value":"<code class=\"language-text\">launch</code>"},{"type":"text","value":", and "},{"type":"raw","value":"<code class=\"language-text\">me</code>"},{"type":"text","value":" fields on our "},{"type":"raw","value":"<code class=\"language-text\">Query</code>"},{"type":"text","value":" type. We structure our resolvers into a map where the keys correspond to the types and fields in our schema. If you ever get stuck remembering which fields are on a type, you can always check your graph API's schema."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Navigate to "},{"type":"raw","value":"<code class=\"language-text\">src/resolvers.js</code>"},{"type":"text","value":" and paste the code below into the file:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"src/resolvers.js"}]}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Query<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">launches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> __<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> dataSources <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      dataSources<span class=\"token punctuation\">.</span>launchAPI<span class=\"token punctuation\">.</span><span class=\"token function\">getAllLaunches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">launch</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> dataSources <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      dataSources<span class=\"token punctuation\">.</span>launchAPI<span class=\"token punctuation\">.</span><span class=\"token function\">getLaunchById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> launchId<span class=\"token punctuation\">:</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">me</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> __<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> dataSources <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> dataSources<span class=\"token punctuation\">.</span>userAPI<span class=\"token punctuation\">.</span><span class=\"token function\">findOrCreateUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The code above shows the resolver functions for the "},{"type":"raw","value":"<code class=\"language-text\">Query</code>"},{"type":"text","value":" type fields: "},{"type":"raw","value":"<code class=\"language-text\">launches</code>"},{"type":"text","value":", "},{"type":"raw","value":"<code class=\"language-text\">launch</code>"},{"type":"text","value":", and "},{"type":"raw","value":"<code class=\"language-text\">me</code>"},{"type":"text","value":". The first argument to our "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"top-level"}]},{"type":"text","value":" resolvers, "},{"type":"raw","value":"<code class=\"language-text\">parent</code>"},{"type":"text","value":", is always blank because it refers to the root of our graph. The second argument refers to any "},{"type":"raw","value":"<code class=\"language-text\">arguments</code>"},{"type":"text","value":" passed into our query, which we use in our "},{"type":"raw","value":"<code class=\"language-text\">launch</code>"},{"type":"text","value":" query to fetch a launch by its id. Finally, we destructure our data sources from the third argument, "},{"type":"raw","value":"<code class=\"language-text\">context</code>"},{"type":"text","value":", in order to call them in our resolvers."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Our resolvers are simple and concise because the logic is embedded in the "},{"type":"raw","value":"<code class=\"language-text\">LaunchAPI</code>"},{"type":"text","value":" and "},{"type":"raw","value":"<code class=\"language-text\">UserAPI</code>"},{"type":"text","value":" data sources. We recommend keeping your resolvers thin as a best practice, which allows you to safely refactor without worrying about breaking your API."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"run-queries-in-the-playground"},"children":[{"type":"element","tagName":"a","properties":{"href":"#run-queries-in-the-playground","aria-label":"run queries in the playground permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Run queries in the playground"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Warthog Server sets up GraphQL Playground so that you can run queries and explore your schema with ease. Go ahead and start your server by running "},{"type":"raw","value":"<code class=\"language-text\">npm start</code>"},{"type":"text","value":" and open up the playground in a browser window at "},{"type":"raw","value":"<code class=\"language-text\">http://localhost:4000/</code>"},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Start by copying the GraphQL query below and pasting it in the left side of the playground. Then, hit the play button at the center to get a response."}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> GetLaunches <span class=\"token punctuation\">{</span>\n  launches <span class=\"token punctuation\">{</span>\n    id\n    mission <span class=\"token punctuation\">{</span>\n      name\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When you write a GraphQL query, you always want to start with the "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"operation keyword"}]},{"type":"text","value":" (either query or mutation) and its name (like "},{"type":"raw","value":"<code class=\"language-text\">GetLaunches</code>"},{"type":"text","value":"). It's important to give your queries descriptive names so they're discoverable in Warthog developer tooling. Next, we use a pair of curly braces after the query name to indicate the body of our query. We specify the "},{"type":"raw","value":"<code class=\"language-text\">launches</code>"},{"type":"text","value":" field on the "},{"type":"raw","value":"<code class=\"language-text\">Query</code>"},{"type":"text","value":" type and use another pair of curly braces to indicate a "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"selection set"}]},{"type":"text","value":". The selection set describes which fields we want our query response to contain."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"What's awesome about GraphQL is that the shape of your query will match the shape of your response. Try adding and removing fields from your query and notice how the response shape changes."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now, let's write a launch query that accepts an argument. Copy the query below and paste it in the playground. Then, click the play button to get a response."}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> GetLaunchById <span class=\"token punctuation\">{</span>\n  launch<span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    id\n    rocket <span class=\"token punctuation\">{</span>\n      id\n      <span class=\"token keyword\">type</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Instead of hard coding the argument "},{"type":"raw","value":"<code class=\"language-text\">60</code>"},{"type":"text","value":", you can also set variables in the bottom left corner. Here's how to run that same query with variables:"}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> GetLaunchById<span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  launch<span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    id\n    rocket <span class=\"token punctuation\">{</span>\n      id\n      <span class=\"token keyword\">type</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can paste "},{"type":"raw","value":"<code class=\"language-text\">{ &quot;id&quot;: 60 }</code>"},{"type":"text","value":" into the Query Variables section below before running your query. Feel free to experiment with running more queries before moving on to the next section."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"paginated-queries"},"children":[{"type":"element","tagName":"a","properties":{"href":"#paginated-queries","aria-label":"paginated queries permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Paginated queries"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Running the "},{"type":"raw","value":"<code class=\"language-text\">launches</code>"},{"type":"text","value":" query returned a large data set of launches, which can slow down our app. How can we ensure we're not fetching too much data at once?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Pagination"}]},{"type":"text","value":" is a solution to this problem that ensures that the server only sends data in small chunks. Cursor-based pagination is our recommended approach over numbered pages, because it eliminates the possibility of skipping items and displaying the same item more than once. In cursor-based pagination, a constant pointer (or "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"cursor"}]},{"type":"text","value":") is used to keep track of where in the data set the next items should be fetched from."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We'll use cursor-based pagination for our graph API. Open up the "},{"type":"raw","value":"<code class=\"language-text\">src/schema.js</code>"},{"type":"text","value":" file and update the "},{"type":"raw","value":"<code class=\"language-text\">Query</code>"},{"type":"text","value":" type with "},{"type":"raw","value":"<code class=\"language-text\">launches</code>"},{"type":"text","value":" and also add a new type called "},{"type":"raw","value":"<code class=\"language-text\">LaunchConnection</code>"},{"type":"text","value":" to the schema as shown below:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"src/schema.js"}]}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  launches<span class=\"token punctuation\">(</span> <span class=\"token comment\"># replace the current launches query with this one.</span>\n    <span class=\"token string\">\"\"</span>\"\n    The number of results to show. Must be ><span class=\"token operator\">=</span> <span class=\"token number\">1</span>. Default <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n    <span class=\"token string\">\"\"</span>\"\n    <span class=\"token attr-name\">pageSize</span><span class=\"token punctuation\">:</span> Int\n    <span class=\"token string\">\"\"</span>\"\n    If you add a cursor here<span class=\"token punctuation\">,</span> it will only return results _after_ this cursor\n    <span class=\"token string\">\"\"</span>\"\n    <span class=\"token attr-name\">after</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> LaunchConnection<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">launch</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Launch\n  <span class=\"token attr-name\">me</span><span class=\"token punctuation\">:</span> User\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token string\">\"\"</span>\"\nSimple wrapper around our list of launches that contains a cursor to the\nlast item in the list. Pass this cursor to the launches <span class=\"token keyword\">query</span> to fetch results\nafter these.\n<span class=\"token string\">\"\"</span>\"\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">LaunchConnection</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\"># add this below the Query type as an additional type.</span>\n  <span class=\"token attr-name\">cursor</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">hasMore</span><span class=\"token punctuation\">:</span> Boolean<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">launches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Launch<span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You'll also notice we've added comments (also called docstrings) to our schema, indicated by "},{"type":"raw","value":"<code class=\"language-text\">&quot;&quot;&quot;</code>"},{"type":"text","value":". Now, the "},{"type":"raw","value":"<code class=\"language-text\">launches</code>"},{"type":"text","value":" query takes in two parameters, "},{"type":"raw","value":"<code class=\"language-text\">pageSize</code>"},{"type":"text","value":" and "},{"type":"raw","value":"<code class=\"language-text\">after</code>"},{"type":"text","value":", and returns a "},{"type":"raw","value":"<code class=\"language-text\">LaunchConnection</code>"},{"type":"text","value":". The "},{"type":"raw","value":"<code class=\"language-text\">LaunchConnection</code>"},{"type":"text","value":" type returns a result that shows the list of launches, in addition to a "},{"type":"raw","value":"<code class=\"language-text\">cursor</code>"},{"type":"text","value":" field that keeps track of where we are in the list and a "},{"type":"raw","value":"<code class=\"language-text\">hasMore</code>"},{"type":"text","value":" field to indicate if there's more data to be fetched."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Open up the "},{"type":"raw","value":"<code class=\"language-text\">src/utils.js</code>"},{"type":"text","value":" file in the repo you cloned in the previous section and check out the "},{"type":"raw","value":"<code class=\"language-text\">paginateResults</code>"},{"type":"text","value":" function. The "},{"type":"raw","value":"<code class=\"language-text\">paginateResults</code>"},{"type":"text","value":" function in the file is a helper function for paginating data from the server. Now, let's update the necessary resolver functions to accommodate pagination."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's import "},{"type":"raw","value":"<code class=\"language-text\">paginateResults</code>"},{"type":"text","value":" and replace the "},{"type":"raw","value":"<code class=\"language-text\">launches</code>"},{"type":"text","value":" resolver function in the "},{"type":"raw","value":"<code class=\"language-text\">src/resolvers.js</code>"},{"type":"text","value":" file with the code below:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"src/resolvers.js"}]}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> paginateResults <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./utils'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Query<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function-variable function\">launches</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> pageSize <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> after <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> dataSources <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> allLaunches <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> dataSources<span class=\"token punctuation\">.</span>launchAPI<span class=\"token punctuation\">.</span><span class=\"token function\">getAllLaunches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// we want these in reverse chronological order</span></span><span class=\"gatsby-highlight-code-line\">      allLaunches<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> launches <span class=\"token operator\">=</span> <span class=\"token function\">paginateResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        after<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">        pageSize<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">        results<span class=\"token punctuation\">:</span> allLaunches</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        launches<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">        cursor<span class=\"token punctuation\">:</span> launches<span class=\"token punctuation\">.</span>length <span class=\"token operator\">?</span> launches<span class=\"token punctuation\">[</span>launches<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cursor <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token comment\">// if the cursor of the end of the paginated results is the same as the</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token comment\">// last item in _all_ results, then there are no more results after this</span></span><span class=\"gatsby-highlight-code-line\">        hasMore<span class=\"token punctuation\">:</span> launches<span class=\"token punctuation\">.</span>length</span><span class=\"gatsby-highlight-code-line\">          <span class=\"token operator\">?</span> launches<span class=\"token punctuation\">[</span>launches<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cursor <span class=\"token operator\">!==</span></span><span class=\"gatsby-highlight-code-line\">            allLaunches<span class=\"token punctuation\">[</span>allLaunches<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cursor</span><span class=\"gatsby-highlight-code-line\">          <span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>    <span class=\"token function-variable function\">launch</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> dataSources <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      dataSources<span class=\"token punctuation\">.</span>launchAPI<span class=\"token punctuation\">.</span><span class=\"token function\">getLaunchById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> launchId<span class=\"token punctuation\">:</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n     <span class=\"token function-variable function\">me</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> __<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> dataSources <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      dataSources<span class=\"token punctuation\">.</span>userAPI<span class=\"token punctuation\">.</span><span class=\"token function\">findOrCreateUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's test the cursor-based pagination we just implemented. If you stopped your server, go ahead and restart your graph API again with "},{"type":"raw","value":"<code class=\"language-text\">npm start</code>"},{"type":"text","value":", and run this query in the playground:"}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> GetLaunches <span class=\"token punctuation\">{</span>\n  launches<span class=\"token punctuation\">(</span><span class=\"token attr-name\">pageSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    launches <span class=\"token punctuation\">{</span>\n      id\n      mission <span class=\"token punctuation\">{</span>\n        name\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Thanks to our pagination implementation, you should only see three launches returned back from our API."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"write-resolvers-on-types"},"children":[{"type":"element","tagName":"a","properties":{"href":"#write-resolvers-on-types","aria-label":"write resolvers on types permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Write resolvers on types"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It's important to note that you can write resolvers for any types in your schema, not just queries and mutations. This is what makes GraphQL so flexible."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You may have noticed that we haven't written resolvers for all our types, yet our queries still run successfully. GraphQL has default resolvers; therefore, we don't have to write a resolver for a field if the parent object has a property with the same name."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's look at a case where we do want to write a resolver on our "},{"type":"raw","value":"<code class=\"language-text\">Mission</code>"},{"type":"text","value":" type. Navigate to "},{"type":"raw","value":"<code class=\"language-text\">src/resolvers.js</code>"},{"type":"text","value":" and copy this resolver into our resolver map underneath the "},{"type":"raw","value":"<code class=\"language-text\">Query</code>"},{"type":"text","value":" property:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"src/resolvers.js"}]}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\">Mission<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// make sure the default size is 'large' in case user doesn't specify</span>\n  missionPatch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>mission<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> size <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> size<span class=\"token punctuation\">:</span> <span class=\"token string\">'LARGE'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> size <span class=\"token operator\">===</span> <span class=\"token string\">'SMALL'</span>\n      <span class=\"token operator\">?</span> mission<span class=\"token punctuation\">.</span>missionPatchSmall\n      <span class=\"token punctuation\">:</span> mission<span class=\"token punctuation\">.</span>missionPatchLarge<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"src/schema.js"}]}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\">  type Mission <span class=\"token punctuation\">{</span>\n    # <span class=\"token operator\">...</span> <span class=\"token keyword\">with</span> rest <span class=\"token keyword\">of</span> schema\n    <span class=\"token function\">missionPatch</span><span class=\"token punctuation\">(</span>mission<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">:</span> PatchSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first argument passed into our resolver is the parent, which refers to the mission object. The second argument is the size we pass to our "},{"type":"raw","value":"<code class=\"language-text\">missionPatch</code>"},{"type":"text","value":" field, which we use to determine which property on the mission object we want our field to resolve to."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now that we know how to add resolvers on types other than "},{"type":"raw","value":"<code class=\"language-text\">Query</code>"},{"type":"text","value":" and "},{"type":"raw","value":"<code class=\"language-text\">Mutation</code>"},{"type":"text","value":", let's add some more resolvers to the "},{"type":"raw","value":"<code class=\"language-text\">Launch</code>"},{"type":"text","value":" and "},{"type":"raw","value":"<code class=\"language-text\">User</code>"},{"type":"text","value":" types. Copy this code into your resolver map:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"src/resolvers.js"}]}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\">Launch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">isBooked</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">launch<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> dataSources <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    dataSources<span class=\"token punctuation\">.</span>userAPI<span class=\"token punctuation\">.</span><span class=\"token function\">isBookedOnLaunch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> launchId<span class=\"token punctuation\">:</span> launch<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\nUser<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">trips</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> __<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> dataSources <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// get ids of launches by user</span>\n    <span class=\"token keyword\">const</span> launchIds <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> dataSources<span class=\"token punctuation\">.</span>userAPI<span class=\"token punctuation\">.</span><span class=\"token function\">getLaunchIdsByUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>launchIds<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// look up those launches by their ids</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      dataSources<span class=\"token punctuation\">.</span>launchAPI<span class=\"token punctuation\">.</span><span class=\"token function\">getLaunchesByIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        launchIds<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You may be wondering where we're getting the user from in order to fetch their booked launches. This is a great observation - we still need to authenticate our user! Let's learn how to authenticate users and attach their user information to the context in the next section before we move onto "},{"type":"raw","value":"<code class=\"language-text\">Mutation</code>"},{"type":"text","value":" resolvers."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"authenticate-users"},"children":[{"type":"element","tagName":"a","properties":{"href":"#authenticate-users","aria-label":"authenticate users permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Authenticate users"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Access control is a feature that almost every app will have to handle at some point. In this tutorial, we're going to focus on teaching you the essential concepts of authenticating users instead of focusing on a specific implementation."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here are the steps you'll want to follow:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The context function on your "},{"type":"raw","value":"<code class=\"language-text\">ApolloServer</code>"},{"type":"text","value":" instance is called with the request object each time a GraphQL operation hits your API. Use this request object to read the authorization headers."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Authenticate the user within the context function."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Once the user is authenticated, attach the user to the object returned from the context function. This allows us to read the user's information from within our data sources and resolvers, so we can authorize whether they can access the data."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's open up "},{"type":"raw","value":"<code class=\"language-text\">src/index.js</code>"},{"type":"text","value":" and update the "},{"type":"raw","value":"<code class=\"language-text\">context</code>"},{"type":"text","value":" function on "},{"type":"raw","value":"<code class=\"language-text\">ApolloServer</code>"},{"type":"text","value":" to the code shown below:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"src/index.js"}]}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> isEmail <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'isemail'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">context</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> req <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>    <span class=\"token comment\">// simple auth check on every request</span>\n    <span class=\"token keyword\">const</span> auth <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>headers <span class=\"token operator\">&amp;&amp;</span> req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>authorization<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> email <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>auth<span class=\"token punctuation\">,</span> <span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ascii'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"></span>    <span class=\"token comment\">// if the email isn't formatted validly, return null for user</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isEmail<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> user<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>    <span class=\"token comment\">// find a user by their email</span>\n    <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> store<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">findOrCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> where<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> email <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> users <span class=\"token operator\">&amp;&amp;</span> users<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> users<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> user<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>user<span class=\"token punctuation\">.</span>dataValues <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// .... with the rest of the server object code below, typeDefs, resolvers, etc....</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Just like in the steps outlined above, we're checking the authorization headers on the request, authenticating the user by looking up their credentials in the database, and attaching the user to the "},{"type":"raw","value":"<code class=\"language-text\">context</code>"},{"type":"text","value":". While we definitely don't advocate using this specific implementation in production since it's not secure, all of the concepts outlined here are transferable to how you'll implement authentication in a real world application."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"How do we create the token passed to the "},{"type":"raw","value":"<code class=\"language-text\">authorization</code>"},{"type":"text","value":" headers? Let's move on to the next section, so we can write our resolver for the "},{"type":"raw","value":"<code class=\"language-text\">login</code>"},{"type":"text","value":" mutation."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"write-mutation-resolvers"},"children":[{"type":"element","tagName":"a","properties":{"href":"#write-mutation-resolvers","aria-label":"write mutation resolvers permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Write Mutation resolvers"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Writing "},{"type":"raw","value":"<code class=\"language-text\">Mutation</code>"},{"type":"text","value":" resolvers is similar to the resolvers we've already written. First, let's write the "},{"type":"raw","value":"<code class=\"language-text\">login</code>"},{"type":"text","value":" resolver to complete our authentication flow. Add the code below to your resolver map underneath the "},{"type":"raw","value":"<code class=\"language-text\">Query</code>"},{"type":"text","value":" resolvers:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"src/resolvers.js"}]}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\">Mutation<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">login</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> email <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> dataSources <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> dataSources<span class=\"token punctuation\">.</span>userAPI<span class=\"token punctuation\">.</span><span class=\"token function\">findOrCreateUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> email <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The "},{"type":"raw","value":"<code class=\"language-text\">login</code>"},{"type":"text","value":" resolver receives an email address and returns a token if a user exists. In a later section, we'll learn how to save that token on the client."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now, let's add the resolvers for "},{"type":"raw","value":"<code class=\"language-text\">bookTrips</code>"},{"type":"text","value":" and "},{"type":"raw","value":"<code class=\"language-text\">cancelTrip</code>"},{"type":"text","value":" to "},{"type":"raw","value":"<code class=\"language-text\">Mutation</code>"},{"type":"text","value":":"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"src/resolvers.js"}]}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\">Mutation<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">bookTrips</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> launchIds <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> dataSources <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> dataSources<span class=\"token punctuation\">.</span>userAPI<span class=\"token punctuation\">.</span><span class=\"token function\">bookTrips</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> launchIds <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> launches <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> dataSources<span class=\"token punctuation\">.</span>launchAPI<span class=\"token punctuation\">.</span><span class=\"token function\">getLaunchesByIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      launchIds<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      success<span class=\"token punctuation\">:</span> results <span class=\"token operator\">&amp;&amp;</span> results<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> launchIds<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n      message<span class=\"token punctuation\">:</span>\n        results<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> launchIds<span class=\"token punctuation\">.</span>length\n          <span class=\"token operator\">?</span> <span class=\"token string\">'trips booked successfully'</span>\n          <span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">the following launches couldn't be booked: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>launchIds<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>\n              <span class=\"token parameter\">id</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>results<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      launches<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">cancelTrip</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> launchId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> dataSources <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> dataSources<span class=\"token punctuation\">.</span>userAPI<span class=\"token punctuation\">.</span><span class=\"token function\">cancelTrip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> launchId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        success<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token punctuation\">:</span> <span class=\"token string\">'failed to cancel trip'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> launch <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> dataSources<span class=\"token punctuation\">.</span>launchAPI<span class=\"token punctuation\">.</span><span class=\"token function\">getLaunchById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> launchId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      success<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      message<span class=\"token punctuation\">:</span> <span class=\"token string\">'trip cancelled'</span><span class=\"token punctuation\">,</span>\n      launches<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>launch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Both "},{"type":"raw","value":"<code class=\"language-text\">bookTrips</code>"},{"type":"text","value":" and "},{"type":"raw","value":"<code class=\"language-text\">cancelTrips</code>"},{"type":"text","value":" must return the properties specified on our "},{"type":"raw","value":"<code class=\"language-text\">TripUpdateResponse</code>"},{"type":"text","value":" type from our schema, which contains a success indicator, a status message, and an array of launches that we've either booked or cancelled. The "},{"type":"raw","value":"<code class=\"language-text\">bookTrips</code>"},{"type":"text","value":" mutation can get tricky because we have to account for a partial success where some launches could be booked and some could fail. Right now, we're simply indicating a partial success in the "},{"type":"raw","value":"<code class=\"language-text\">message</code>"},{"type":"text","value":" field to keep it simple."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"run-mutations-in-the-playground"},"children":[{"type":"element","tagName":"a","properties":{"href":"#run-mutations-in-the-playground","aria-label":"run mutations in the playground permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Run mutations in the playground"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It's time for the fun part - running our mutations in the playground! Go back to the playground in your browser and reload the schema with the little return arrow at the top on the right of the address line."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"GraphQL mutations are structured exactly like queries, except they use the "},{"type":"raw","value":"<code class=\"language-text\">mutation</code>"},{"type":"text","value":" keyword. Let's copy the mutation below and run in the playground:"}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token keyword\">mutation</span> LoginUser <span class=\"token punctuation\">{</span>\n  login<span class=\"token punctuation\">(</span><span class=\"token attr-name\">email</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"daisy@warthog.dev\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You should receive back a string that looks like this: "},{"type":"raw","value":"<code class=\"language-text\">ZGFpc3lAYXBvbGxvZ3JhcGhxbC5jb20=</code>"},{"type":"text","value":". Copy that string because we will need it for the next mutation."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now, let's try booking some trips. Only authorized users are permitted to book trips, however. Luckily, the playground has a section where we can paste in our authorization header from the previous mutation to authenticate us as a user. First, paste this mutation into the playground:"}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token keyword\">mutation</span> BookTrips <span class=\"token punctuation\">{</span>\n  bookTrips<span class=\"token punctuation\">(</span><span class=\"token attr-name\">launchIds</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">67</span><span class=\"token punctuation\">,</span> <span class=\"token number\">68</span><span class=\"token punctuation\">,</span> <span class=\"token number\">69</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    success\n    message\n    launches <span class=\"token punctuation\">{</span>\n      id\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Next, paste our authorization header into the HTTP Headers box at the bottom:"}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"authorization\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ZGFpc3lAYXBvbGxvZ3JhcGhxbC5jb20=\"</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Then, run the mutation. You should see a success message, along with the ids of the mutations we just booked. Testing mutations manually in the playground is a good way to explore our API, but in a real-world application, we should run automated tests so we can safely refactor our code. In the next section, you'll actually learn about running your graph in production instead of testing your graph."}]}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":426,"column":1,"offset":18488}}}}