{"expireTime":9007200819376322000,"key":"transformer-remark-markdown-html-ast-558442ba7941cbddd4a90ee5f50b0a30-gatsby-remark-autolink-headersgatsby-remark-copy-linked-filesgatsby-remark-prismjsgatsby-remark-check-links-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Time to accomplish: "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"10 Minutes"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now that we've constructed our schema, we need to hook up our data sources to our GraphQL API. GraphQL APIs are extremely flexible because you can layer them on top of any service, including any business logic, REST APIs, databases, or gRPC services."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Warthog makes connecting these services to your graph simple with our data source API. An "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Warthog data source"}]},{"type":"text","value":" is a class that encapsulates all of the data fetching logic, as well as caching and deduplication, for a particular service. By using Warthog data sources to hook up your services to your graph API, you're also following best practices for organizing your code."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the next sections, we'll build data sources for a REST API and a SQL database and connect them to Warthog Server. Don't worry if you're not familiar with either of those technologies, you won't need to understand them deeply in order to follow the examples. ðŸ˜€"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"connect-a-rest-api"},"children":[{"type":"element","tagName":"a","properties":{"href":"#connect-a-rest-api","aria-label":"connect a rest api permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Connect a REST API"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"First, let's connect the "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/r-spacex/SpaceX-API"},"children":[{"type":"text","value":"Space-X v2 REST API"}]},{"type":"text","value":" to our graph. To get started, install the "},{"type":"raw","value":"<code class=\"language-text\">warthog-datasource-rest</code>"},{"type":"text","value":" package:"}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> warthog-datasource-rest --save</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This package exposes the "},{"type":"raw","value":"<code class=\"language-text\">RESTDataSource</code>"},{"type":"text","value":" class that is responsible for fetching data from a REST API. To build a data source for a REST API, extend the "},{"type":"raw","value":"<code class=\"language-text\">RESTDataSource</code>"},{"type":"text","value":" class and define "},{"type":"raw","value":"<code class=\"language-text\">this.baseURL</code>"},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In our example, the "},{"type":"raw","value":"<code class=\"language-text\">baseURL</code>"},{"type":"text","value":" for our API is "},{"type":"raw","value":"<code class=\"language-text\">https://api.spacexdata.com/v2/</code>"},{"type":"text","value":". Let's create our "},{"type":"raw","value":"<code class=\"language-text\">LaunchAPI</code>"},{"type":"text","value":" data source by adding the code below to "},{"type":"raw","value":"<code class=\"language-text\">src/datasources/launch.js</code>"},{"type":"text","value":":"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"src/datasources/launch.js"}]}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> RESTDataSource <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'warthog-datasource-rest'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LaunchAPI</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RESTDataSource</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'https://api.spacexdata.com/v2/'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> LaunchAPI<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The Warthog "},{"type":"raw","value":"<code class=\"language-text\">RESTDataSource</code>"},{"type":"text","value":" also sets up an in-memory cache that caches responses from our REST resources with no additional setup. We call this "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"partial query caching"}]},{"type":"text","value":". What's great about this cache is that you can reuse existing caching logic that your REST API exposes. If you're curious to learn more about partial query caching with Warthog data sources, please check out "},{"type":"element","tagName":"a","properties":{"href":"https://blog.warthog.dev/easy-and-performant-graphql-over-rest-e02796993b2b"},"children":[{"type":"text","value":"our blog post"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"write-data-fetching-methods"},"children":[{"type":"element","tagName":"a","properties":{"href":"#write-data-fetching-methods","aria-label":"write data fetching methods permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Write data fetching methods"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The next step is to add methods to the "},{"type":"raw","value":"<code class=\"language-text\">LaunchAPI</code>"},{"type":"text","value":" data source that correspond to the queries our graph API needs to fetch. According to our schema, we'll need a method to get all of the launches. Let's add a "},{"type":"raw","value":"<code class=\"language-text\">getAllLaunches</code>"},{"type":"text","value":" method to our "},{"type":"raw","value":"<code class=\"language-text\">LaunchAPI</code>"},{"type":"text","value":" class now:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"src/datasources/launch.js"}]}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token function\">getAllLaunches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'launches'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">?</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">launch</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">launchReducer</span><span class=\"token punctuation\">(</span>launch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The Warthog REST data sources have helper methods that correspond to HTTP verbs like "},{"type":"raw","value":"<code class=\"language-text\">GET</code>"},{"type":"text","value":" and "},{"type":"raw","value":"<code class=\"language-text\">POST</code>"},{"type":"text","value":". In the code above, "},{"type":"raw","value":"<code class=\"language-text\">this.get(&#39;launches&#39;)</code>"},{"type":"text","value":", makes a "},{"type":"raw","value":"<code class=\"language-text\">GET</code>"},{"type":"text","value":" request to "},{"type":"raw","value":"<code class=\"language-text\">https://api.spacexdata.com/v2/launches</code>"},{"type":"text","value":" and stores the returned launches in the "},{"type":"raw","value":"<code class=\"language-text\">response</code>"},{"type":"text","value":" variable. Then, the "},{"type":"raw","value":"<code class=\"language-text\">getAllLaunches</code>"},{"type":"text","value":" method maps over the launches and transforms the response from our REST endpoint with "},{"type":"raw","value":"<code class=\"language-text\">this.launchReducer</code>"},{"type":"text","value":". If there are no launches, an empty array is returned."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now, we need to write our "},{"type":"raw","value":"<code class=\"language-text\">launchReducer</code>"},{"type":"text","value":" method in order to transform our launch data into the shape our schema expects. We recommend this approach in order to decouple your graph API from business logic specific to your REST API. First, let's recall what our "},{"type":"raw","value":"<code class=\"language-text\">Launch</code>"},{"type":"text","value":" type looks like in our schema. You don't have to copy this code:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"src/schema.js"}]}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Launch</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">site</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">mission</span><span class=\"token punctuation\">:</span> Mission\n  <span class=\"token attr-name\">rocket</span><span class=\"token punctuation\">:</span> Rocket\n  <span class=\"token attr-name\">isBooked</span><span class=\"token punctuation\">:</span> Boolean<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Next, let's write a "},{"type":"raw","value":"<code class=\"language-text\">launchReducer</code>"},{"type":"text","value":" function to transform the data into that shape. Copy the following code into your "},{"type":"raw","value":"<code class=\"language-text\">LaunchAPI</code>"},{"type":"text","value":" class:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"src/datasources/launch.js"}]}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token function\">launchReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">launch</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> launch<span class=\"token punctuation\">.</span>flight_number <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    cursor<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>launch<span class=\"token punctuation\">.</span>launch_date_unix<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    site<span class=\"token punctuation\">:</span> launch<span class=\"token punctuation\">.</span>launch_site <span class=\"token operator\">&amp;&amp;</span> launch<span class=\"token punctuation\">.</span>launch_site<span class=\"token punctuation\">.</span>site_name<span class=\"token punctuation\">,</span>\n    mission<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      name<span class=\"token punctuation\">:</span> launch<span class=\"token punctuation\">.</span>mission_name<span class=\"token punctuation\">,</span>\n      missionPatchSmall<span class=\"token punctuation\">:</span> launch<span class=\"token punctuation\">.</span>links<span class=\"token punctuation\">.</span>mission_patch_small<span class=\"token punctuation\">,</span>\n      missionPatchLarge<span class=\"token punctuation\">:</span> launch<span class=\"token punctuation\">.</span>links<span class=\"token punctuation\">.</span>mission_patch<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    rocket<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token punctuation\">:</span> launch<span class=\"token punctuation\">.</span>rocket<span class=\"token punctuation\">.</span>rocket_id<span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">:</span> launch<span class=\"token punctuation\">.</span>rocket<span class=\"token punctuation\">.</span>rocket_name<span class=\"token punctuation\">,</span>\n      type<span class=\"token punctuation\">:</span> launch<span class=\"token punctuation\">.</span>rocket<span class=\"token punctuation\">.</span>rocket_type<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With the above changes, we can easily make changes to the "},{"type":"raw","value":"<code class=\"language-text\">launchReducer</code>"},{"type":"text","value":" method while the "},{"type":"raw","value":"<code class=\"language-text\">getAllLaunches</code>"},{"type":"text","value":" method stays lean and concise. The "},{"type":"raw","value":"<code class=\"language-text\">launchReducer</code>"},{"type":"text","value":" method also makes testing the "},{"type":"raw","value":"<code class=\"language-text\">LaunchAPI</code>"},{"type":"text","value":" data source class easier, which we'll cover later."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Next, let's take care of fetching a specific launch by its ID. Let's add two methods, "},{"type":"raw","value":"<code class=\"language-text\">getLaunchById</code>"},{"type":"text","value":", and "},{"type":"raw","value":"<code class=\"language-text\">getLaunchesByIds</code>"},{"type":"text","value":" to the "},{"type":"raw","value":"<code class=\"language-text\">LaunchAPI</code>"},{"type":"text","value":" class."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"src/datasources/launch.js"}]}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token function\">getLaunchById</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> launchId <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'launches'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> flight_number<span class=\"token punctuation\">:</span> launchId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">launchReducer</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getLaunchesByIds</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> launchIds <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>\n    launchIds<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">launchId</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLaunchById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> launchId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The "},{"type":"raw","value":"<code class=\"language-text\">getLaunchById</code>"},{"type":"text","value":" method takes in a flight number and returns the data for a particular launch, while "},{"type":"raw","value":"<code class=\"language-text\">getLaunchesByIds</code>"},{"type":"text","value":" returns several launches based on their respective "},{"type":"raw","value":"<code class=\"language-text\">launchIds</code>"},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now that we've connected our REST API successfully, let's connect our database!"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"connect-a-database"},"children":[{"type":"element","tagName":"a","properties":{"href":"#connect-a-database","aria-label":"connect a database permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Connect a database"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Our REST API is read-only, so we need to connect our graph API to a database for saving and fetching user data. This tutorial uses SQLite for our SQL database, and Sequelize for our ORM. Our "},{"type":"raw","value":"<code class=\"language-text\">package.json</code>"},{"type":"text","value":" already included these packages, thus they were installed in the first part of this tutorial with "},{"type":"raw","value":"<code class=\"language-text\">npm install</code>"},{"type":"text","value":". Also, since this section contains some SQL-specific code that isn't necessary to understanding Warthog data sources, we've already built a "},{"type":"raw","value":"<code class=\"language-text\">UserAPI</code>"},{"type":"text","value":" data source for you in "},{"type":"raw","value":"<code class=\"language-text\">src/datasources/user.js</code>"},{"type":"text","value":". Please navigate to that file so we can explain the overall concepts."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"build-a-custom-data-source"},"children":[{"type":"element","tagName":"a","properties":{"href":"#build-a-custom-data-source","aria-label":"build a custom data source permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Build a custom data source"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Warthog doesn't have support for a SQL data source yet (although we'd love to help guide you if you're interested in contributing), so we will need to create a custom data source for our database by extending the generic Warthog data source class. You can create your own with the "},{"type":"raw","value":"<code class=\"language-text\">warthog-datasource</code>"},{"type":"text","value":" package."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here are some of the core concepts for creating your own data source:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The "},{"type":"raw","value":"<code class=\"language-text\">initialize</code>"},{"type":"text","value":" method: You'll need to implement this method if you want to pass in any configuration options to your class. Here, we're using this method to access our graph API's context."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">this.context</code>"},{"type":"text","value":": A graph API's context is an object that's shared among every resolver in a GraphQL request. We're going to explain this in more detail in the next section. Right now, all you need to know is that the context is useful for storing user information."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Caching: While the REST data source comes with its own built in cache, the generic data source does not. You can use "},{"type":"element","tagName":"a","properties":{"href":"https://www.warthog.dev/docs/warthog-server/features/data-sources/#using-memcached-redis-as-a-cache-storage-backend"},"children":[{"type":"text","value":"our cache primitives"}]},{"type":"text","value":" to build your own, however!"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's go over some of the methods we created in "},{"type":"raw","value":"<code class=\"language-text\">src/datasources/user.js</code>"},{"type":"text","value":" to fetch and update data in our database. You will want to reference these in the next section:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">findOrCreateUser({ email })</code>"},{"type":"text","value":": Finds or creates a user with a given "},{"type":"raw","value":"<code class=\"language-text\">email</code>"},{"type":"text","value":" in the database"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">bookTrips({ launchIds })</code>"},{"type":"text","value":": Takes an object with an array of "},{"type":"raw","value":"<code class=\"language-text\">launchIds</code>"},{"type":"text","value":" and books them for the logged in user"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">cancelTrip({ launchId })</code>"},{"type":"text","value":": Takes an object with a "},{"type":"raw","value":"<code class=\"language-text\">launchId</code>"},{"type":"text","value":" and cancels that launch for the logged in user"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">getLaunchIdsByUser()</code>"},{"type":"text","value":": Returns all booked launches for the logged in user"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">isBookedOnLaunch({ launchId })</code>"},{"type":"text","value":": Determines whether the logged in user booked a certain launch"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"add-data-sources-to-warthog-server"},"children":[{"type":"element","tagName":"a","properties":{"href":"#add-data-sources-to-warthog-server","aria-label":"add data sources to warthog server permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Add data sources to Warthog Server"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now that we've built our "},{"type":"raw","value":"<code class=\"language-text\">LaunchAPI</code>"},{"type":"text","value":" data source to connect our REST API and our "},{"type":"raw","value":"<code class=\"language-text\">UserAPI</code>"},{"type":"text","value":" data source to connect our SQL database, we need to add them to our graph API."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Adding our data sources is simple. Just create a "},{"type":"raw","value":"<code class=\"language-text\">dataSources</code>"},{"type":"text","value":" property on your "},{"type":"raw","value":"<code class=\"language-text\">ApolloServer</code>"},{"type":"text","value":" that corresponds to a function that returns an object with your instantiated data sources. Let's see what that looks like by navigating to "},{"type":"raw","value":"<code class=\"language-text\">src/index.js</code>"},{"type":"text","value":" and adding the code below:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"src/index.js"}]}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ApolloServer <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'warthog-server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./schema'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./utils'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> LaunchAPI <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./datasources/launch'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> UserAPI <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./datasources/user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  typeDefs<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">dataSources</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    launchAPI<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LaunchAPI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    userAPI<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserAPI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> store <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ðŸš€ Server ready at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"First, we import our "},{"type":"raw","value":"<code class=\"language-text\">createStore</code>"},{"type":"text","value":" function to set up our database, as well as our data sources: "},{"type":"raw","value":"<code class=\"language-text\">LaunchAPI</code>"},{"type":"text","value":" and "},{"type":"raw","value":"<code class=\"language-text\">UserAPI</code>"},{"type":"text","value":". Then, we create our database by calling "},{"type":"raw","value":"<code class=\"language-text\">createStore</code>"},{"type":"text","value":". Finally, we add the "},{"type":"raw","value":"<code class=\"language-text\">dataSources</code>"},{"type":"text","value":" function to our "},{"type":"raw","value":"<code class=\"language-text\">ApolloServer</code>"},{"type":"text","value":" to connect "},{"type":"raw","value":"<code class=\"language-text\">LaunchAPI</code>"},{"type":"text","value":" and "},{"type":"raw","value":"<code class=\"language-text\">UserAPI</code>"},{"type":"text","value":" to our graph. We also pass in our database we created to the "},{"type":"raw","value":"<code class=\"language-text\">UserAPI</code>"},{"type":"text","value":" data source."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you use "},{"type":"raw","value":"<code class=\"language-text\">this.context</code>"},{"type":"text","value":" in your datasource, it's critical to create a new instance in the "},{"type":"raw","value":"<code class=\"language-text\">dataSources</code>"},{"type":"text","value":" function and to not share a single instance. Otherwise, "},{"type":"raw","value":"<code class=\"language-text\">initialize</code>"},{"type":"text","value":" may be called during the execution of asynchronous code for a specific user, and replace the  "},{"type":"raw","value":"<code class=\"language-text\">this.context</code>"},{"type":"text","value":" by the context of another user."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now that we've hooked up our data sources to Warthog Server, it's time to move on to the next section and learn how to call our data sources from within our resolvers."}]}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":175,"column":1,"offset":9709}}}}