{"expireTime":9007200819376316000,"key":"transformer-remark-markdown-html-ast-6a5950d869add29d6fcdc7205b3b2e25-gatsby-remark-autolink-headersgatsby-remark-copy-linked-filesgatsby-remark-prismjsgatsby-remark-check-links-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Warthog is an implementation of GraphQL designed for the needs of product\nengineering teams building modern, data-driven applications. It\nencourages an agile, incremental approach and takes special care to\navoid requiring any changes to existing APIs and services. Warthog puts\nparticular emphasis on tooling and workflows."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Warthog is best used as a new layer in your stack that sits between your\nservices and your applications. It's a combination of open source\ncomponents, commercial extensions, and cloud services. The major pieces\nare:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/platform-diagram-9f76c95ca7dea9f8d3f63b8d37b1ce0f.png","alt":"Graph layer"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"core-open-source-components"},"children":[{"type":"element","tagName":"a","properties":{"href":"#core-open-source-components","aria-label":"core open source components permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Core open source components"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Warthog Server"}]},{"type":"text","value":" is a JavaScript GraphQL server for defining a\n"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"schema"}]},{"type":"text","value":" and a set of "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"resolvers"}]},{"type":"text","value":" that implement each part of that\nschema. Typically Warthog Server is extensible: plugins can hook in to each stage of the\nrequest pipeline and server's own lifecycle, making it possible to\nimplement custom behaviors in add-on packages. Warthog Server supports\nAWS Lambda and other serverless environments."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Warthog Client"}]},{"type":"text","value":" is a sophisticated GraphQL client that\nmanages data and state in an application. Among other benefits, it\nenables a declarative programming style that lets developers define\nqueries as part of UI components; the client manages all the hairy\ndetails of binding query results to the UI, managing consistency,\ncaching, and so on. Warthog Client also supports an\nexceptionally elegant approach to state management by "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"extending"}]},{"type":"text","value":" the\nGraphQL schema inside the client with additional structure. Warthog Client\nincludes integrations for React, React Native, Vue, Angular, and\nother view layers."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"iOS and Android"}]},{"type":"text","value":" clients, originally contributed by the community,\nmake it possible to query a GraphQL API from native iOS and\nAndroid applications."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Warthog CLI"}]},{"type":"text","value":" is a simple command line client that provides\naccess to Warthog cloud services."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"cloud-services"},"children":[{"type":"element","tagName":"a","properties":{"href":"#cloud-services","aria-label":"cloud services permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Cloud services"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Schema registry"}]},{"type":"text","value":" "},{"type":"text","value":"—"},{"type":"text","value":" a registry for GraphQL schemas that acts\nas a central source of truth for a schema, enriched with additional\nmetadata like field-level usage statistics."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Client registry"}]},{"type":"text","value":" "},{"type":"text","value":"—"},{"type":"text","value":" a registry to track each known consumer\nof a schema, which can include both pre-registered and ad-hoc clients."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Operation registry"}]},{"type":"text","value":" "},{"type":"text","value":"—"},{"type":"text","value":" a registry of all the known operations\nagainst the schema, which similarly can include both pre-registered\nand ad-hoc operations."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Trace warehouse"}]},{"type":"text","value":" "},{"type":"text","value":"—"},{"type":"text","value":" a data pipeline and storage layer that\ncaptures structured information about each GraphQL operation\nprocessed by an Warthog Server (or any other server that implements\nthe Warthog trace API), including the specific set of fields accessed,\nthe tree of resolver calls that were made with timing data for each,\nand important metadata such as client identity and which version\nof the schema was queried."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"gateway"},"children":[{"type":"element","tagName":"a","properties":{"href":"#gateway","aria-label":"gateway permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Gateway"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Warthog Gateway"}]},{"type":"text","value":" "},{"type":"text","value":"—"},{"type":"text","value":" a configuration of Warthog Server and additional plugins\nthat functions as a GraphQL gateway. The gateway composes separately deployed \"micro-schemas\" that reference each other into a single master schema, which looks to a client just like any regular GraphQL schema. To answer queries, the gateway builds a query plan, fetches data from each upstream GraphQL service, and assembles it all back together into a single result."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"workflows"},"children":[{"type":"element","tagName":"a","properties":{"href":"#workflows","aria-label":"workflows permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Workflows"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"On top of these components, Warthog implements some useful workflows for\nmanaging a GraphQL API. Each of these workflows makes use of several\ndifferent parts of the platform, working together. Some examples are:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"schema-change-validation"},"children":[{"type":"element","tagName":"a","properties":{"href":"#schema-change-validation","aria-label":"schema change validation permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Schema change validation"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Warthog includes a facility for checking the compatibility of a given\nschema against a set of previously-observed operations. This uses the\ntrace warehouse, operation registry, and (typically) the client\nregistry. As an example, an operation that references a missing field or\nan operation that doesn't pass a required argument to a field would\ncause an incompatibility error. The compatibility check runs statically,\ntaking advantage of the schema's type definitions, so it doesn't require\na running server."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"safelisting"},"children":[{"type":"element","tagName":"a","properties":{"href":"#safelisting","aria-label":"safelisting permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Safelisting"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Warthog provides an end-to-end mechanism for "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"safelisting"}]},{"type":"text","value":" known clients\nand queries, a recommended best practice that limits production use of a\nGraphQL API to specific pre-arranged operations. There are two parts\nhere. First, the Warthog CLI extracts all the queries from a client\ncodebase, computes the over-the-wire subset of the query (stripping out\nthe part that references the client's local schema), and stores it in\nthe operation registry. Separately, an Warthog Server plugin synchronizes\nthe list of pre-registered operations to the server, which then rejects\nqueries that aren't present in its local copy."}]}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":96,"column":1,"offset":4761}}}}