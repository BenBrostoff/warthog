{"expireTime":9007200819376323000,"key":"transformer-remark-markdown-html-ast-d060bf254123f98e860c4682c2665b8c-gatsby-remark-autolink-headersgatsby-remark-copy-linked-filesgatsby-remark-prismjsgatsby-remark-check-links-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first step on our journey toward building our graph API is constructing its "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"schema"}]},{"type":"text","value":". You can think of a schema as a blueprint for all of the data you can access in your graph. Throughout this section, you'll learn how to build and explore your graph's schema with Warthog."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"set-up-warthog-server"},"children":[{"type":"element","tagName":"a","properties":{"href":"#set-up-warthog-server","aria-label":"set up warthog server permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Set up Warthog Server"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before we write our schema, we need to set up our graph API's server. "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Warthog Server"}]},{"type":"text","value":" is a library that helps you build a production-ready graph API over your data. It can connect to any data source, including REST APIs and databases, and it seamlessly integrates with Warthog developer tooling."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"From the root, let's install our project's dependencies:"}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> start/server <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The two packages you need to get started with Warthog Server are "},{"type":"raw","value":"<code class=\"language-text\">warthog-server</code>"},{"type":"text","value":" and "},{"type":"raw","value":"<code class=\"language-text\">graphql</code>"},{"type":"text","value":", which we've already installed for you. Now, let's navigate to "},{"type":"raw","value":"<code class=\"language-text\">src/index.js</code>"},{"type":"text","value":" so we can create our server. Copy the code below into the file."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"src/index.js"}]}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ApolloServer <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'warthog-server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./schema'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> typeDefs <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To build our graph API, we need to import the "},{"type":"raw","value":"<code class=\"language-text\">ApolloServer</code>"},{"type":"text","value":" class from "},{"type":"raw","value":"<code class=\"language-text\">warthog-server</code>"},{"type":"text","value":". We also need to import our schema from "},{"type":"raw","value":"<code class=\"language-text\">src/schema.js</code>"},{"type":"text","value":". Next, let's create a new instance of "},{"type":"raw","value":"<code class=\"language-text\">ApolloServer</code>"},{"type":"text","value":" and pass our schema to the "},{"type":"raw","value":"<code class=\"language-text\">typeDefs</code>"},{"type":"text","value":" property on the configuration object."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before we can start the server, we need to write our schema first."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"write-your-graphs-schema"},"children":[{"type":"element","tagName":"a","properties":{"href":"#write-your-graphs-schema","aria-label":"write your graphs schema permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Write your graph's schema"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Every graph API is centered around its schema. You can think of a schema as a blueprint that describes all of your data's types and their relationships. A schema also defines what data we can fetch through queries and what data we can update through mutations. It is strongly typed, which unlocks powerful developer tooling."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Schemas are at their best when they are designed around the needs of the clients that are consuming them. Since a schema sits in between your clients and your underlying services, it serves as a perfect middle ground for frontend and backend teams to collaborate. We recommend that teams practice "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Schema First Development"}]},{"type":"text","value":" and agree upon the schema first before any API development begins."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's think about the data we will need to expose in order to build our app. Our app needs to:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Fetch all upcoming rocket launches"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Fetch a specific launch by its ID"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Login the user"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Book launch trips if the user is logged in"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Cancel launch trips if the user is logged in"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Our schema will be based on these features. In "},{"type":"raw","value":"<code class=\"language-text\">src/schema.js</code>"},{"type":"text","value":", import "},{"type":"raw","value":"<code class=\"language-text\">gql</code>"},{"type":"text","value":" from Warthog Server and create a variable called "},{"type":"raw","value":"<code class=\"language-text\">typeDefs</code>"},{"type":"text","value":" for your schema. Your schema will go inside the "},{"type":"raw","value":"<code class=\"language-text\">gql</code>"},{"type":"text","value":" function (between the backticks in this portion: "},{"type":"raw","value":"<code>"},{"type":"text","value":"gql"},{"type":"text","value":"`"},{"type":"text","value":"`"},{"type":"raw","value":"</code>"},{"type":"text","value":")."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"src/schema.js"}]}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> gql <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'warthog-server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> typeDefs<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"query-type"},"children":[{"type":"element","tagName":"a","properties":{"href":"#query-type","aria-label":"query type permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Query type"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We'll start with the "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Query type"}]},{"type":"text","value":", which is the entry point into our schema that describes what data we can fetch."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The language we use to write our schema is GraphQL's schema definition language (SDL). If you've used TypeScript before, the syntax will look familiar. Copy the following SDL code between the backticks where the "},{"type":"raw","value":"<code class=\"language-text\">gql</code>"},{"type":"text","value":" function is invoked in  "},{"type":"raw","value":"<code class=\"language-text\">src/schema.js</code>"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"src/schema.js"}]}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">launches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Launch<span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">launch</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Launch\n  <span class=\"token comment\"># Queries for the current user</span>\n  <span class=\"token attr-name\">me</span><span class=\"token punctuation\">:</span> User\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"First, we define a "},{"type":"raw","value":"<code class=\"language-text\">launches</code>"},{"type":"text","value":" query to fetch all upcoming rocket launches. This query returns an array of launches, which will never be null. Since all types in GraphQL are nullable by default, we need to add the "},{"type":"raw","value":"<code class=\"language-text\">!</code>"},{"type":"text","value":" to indicate that our query will always return data. Next, we define a query to fetch a "},{"type":"raw","value":"<code class=\"language-text\">launch</code>"},{"type":"text","value":" by its ID. This query takes an argument of "},{"type":"raw","value":"<code class=\"language-text\">id</code>"},{"type":"text","value":" and returns a single launch. Finally, we will add a "},{"type":"raw","value":"<code class=\"language-text\">me</code>"},{"type":"text","value":" query to fetch the current user's data. Above the "},{"type":"raw","value":"<code class=\"language-text\">me</code>"},{"type":"text","value":" query is an example of a comment added to the schema."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"How do we define what properties are exposed by "},{"type":"raw","value":"<code class=\"language-text\">Launch</code>"},{"type":"text","value":" and "},{"type":"raw","value":"<code class=\"language-text\">User</code>"},{"type":"text","value":"? For these types, we need to define a GraphQL object type."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"object--scalar-types"},"children":[{"type":"element","tagName":"a","properties":{"href":"#object--scalar-types","aria-label":"object  scalar types permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Object & scalar types"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's define what the structure of "},{"type":"raw","value":"<code class=\"language-text\">Launch</code>"},{"type":"text","value":" looks like by creating an "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"object type"}]},{"type":"text","value":":"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"src/schema.js"}]}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Launch</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">site</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">mission</span><span class=\"token punctuation\">:</span> Mission\n  <span class=\"token attr-name\">rocket</span><span class=\"token punctuation\">:</span> Rocket\n  <span class=\"token attr-name\">isBooked</span><span class=\"token punctuation\">:</span> Boolean<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The "},{"type":"raw","value":"<code class=\"language-text\">Launch</code>"},{"type":"text","value":" type has "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"fields"}]},{"type":"text","value":" that correspond to object and scalar types. A "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"scalar type"}]},{"type":"text","value":" is a primitive type like "},{"type":"raw","value":"<code class=\"language-text\">ID</code>"},{"type":"text","value":", "},{"type":"raw","value":"<code class=\"language-text\">String</code>"},{"type":"text","value":", "},{"type":"raw","value":"<code class=\"language-text\">Boolean</code>"},{"type":"text","value":", or "},{"type":"raw","value":"<code class=\"language-text\">Int</code>"},{"type":"text","value":". You can think of scalars as the leaves of your graph that all fields resolve to. GraphQL has many scalars built in, and you can also define "},{"type":"element","tagName":"a","properties":{"href":"https://www.warthog.dev/docs/warthog-server/features/scalars-enums/"},"children":[{"type":"text","value":"custom scalars"}]},{"type":"text","value":" like "},{"type":"raw","value":"<code class=\"language-text\">Date</code>"},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The "},{"type":"raw","value":"<code class=\"language-text\">Mission</code>"},{"type":"text","value":" and "},{"type":"raw","value":"<code class=\"language-text\">Rocket</code>"},{"type":"text","value":" types represent other object types. Let's define the fields on "},{"type":"raw","value":"<code class=\"language-text\">Mission</code>"},{"type":"text","value":", "},{"type":"raw","value":"<code class=\"language-text\">Rocket</code>"},{"type":"text","value":", and "},{"type":"raw","value":"<code class=\"language-text\">User</code>"},{"type":"text","value":":"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"src/schema.js"}]}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Rocket</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">type</span><span class=\"token punctuation\">:</span> String\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">email</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">trips</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Launch<span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Mission</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">missionPatch</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">size</span><span class=\"token punctuation\">:</span> PatchSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> String\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">PatchSize</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">SMALL</span>\n  <span class=\"token constant\">LARGE</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You'll notice that the field "},{"type":"raw","value":"<code class=\"language-text\">missionPatch</code>"},{"type":"text","value":" takes an argument of "},{"type":"raw","value":"<code class=\"language-text\">size</code>"},{"type":"text","value":". GraphQL is flexible because any fields can contain arguments, not just queries. The "},{"type":"raw","value":"<code class=\"language-text\">size</code>"},{"type":"text","value":" argument corresponds to an "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"enum type"}]},{"type":"text","value":", which we're defining at the bottom with "},{"type":"raw","value":"<code class=\"language-text\">PatchSize</code>"},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are some other less common types you might also encounter when building your graph's schema. For a full list, you can reference this handy "},{"type":"element","tagName":"a","properties":{"href":"https://devhints.io/graphql#schema"},"children":[{"type":"text","value":"cheat sheet"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"mutation-type"},"children":[{"type":"element","tagName":"a","properties":{"href":"#mutation-type","aria-label":"mutation type permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Mutation type"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now, let's define the "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Mutation type"}]},{"type":"text","value":". The "},{"type":"raw","value":"<code class=\"language-text\">Mutation</code>"},{"type":"text","value":" type is the entry point into our graph for modifying data. Just like the "},{"type":"raw","value":"<code class=\"language-text\">Query</code>"},{"type":"text","value":" type, the "},{"type":"raw","value":"<code class=\"language-text\">Mutation</code>"},{"type":"text","value":" type is a special object type."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"src/schema.js"}]}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Mutation</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"># if false, booking trips failed -- check errors</span>\n  <span class=\"token attr-name\">bookTrips</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">launchIds</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>ID<span class=\"token punctuation\">]</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> TripUpdateResponse<span class=\"token operator\">!</span>\n\n  <span class=\"token comment\"># if false, cancellation failed -- check errors</span>\n  <span class=\"token attr-name\">cancelTrip</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">launchId</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> TripUpdateResponse<span class=\"token operator\">!</span>\n\n  <span class=\"token attr-name\">login</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">email</span><span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> String <span class=\"token comment\"># login token</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Both the "},{"type":"raw","value":"<code class=\"language-text\">bookTrips</code>"},{"type":"text","value":" and "},{"type":"raw","value":"<code class=\"language-text\">cancelTrip</code>"},{"type":"text","value":" mutations take an argument and return a "},{"type":"raw","value":"<code class=\"language-text\">TripUpdateResponse</code>"},{"type":"text","value":". The return type for your GraphQL mutation is completely up to you, but we recommend defining a special response type to ensure a proper response is returned back to the client. In a larger project, you might abstract this type into an interface, but for now, we're going to define "},{"type":"raw","value":"<code class=\"language-text\">TripUpdateResponse</code>"},{"type":"text","value":":"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"src/schema.js"}]}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TripUpdateResponse</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">success</span><span class=\"token punctuation\">:</span> Boolean<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">message</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">launches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Launch<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Our mutation response type contains a success status, a corresponding message, and the launch that we updated. It's always good practice to return the data that you're updating in order for the Warthog Client cache to update automatically."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"run-your-server"},"children":[{"type":"element","tagName":"a","properties":{"href":"#run-your-server","aria-label":"run your server permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Run your server"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now that we have scoped out our app's schema, let's run the server by calling "},{"type":"raw","value":"<code class=\"language-text\">server.listen()</code>"},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"src/index.js"}]}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ApolloServer <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'warthog-server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./schema'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> typeDefs <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">🚀 Server ready at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In your terminal, run "},{"type":"raw","value":"<code class=\"language-text\">npm start</code>"},{"type":"text","value":" to start your server! 🎉 Warthog Server will now be available on port 4000."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"explore-your-schema"},"children":[{"type":"element","tagName":"a","properties":{"href":"#explore-your-schema","aria-label":"explore your schema permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Explore your schema"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"By default, Warthog Server supports "},{"type":"element","tagName":"a","properties":{"href":"https://www.warthog.dev/docs/warthog-server/features/graphql-playground/"},"children":[{"type":"text","value":"GraphQL Playground"}]},{"type":"text","value":". The Playground is an interactive, in-browser GraphQL IDE for exploring your schema and testing your queries. Warthog Server automatically serves GraphQL Playground in development only."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The GraphQL Playground provides the ability to introspect your schema. "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Introspection"}]},{"type":"text","value":" is a technique used to provide detailed information about a graph's schema. To see this in action, check out the right hand side of GraphQL Playground and click on the "},{"type":"raw","value":"<code class=\"language-text\">schema</code>"},{"type":"text","value":" button."}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div style=\"text-align:center\">\n  <img src=\"/schematab-0774a4e5a5b324097895abb779c540ab.png\" alt=\"Schema button\">\n</div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can quickly have access to the documentation of a GraphQL API via the "},{"type":"raw","value":"<code class=\"language-text\">schema</code>"},{"type":"text","value":" button."}]},{"type":"text","value":"\n"},{"type":"raw","value":"<div style=\"text-align:center\">\n  <img src=\"/moredetailsonatype-b893f681b5b3bbcaf3ad9355bad8def6.png\" alt=\"More details on a Schema Type\">\n</div>"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"That's all for building our schema. Let's move on to the next part of our tutorial."}]}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":194,"column":1,"offset":8313}}}}