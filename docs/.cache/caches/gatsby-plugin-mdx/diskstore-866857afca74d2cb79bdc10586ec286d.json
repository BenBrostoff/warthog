{"expireTime":9007200819376318000,"key":"gatsby-plugin-mdx-entire-payload-f4edad2cf80710d2a7aba17325b092d7-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import ProjectConfigPanel from 'gatsby-theme-apollo-docs/mdx/project-config-panel.mdx';","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":88,"offset":88},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Warthog includes a schema registry that serves as a ","position":{"start":{"line":4,"column":1,"offset":90},"end":{"line":4,"column":53,"offset":142},"indent":[]}},{"type":"link","title":null,"url":"https://principledgraphql.com/integrity#3-track-the-schema-in-a-registry","children":[{"type":"text","value":"central hub","position":{"start":{"line":4,"column":54,"offset":143},"end":{"line":4,"column":65,"offset":154},"indent":[]}}],"position":{"start":{"line":4,"column":53,"offset":142},"end":{"line":4,"column":140,"offset":229},"indent":[]}},{"type":"text","value":" for tracking your GraphQL schema. Adopting a shared schema registry for your project has many benefits:","position":{"start":{"line":4,"column":140,"offset":229},"end":{"line":4,"column":244,"offset":333},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":90},"end":{"line":4,"column":244,"offset":333},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Unlike introspection, which provides a snapshot of a particular server's current schema, the registry serves as a global source of truth for the schema. In small projects this frees you from always needing a running server to access the schema. At scale, it avoids issues related to running multiple servers that may not always be in sync (eg, rolling updates).","position":{"start":{"line":6,"column":3,"offset":337},"end":{"line":6,"column":364,"offset":698},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":337},"end":{"line":6,"column":364,"offset":698},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":335},"end":{"line":6,"column":364,"offset":698},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Much like a source control system, Warthog's schema registry tracks a full history of a schema and how it changed over time. This is valuable for understanding and collaborating on a GraphQL API, especially as your team grows.","position":{"start":{"line":7,"column":3,"offset":701},"end":{"line":7,"column":229,"offset":927},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":701},"end":{"line":7,"column":229,"offset":927},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":699},"end":{"line":7,"column":229,"offset":927},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Having a registry allows you to disable introspection in production – a recommended best practice for good security.","position":{"start":{"line":8,"column":3,"offset":930},"end":{"line":8,"column":119,"offset":1046},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":930},"end":{"line":8,"column":119,"offset":1046},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":928},"end":{"line":8,"column":119,"offset":1046},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Tools like the ","position":{"start":{"line":9,"column":3,"offset":1049},"end":{"line":9,"column":18,"offset":1064},"indent":[]}},{"type":"link","title":null,"url":"https://marketplace.visualstudio.com/items?itemName=goldcaddy77.vscode-warthog","children":[{"type":"text","value":"Warthog VS Code extension","position":{"start":{"line":9,"column":19,"offset":1065},"end":{"line":9,"column":44,"offset":1090},"indent":[]}}],"position":{"start":{"line":9,"column":18,"offset":1064},"end":{"line":9,"column":125,"offset":1171},"indent":[]}},{"type":"text","value":" can automatically fetch your schema from the registry and provide intellisense like field descriptions and deprecations directly in your editor.","position":{"start":{"line":9,"column":125,"offset":1171},"end":{"line":9,"column":270,"offset":1316},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":1049},"end":{"line":9,"column":270,"offset":1316},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":1047},"end":{"line":9,"column":270,"offset":1316},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Warthog's registry lets you track related ","position":{"start":{"line":10,"column":3,"offset":1319},"end":{"line":10,"column":45,"offset":1361},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"variants","position":{"start":{"line":10,"column":46,"offset":1362},"end":{"line":10,"column":54,"offset":1370},"indent":[]}}],"position":{"start":{"line":10,"column":45,"offset":1361},"end":{"line":10,"column":55,"offset":1371},"indent":[]}},{"type":"text","value":" of a schema, like staging or alpha versions. It's helpful to have these schema definitions handy without having to juggle running servers that implement them.","position":{"start":{"line":10,"column":55,"offset":1371},"end":{"line":10,"column":214,"offset":1530},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":1319},"end":{"line":10,"column":214,"offset":1530},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":1317},"end":{"line":10,"column":214,"offset":1530},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":335},"end":{"line":10,"column":214,"offset":1530},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Using the Schema Registry","position":{"start":{"line":12,"column":4,"offset":1535},"end":{"line":12,"column":29,"offset":1560},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":1532},"end":{"line":12,"column":29,"offset":1560},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To get started using the schema registry, you'll need to make sure your repository is configured to be an Warthog project.","position":{"start":{"line":14,"column":1,"offset":1562},"end":{"line":14,"column":123,"offset":1684},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1562},"end":{"line":14,"column":123,"offset":1684},"indent":[]}},{"type":"jsx","value":"<ProjectConfigPanel />","position":{"start":{"line":16,"column":1,"offset":1686},"end":{"line":16,"column":23,"offset":1708},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"CLI commands","position":{"start":{"line":18,"column":6,"offset":1715},"end":{"line":18,"column":18,"offset":1727},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1710},"end":{"line":18,"column":18,"offset":1727},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once you have that set up, you'll be ready to start connecting to the schema regsitry using the CLI:","position":{"start":{"line":20,"column":1,"offset":1729},"end":{"line":20,"column":101,"offset":1829},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1729},"end":{"line":20,"column":101,"offset":1829},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"warthog service:push","position":{"start":{"line":22,"column":3,"offset":1833},"end":{"line":22,"column":25,"offset":1855},"indent":[]}},{"type":"text","value":"—","position":{"start":{"line":22,"column":25,"offset":1855},"end":{"line":22,"column":32,"offset":1862},"indent":[]}},{"type":"text","value":" push a new schema to the registry.","position":{"start":{"line":22,"column":32,"offset":1862},"end":{"line":22,"column":67,"offset":1897},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":1833},"end":{"line":22,"column":67,"offset":1897},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1831},"end":{"line":22,"column":67,"offset":1897},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"warthog service:check","position":{"start":{"line":23,"column":3,"offset":1900},"end":{"line":23,"column":26,"offset":1923},"indent":[]}},{"type":"text","value":"—","position":{"start":{"line":23,"column":26,"offset":1923},"end":{"line":23,"column":33,"offset":1930},"indent":[]}},{"type":"text","value":" calculate a local schema diff and compare the changes against live traffic to validate if the changes are ","position":{"start":{"line":23,"column":33,"offset":1930},"end":{"line":23,"column":140,"offset":2037},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"safe","position":{"start":{"line":23,"column":141,"offset":2038},"end":{"line":23,"column":145,"offset":2042},"indent":[]}}],"position":{"start":{"line":23,"column":140,"offset":2037},"end":{"line":23,"column":146,"offset":2043},"indent":[]}},{"type":"text","value":" or if they will ","position":{"start":{"line":23,"column":146,"offset":2043},"end":{"line":23,"column":163,"offset":2060},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"break","position":{"start":{"line":23,"column":164,"offset":2061},"end":{"line":23,"column":169,"offset":2066},"indent":[]}}],"position":{"start":{"line":23,"column":163,"offset":2060},"end":{"line":23,"column":170,"offset":2067},"indent":[]}},{"type":"text","value":" live running queries.","position":{"start":{"line":23,"column":170,"offset":2067},"end":{"line":23,"column":192,"offset":2089},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":1900},"end":{"line":23,"column":192,"offset":2089},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1898},"end":{"line":23,"column":192,"offset":2089},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1831},"end":{"line":23,"column":192,"offset":2089},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Registering a schema","position":{"start":{"line":25,"column":4,"offset":2094},"end":{"line":25,"column":24,"offset":2114},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":2091},"end":{"line":25,"column":24,"offset":2114},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"New versions of your schema are registered to Warthog by running the ","position":{"start":{"line":27,"column":1,"offset":2116},"end":{"line":27,"column":70,"offset":2185},"indent":[]}},{"type":"inlineCode","value":"warthog service:push","position":{"start":{"line":27,"column":70,"offset":2185},"end":{"line":27,"column":92,"offset":2207},"indent":[]}},{"type":"text","value":" command from within your repository.","position":{"start":{"line":27,"column":92,"offset":2207},"end":{"line":27,"column":129,"offset":2244},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":2116},"end":{"line":27,"column":129,"offset":2244},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The CLI will know where to fetch your local schema from based on your ","position":{"start":{"line":29,"column":1,"offset":2246},"end":{"line":29,"column":71,"offset":2316},"indent":[]}},{"type":"inlineCode","value":"warthog.config.js","position":{"start":{"line":29,"column":71,"offset":2316},"end":{"line":29,"column":90,"offset":2335},"indent":[]}},{"type":"text","value":" configuration. Every time you push a new version of your schema it will be logged to your graph's schema history.","position":{"start":{"line":29,"column":90,"offset":2335},"end":{"line":29,"column":204,"offset":2449},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":2246},"end":{"line":29,"column":204,"offset":2449},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here's what running ","position":{"start":{"line":31,"column":1,"offset":2451},"end":{"line":31,"column":21,"offset":2471},"indent":[]}},{"type":"inlineCode","value":"warthog service:push","position":{"start":{"line":31,"column":21,"offset":2471},"end":{"line":31,"column":43,"offset":2493},"indent":[]}},{"type":"text","value":" will look like:","position":{"start":{"line":31,"column":43,"offset":2493},"end":{"line":31,"column":59,"offset":2509},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":2451},"end":{"line":31,"column":59,"offset":2509},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"~$ warthog service:push\n  ✔ Loading Warthog Project\n  ✔ Uploading service to Engine\n\nid      schema        tag\n──────  ────────────  ───────\n190330  example-4218  current","position":{"start":{"line":33,"column":1,"offset":2511},"end":{"line":41,"column":4,"offset":2689},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Hooking into CI","position":{"start":{"line":43,"column":5,"offset":2695},"end":{"line":43,"column":20,"offset":2710},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":2691},"end":{"line":43,"column":20,"offset":2710},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To get the full value out of Warthog, your graph's schema history should be as accurately represented in the registry as possible. We ","position":{"start":{"line":45,"column":1,"offset":2712},"end":{"line":45,"column":135,"offset":2846},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"highly recommend","position":{"start":{"line":45,"column":136,"offset":2847},"end":{"line":45,"column":152,"offset":2863},"indent":[]}}],"position":{"start":{"line":45,"column":135,"offset":2846},"end":{"line":45,"column":153,"offset":2864},"indent":[]}},{"type":"text","value":" hooking ","position":{"start":{"line":45,"column":153,"offset":2864},"end":{"line":45,"column":162,"offset":2873},"indent":[]}},{"type":"inlineCode","value":"warthog service:push","position":{"start":{"line":45,"column":162,"offset":2873},"end":{"line":45,"column":184,"offset":2895},"indent":[]}},{"type":"text","value":" into your repository's continuous delivery pipeline so your schema is updated in the registry on every deploy. This will ensure that you always get intellisense for your live-running schema in your VS Code extension, for example.","position":{"start":{"line":45,"column":184,"offset":2895},"end":{"line":45,"column":414,"offset":3125},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":2712},"end":{"line":45,"column":414,"offset":3125},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is a sample continuous delivery configuration for pushing a schema to Warthog using CircleCI:","position":{"start":{"line":47,"column":1,"offset":3127},"end":{"line":47,"column":99,"offset":3225},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":3127},"end":{"line":47,"column":99,"offset":3225},"indent":[]}},{"type":"code","lang":"yaml{13,29-31}","meta":null,"value":"version: 2\n\njobs:\n  build:\n    docker:\n      - image: circleci/node:8\n\n    steps:\n      - checkout\n\n      - run: npm install\n      # CircleCI needs global installs to be sudo\n      - run: sudo npm install --global warthog\n\n      # Start the GraphQL server.  If a different command is used to\n      # start the server, use it in place of `npm start` here.\n      - run:\n          name: Starting server\n          command: npm start\n          background: true\n\n      # make sure the server has enough time to start up before running\n      # commands against it\n      - run: sleep 5\n\n      # When running on the 'master' branch, push the latest version\n      # of the schema to Warthog Engine.\n      - run: |\n          if [ \"${CIRCLE_BRANCH}\" == \"master\" ]; then\n            warthog service:push --tag=master\n          fi","position":{"start":{"line":49,"column":1,"offset":3227},"end":{"line":81,"column":4,"offset":4065},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Viewing schema change history","position":{"start":{"line":83,"column":4,"offset":4070},"end":{"line":83,"column":33,"offset":4099},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":4067},"end":{"line":83,"column":33,"offset":4099},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Changes made to your graph's schema over time can be viewed in ","position":{"start":{"line":85,"column":1,"offset":4101},"end":{"line":85,"column":64,"offset":4164},"indent":[]}},{"type":"link","title":null,"url":"https://engine.warthog.dev","children":[{"type":"text","value":"Engine","position":{"start":{"line":85,"column":65,"offset":4165},"end":{"line":85,"column":71,"offset":4171},"indent":[]}}],"position":{"start":{"line":85,"column":64,"offset":4164},"end":{"line":85,"column":100,"offset":4200},"indent":[]}},{"type":"text","value":" by browsing to the History page for your graph. Each time you push a new version of your schema, it will appear in your graph's history along with a list of the changes introduced in that version.","position":{"start":{"line":85,"column":100,"offset":4200},"end":{"line":85,"column":297,"offset":4397},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":4101},"end":{"line":85,"column":297,"offset":4397},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"../images/schema-history.png","alt":"Schema history page in the Engine UI","position":{"start":{"line":87,"column":1,"offset":4399},"end":{"line":87,"column":70,"offset":4468},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":4399},"end":{"line":87,"column":70,"offset":4468},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Managing environments","position":{"start":{"line":89,"column":4,"offset":4473},"end":{"line":89,"column":25,"offset":4494},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":4470},"end":{"line":89,"column":25,"offset":4494},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Product cycles move fast and it's common for schemas to be slightly different across environments as changes make their way through your system. To support this, schemas pushed to the registry can be associated with specific ","position":{"start":{"line":91,"column":1,"offset":4496},"end":{"line":91,"column":226,"offset":4721},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"variants","position":{"start":{"line":91,"column":227,"offset":4722},"end":{"line":91,"column":235,"offset":4730},"indent":[]}}],"position":{"start":{"line":91,"column":226,"offset":4721},"end":{"line":91,"column":236,"offset":4731},"indent":[]}},{"type":"text","value":" of your graph (also referred to ","position":{"start":{"line":91,"column":236,"offset":4731},"end":{"line":91,"column":269,"offset":4764},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"tags","position":{"start":{"line":91,"column":270,"offset":4765},"end":{"line":91,"column":274,"offset":4769},"indent":[]}}],"position":{"start":{"line":91,"column":269,"offset":4764},"end":{"line":91,"column":275,"offset":4770},"indent":[]}},{"type":"text","value":").","position":{"start":{"line":91,"column":275,"offset":4770},"end":{"line":91,"column":277,"offset":4772},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":4496},"end":{"line":91,"column":277,"offset":4772},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Warthog supports tracking multiple ","position":{"start":{"line":93,"column":1,"offset":4774},"end":{"line":93,"column":36,"offset":4809},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"variants","position":{"start":{"line":93,"column":37,"offset":4810},"end":{"line":93,"column":45,"offset":4818},"indent":[]}}],"position":{"start":{"line":93,"column":36,"offset":4809},"end":{"line":93,"column":46,"offset":4819},"indent":[]}},{"type":"text","value":" for every graph. A variant is just like a regular data graph. It has its own history of schemas, its own metadata store of metrics, and its own operation registry. Variants can be used to track ideas like staging environments, canaries, and deploys of experimental features destined for the production graph.","position":{"start":{"line":93,"column":46,"offset":4819},"end":{"line":93,"column":355,"offset":5128},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":4774},"end":{"line":93,"column":355,"offset":5128},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To get fully set up associating data sent to Warthog with ","position":{"start":{"line":95,"column":1,"offset":5130},"end":{"line":95,"column":59,"offset":5188},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"variant","position":{"start":{"line":95,"column":60,"offset":5189},"end":{"line":95,"column":67,"offset":5196},"indent":[]}}],"position":{"start":{"line":95,"column":59,"offset":5188},"end":{"line":95,"column":68,"offset":5197},"indent":[]}},{"type":"text","value":" information, you'll need to ","position":{"start":{"line":95,"column":68,"offset":5197},"end":{"line":95,"column":97,"offset":5226},"indent":[]}},{"type":"link","title":null,"url":"#registering-schemas-to-a-variant","children":[{"type":"text","value":"configure your CLI commands","position":{"start":{"line":95,"column":98,"offset":5227},"end":{"line":95,"column":125,"offset":5254},"indent":[]}}],"position":{"start":{"line":95,"column":97,"offset":5226},"end":{"line":95,"column":161,"offset":5290},"indent":[]}},{"type":"text","value":" to send data with a ","position":{"start":{"line":95,"column":161,"offset":5290},"end":{"line":95,"column":182,"offset":5311},"indent":[]}},{"type":"inlineCode","value":"--tag","position":{"start":{"line":95,"column":182,"offset":5311},"end":{"line":95,"column":189,"offset":5318},"indent":[]}},{"type":"text","value":" flag and ","position":{"start":{"line":95,"column":189,"offset":5318},"end":{"line":95,"column":199,"offset":5328},"indent":[]}},{"type":"link","title":null,"url":"#associating-metrics-with-a-variant","children":[{"type":"text","value":"configure your Warthog Server","position":{"start":{"line":95,"column":200,"offset":5329},"end":{"line":95,"column":229,"offset":5358},"indent":[]}}],"position":{"start":{"line":95,"column":199,"offset":5328},"end":{"line":95,"column":267,"offset":5396},"indent":[]}},{"type":"text","value":" with a ","position":{"start":{"line":95,"column":267,"offset":5396},"end":{"line":95,"column":275,"offset":5404},"indent":[]}},{"type":"inlineCode","value":"schemaTag","position":{"start":{"line":95,"column":275,"offset":5404},"end":{"line":95,"column":286,"offset":5415},"indent":[]}},{"type":"text","value":" option.","position":{"start":{"line":95,"column":286,"offset":5415},"end":{"line":95,"column":294,"offset":5423},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":5130},"end":{"line":95,"column":294,"offset":5423},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Registering schemas to a variant","position":{"start":{"line":97,"column":5,"offset":5429},"end":{"line":97,"column":37,"offset":5461},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":5425},"end":{"line":97,"column":37,"offset":5461},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To register your schema to a specific ","position":{"start":{"line":99,"column":1,"offset":5463},"end":{"line":99,"column":39,"offset":5501},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"variant","position":{"start":{"line":99,"column":40,"offset":5502},"end":{"line":99,"column":47,"offset":5509},"indent":[]}}],"position":{"start":{"line":99,"column":39,"offset":5501},"end":{"line":99,"column":48,"offset":5510},"indent":[]}},{"type":"text","value":", simply add the ","position":{"start":{"line":99,"column":48,"offset":5510},"end":{"line":99,"column":65,"offset":5527},"indent":[]}},{"type":"inlineCode","value":"--tag=<VARIANT>","position":{"start":{"line":99,"column":65,"offset":5527},"end":{"line":99,"column":82,"offset":5544},"indent":[]}},{"type":"text","value":" flag to your push command:","position":{"start":{"line":99,"column":82,"offset":5544},"end":{"line":99,"column":109,"offset":5571},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":5463},"end":{"line":99,"column":109,"offset":5571},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"warthog service:push --tag=beta","position":{"start":{"line":101,"column":1,"offset":5573},"end":{"line":103,"column":4,"offset":5616},"indent":[1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":105,"column":5,"offset":5622},"end":{"line":105,"column":10,"offset":5627},"indent":[]}}],"position":{"start":{"line":105,"column":3,"offset":5620},"end":{"line":105,"column":12,"offset":5629},"indent":[]}},{"type":"text","value":" All schema pushes without a specified tag are registered under the default graph variant, ","position":{"start":{"line":105,"column":12,"offset":5629},"end":{"line":105,"column":103,"offset":5720},"indent":[]}},{"type":"inlineCode","value":"current","position":{"start":{"line":105,"column":103,"offset":5720},"end":{"line":105,"column":112,"offset":5729},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":105,"column":112,"offset":5729},"end":{"line":105,"column":113,"offset":5730},"indent":[]}}],"position":{"start":{"line":105,"column":3,"offset":5620},"end":{"line":105,"column":113,"offset":5730},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":5618},"end":{"line":105,"column":113,"offset":5730},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Associating metrics with a variant","position":{"start":{"line":107,"column":5,"offset":5736},"end":{"line":107,"column":39,"offset":5770},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":5732},"end":{"line":107,"column":39,"offset":5770},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There are a few ways to associate metrics reported to ","position":{"start":{"line":109,"column":1,"offset":5772},"end":{"line":109,"column":55,"offset":5826},"indent":[]}},{"type":"link","title":null,"url":"https://engine.warthog.dev","children":[{"type":"text","value":"Engine","position":{"start":{"line":109,"column":56,"offset":5827},"end":{"line":109,"column":62,"offset":5833},"indent":[]}}],"position":{"start":{"line":109,"column":55,"offset":5826},"end":{"line":109,"column":91,"offset":5862},"indent":[]}},{"type":"text","value":" with a specific variant:","position":{"start":{"line":109,"column":91,"offset":5862},"end":{"line":109,"column":116,"offset":5887},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":5772},"end":{"line":109,"column":116,"offset":5887},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The best way to associate metrics with a variant of your graph is to start your server with an environment variable named ","position":{"start":{"line":111,"column":4,"offset":5892},"end":{"line":111,"column":126,"offset":6014},"indent":[]}},{"type":"inlineCode","value":"ENGINE_SCHEMA_TAG","position":{"start":{"line":111,"column":126,"offset":6014},"end":{"line":111,"column":145,"offset":6033},"indent":[]}},{"type":"text","value":" that contains the name of your variant. This will link metrics sent to Engine with the value of that environment variable.","position":{"start":{"line":111,"column":145,"offset":6033},"end":{"line":111,"column":268,"offset":6156},"indent":[]}}],"position":{"start":{"line":111,"column":4,"offset":5892},"end":{"line":111,"column":268,"offset":6156},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":5889},"end":{"line":111,"column":268,"offset":6156},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Alternatively, add the ","position":{"start":{"line":112,"column":4,"offset":6160},"end":{"line":112,"column":27,"offset":6183},"indent":[]}},{"type":"inlineCode","value":"schemaTag","position":{"start":{"line":112,"column":27,"offset":6183},"end":{"line":112,"column":38,"offset":6194},"indent":[]}},{"type":"text","value":" option to your Warthog Server configuration (works for Warthog Server 2.2+):","position":{"start":{"line":112,"column":38,"offset":6194},"end":{"line":112,"column":115,"offset":6271},"indent":[]}}],"position":{"start":{"line":112,"column":4,"offset":6160},"end":{"line":112,"column":115,"offset":6271},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":6157},"end":{"line":112,"column":115,"offset":6271},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":5889},"end":{"line":112,"column":115,"offset":6271},"indent":[1]}},{"type":"code","lang":"js","meta":null,"value":"const server = new ApolloServer({\n  ...\n  engine: {\n    apiKey: \"<ENGINE_API_KEY>\",\n    schemaTag: \"beta\" // highlight-line\n  }\n});","position":{"start":{"line":114,"column":1,"offset":6273},"end":{"line":122,"column":4,"offset":6414},"indent":[1,1,1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":124,"column":5,"offset":6420},"end":{"line":124,"column":10,"offset":6425},"indent":[]}}],"position":{"start":{"line":124,"column":3,"offset":6418},"end":{"line":124,"column":12,"offset":6427},"indent":[]}},{"type":"text","value":" It's important that metrics are associated with the same tag as ","position":{"start":{"line":124,"column":12,"offset":6427},"end":{"line":124,"column":77,"offset":6492},"indent":[]}},{"type":"inlineCode","value":"service:push","position":{"start":{"line":124,"column":77,"offset":6492},"end":{"line":124,"column":91,"offset":6506},"indent":[]}},{"type":"text","value":" if you want to track isolated data across different variants like production and staging.","position":{"start":{"line":124,"column":91,"offset":6506},"end":{"line":124,"column":181,"offset":6596},"indent":[]}}],"position":{"start":{"line":124,"column":3,"offset":6418},"end":{"line":124,"column":181,"offset":6596},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":6416},"end":{"line":124,"column":181,"offset":6596},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Tools that use the schema registry","position":{"start":{"line":126,"column":4,"offset":6601},"end":{"line":126,"column":38,"offset":6635},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":6598},"end":{"line":126,"column":38,"offset":6635},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Keeping your schema up-to-date in Warthog's registry will ensure that you get the best experience from Warthog's tools that connect to the registry:","position":{"start":{"line":128,"column":1,"offset":6637},"end":{"line":128,"column":149,"offset":6785},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":6637},"end":{"line":128,"column":149,"offset":6785},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":130,"column":3,"offset":6789},"end":{"line":130,"column":7,"offset":6793},"indent":[]}},{"type":"link","title":null,"url":"https://marketplace.visualstudio.com/items?itemName=goldcaddy77.vscode-warthog","children":[{"type":"text","value":"Warthog VS Code extension","position":{"start":{"line":130,"column":8,"offset":6794},"end":{"line":130,"column":33,"offset":6819},"indent":[]}}],"position":{"start":{"line":130,"column":7,"offset":6793},"end":{"line":130,"column":114,"offset":6900},"indent":[]}},{"type":"text","value":" provides built-in linting on queries by validating against the schema in your registry. It also annotates fields with their descriptions and with performance indicators collected in Warthog's trace warehouse.","position":{"start":{"line":130,"column":114,"offset":6900},"end":{"line":130,"column":323,"offset":7109},"indent":[]}}],"position":{"start":{"line":130,"column":3,"offset":6789},"end":{"line":130,"column":323,"offset":7109},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":6787},"end":{"line":130,"column":323,"offset":7109},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":131,"column":3,"offset":7112},"end":{"line":131,"column":7,"offset":7116},"indent":[]}},{"type":"link","title":null,"url":"/platform/schema-validation/","children":[{"type":"text","value":"schema validation","position":{"start":{"line":131,"column":8,"offset":7117},"end":{"line":131,"column":25,"offset":7134},"indent":[]}}],"position":{"start":{"line":131,"column":7,"offset":7116},"end":{"line":131,"column":56,"offset":7165},"indent":[]}},{"type":"text","value":" workflow protects your team from accidentally making breaking schema changes. It creates a diff between your local schema and the last schema pushed to the registry, and validates this diff against live traffic seen on your endpoint to warn you about problematic changes.","position":{"start":{"line":131,"column":56,"offset":7165},"end":{"line":131,"column":328,"offset":7437},"indent":[]}}],"position":{"start":{"line":131,"column":3,"offset":7112},"end":{"line":131,"column":328,"offset":7437},"indent":[]}}],"position":{"start":{"line":131,"column":1,"offset":7110},"end":{"line":131,"column":328,"offset":7437},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Your schema's full history and current usage can be seen in ","position":{"start":{"line":132,"column":3,"offset":7440},"end":{"line":132,"column":63,"offset":7500},"indent":[]}},{"type":"link","title":null,"url":"https://engine.warthog.dev","children":[{"type":"text","value":"Warthog Engine","position":{"start":{"line":132,"column":64,"offset":7501},"end":{"line":132,"column":78,"offset":7515},"indent":[]}}],"position":{"start":{"line":132,"column":63,"offset":7500},"end":{"line":132,"column":107,"offset":7544},"indent":[]}},{"type":"text","value":". The History page tracks changes made over time, and the Explorer page shows which clients and which queries are using each field in your schema.","position":{"start":{"line":132,"column":107,"offset":7544},"end":{"line":132,"column":253,"offset":7690},"indent":[]}}],"position":{"start":{"line":132,"column":3,"offset":7440},"end":{"line":132,"column":253,"offset":7690},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":7438},"end":{"line":132,"column":253,"offset":7690},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":6787},"end":{"line":132,"column":253,"offset":7690},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Tracking your GraphQL schema\",\"description\":\"A central hub for your GraphQL API\"}","position":{"start":{"line":135,"column":1,"offset":7693},"end":{"line":135,"column":120,"offset":7812},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":135,"column":120,"offset":7812}}},"scopeImports":["import ProjectConfigPanel from 'gatsby-theme-apollo-docs/mdx/project-config-panel.mdx';","import React from 'react'"],"scopeIdentifiers":["ProjectConfigPanel","React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Tracking your GraphQL schema\",\n  \"description\": \"A central hub for your GraphQL API\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Warthog includes a schema registry that serves as a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://principledgraphql.com/integrity#3-track-the-schema-in-a-registry\"\n  }), \"central hub\"), \" for tracking your GraphQL schema. Adopting a shared schema registry for your project has many benefits:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Unlike introspection, which provides a snapshot of a particular server's current schema, the registry serves as a global source of truth for the schema. In small projects this frees you from always needing a running server to access the schema. At scale, it avoids issues related to running multiple servers that may not always be in sync (eg, rolling updates).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Much like a source control system, Warthog's schema registry tracks a full history of a schema and how it changed over time. This is valuable for understanding and collaborating on a GraphQL API, especially as your team grows.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Having a registry allows you to disable introspection in production \\u2013 a recommended best practice for good security.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tools like the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://marketplace.visualstudio.com/items?itemName=goldcaddy77.vscode-warthog\"\n  }), \"Warthog VS Code extension\"), \" can automatically fetch your schema from the registry and provide intellisense like field descriptions and deprecations directly in your editor.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Warthog's registry lets you track related \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"variants\"), \" of a schema, like staging or alpha versions. It's helpful to have these schema definitions handy without having to juggle running servers that implement them.\")), mdx(\"h2\", {\n    \"id\": \"using-the-schema-registry\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#using-the-schema-registry\",\n    \"aria-label\": \"using the schema registry permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Using the Schema Registry\"), mdx(\"p\", null, \"To get started using the schema registry, you'll need to make sure your repository is configured to be an Warthog project.\"), mdx(ProjectConfigPanel, {\n    mdxType: \"ProjectConfigPanel\"\n  }), mdx(\"h4\", {\n    \"id\": \"cli-commands\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#cli-commands\",\n    \"aria-label\": \"cli commands permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"CLI commands\"), mdx(\"p\", null, \"Once you have that set up, you'll be ready to start connecting to the schema regsitry using the CLI:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:push\"), \"\\u2014\", \" push a new schema to the registry.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:check\"), \"\\u2014\", \" calculate a local schema diff and compare the changes against live traffic to validate if the changes are \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"safe\"), \" or if they will \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"break\"), \" live running queries.\")), mdx(\"h2\", {\n    \"id\": \"registering-a-schema\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#registering-a-schema\",\n    \"aria-label\": \"registering a schema permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Registering a schema\"), mdx(\"p\", null, \"New versions of your schema are registered to Warthog by running the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:push\"), \" command from within your repository.\"), mdx(\"p\", null, \"The CLI will know where to fetch your local schema from based on your \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog.config.js\"), \" configuration. Every time you push a new version of your schema it will be logged to your graph's schema history.\"), mdx(\"p\", null, \"Here's what running \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:push\"), \" will look like:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-text line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"~$ warthog service:push\\n  \\u2714 Loading Warthog Project\\n  \\u2714 Uploading service to Engine\\n\\nid      schema        tag\\n\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n190330  example-4218  current\"), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"h3\", {\n    \"id\": \"hooking-into-ci\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#hooking-into-ci\",\n    \"aria-label\": \"hooking into ci permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Hooking into CI\"), mdx(\"p\", null, \"To get the full value out of Warthog, your graph's schema history should be as accurately represented in the registry as possible. We \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"highly recommend\"), \" hooking \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:push\"), \" into your repository's continuous delivery pipeline so your schema is updated in the registry on every deploy. This will ensure that you always get intellisense for your live-running schema in your VS Code extension, for example.\"), mdx(\"p\", null, \"Here is a sample continuous delivery configuration for pushing a schema to Warthog using CircleCI:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight has-highlighted-lines\",\n    \"data-language\": \"yaml\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-yaml line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"version\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"2\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"jobs\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"build\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"docker\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"image\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" circleci/node\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"8\"), \"\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"steps\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"-\"), \" checkout\\n\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"run\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" npm install\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"# CircleCI needs global installs to be sudo\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"gatsby-highlight-code-line\"\n  }), \"      \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"run\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" sudo npm install \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"-\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"-\"), \"global warthog\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"# Start the GraphQL server.  If a different command is used to\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"# start the server, use it in place of `npm start` here.\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"run\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"name\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" Starting server\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"command\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" npm start\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"background\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token boolean important\"\n  }), \"true\"), \"\\n\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"# make sure the server has enough time to start up before running\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"# commands against it\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"run\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" sleep 5\\n\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"# When running on the 'master' branch, push the latest version\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"# of the schema to Warthog Engine.\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"run\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"|\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token scalar string\"\n  }), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-highlight-code-line\"\n  }), \"          if [ \\\"${CIRCLE_BRANCH}\\\" == \\\"master\\\" ]; then\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-highlight-code-line\"\n  }), \"            warthog service:push --tag=master\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-highlight-code-line\"\n  }), \"          fi\"))), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"h2\", {\n    \"id\": \"viewing-schema-change-history\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#viewing-schema-change-history\",\n    \"aria-label\": \"viewing schema change history permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Viewing schema change history\"), mdx(\"p\", null, \"Changes made to your graph's schema over time can be viewed in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://engine.warthog.dev\"\n  }), \"Engine\"), \" by browsing to the History page for your graph. Each time you push a new version of your schema, it will appear in your graph's history along with a list of the changes introduced in that version.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/schema-history-63f8a91c30b6687ede7b5ae61b759e82.png\",\n    \"alt\": \"Schema history page in the Engine UI\"\n  }))), mdx(\"h2\", {\n    \"id\": \"managing-environments\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#managing-environments\",\n    \"aria-label\": \"managing environments permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Managing environments\"), mdx(\"p\", null, \"Product cycles move fast and it's common for schemas to be slightly different across environments as changes make their way through your system. To support this, schemas pushed to the registry can be associated with specific \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"variants\"), \" of your graph (also referred to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"tags\"), \").\"), mdx(\"p\", null, \"Warthog supports tracking multiple \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"variants\"), \" for every graph. A variant is just like a regular data graph. It has its own history of schemas, its own metadata store of metrics, and its own operation registry. Variants can be used to track ideas like staging environments, canaries, and deploys of experimental features destined for the production graph.\"), mdx(\"p\", null, \"To get fully set up associating data sent to Warthog with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"variant\"), \" information, you'll need to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#registering-schemas-to-a-variant\"\n  }), \"configure your CLI commands\"), \" to send data with a \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"--tag\"), \" flag and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#associating-metrics-with-a-variant\"\n  }), \"configure your Warthog Server\"), \" with a \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"schemaTag\"), \" option.\"), mdx(\"h3\", {\n    \"id\": \"registering-schemas-to-a-variant\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#registering-schemas-to-a-variant\",\n    \"aria-label\": \"registering schemas to a variant permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Registering schemas to a variant\"), mdx(\"p\", null, \"To register your schema to a specific \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"variant\"), \", simply add the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"--tag=<VARIANT>\"), \" flag to your push command:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-bash line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"warthog service:push --tag\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \"beta\"), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" All schema pushes without a specified tag are registered under the default graph variant, \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"current\"), \".\")), mdx(\"h3\", {\n    \"id\": \"associating-metrics-with-a-variant\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#associating-metrics-with-a-variant\",\n    \"aria-label\": \"associating metrics with a variant permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Associating metrics with a variant\"), mdx(\"p\", null, \"There are a few ways to associate metrics reported to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://engine.warthog.dev\"\n  }), \"Engine\"), \" with a specific variant:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The best way to associate metrics with a variant of your graph is to start your server with an environment variable named \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"ENGINE_SCHEMA_TAG\"), \" that contains the name of your variant. This will link metrics sent to Engine with the value of that environment variable.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Alternatively, add the \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"schemaTag\"), \" option to your Warthog Server configuration (works for Warthog Server 2.2+):\")), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"js\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-js line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"const\"), \" server \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"new\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"ApolloServer\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"...\"), \"\\n  engine\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n    apiKey\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"\\\"<ENGINE_API_KEY>\\\"\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"gatsby-highlight-code-line\"\n  }), \"    schemaTag\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token string\"\n  }), \"\\\"beta\\\"\")), \"  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\")), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" It's important that metrics are associated with the same tag as \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"service:push\"), \" if you want to track isolated data across different variants like production and staging.\")), mdx(\"h2\", {\n    \"id\": \"tools-that-use-the-schema-registry\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#tools-that-use-the-schema-registry\",\n    \"aria-label\": \"tools that use the schema registry permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Tools that use the schema registry\"), mdx(\"p\", null, \"Keeping your schema up-to-date in Warthog's registry will ensure that you get the best experience from Warthog's tools that connect to the registry:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://marketplace.visualstudio.com/items?itemName=goldcaddy77.vscode-warthog\"\n  }), \"Warthog VS Code extension\"), \" provides built-in linting on queries by validating against the schema in your registry. It also annotates fields with their descriptions and with performance indicators collected in Warthog's trace warehouse.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/platform/schema-validation/\"\n  }), \"schema validation\"), \" workflow protects your team from accidentally making breaking schema changes. It creates a diff between your local schema and the last schema pushed to the registry, and validates this diff against live traffic seen on your endpoint to warn you about problematic changes.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Your schema's full history and current usage can be seen in \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://engine.warthog.dev\"\n  }), \"Warthog Engine\"), \". The History page tracks changes made over time, and the Explorer page shows which clients and which queries are using each field in your schema.\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport ProjectConfigPanel from 'gatsby-theme-apollo-docs/mdx/project-config-panel.mdx';\nexport const _frontmatter = {\"title\":\"Tracking your GraphQL schema\",\"description\":\"A central hub for your GraphQL API\"}\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p>{`Warthog includes a schema registry that serves as a `}<a parentName=\"p\" {...{\n        \"href\": \"https://principledgraphql.com/integrity#3-track-the-schema-in-a-registry\"\n      }}>{`central hub`}</a>{` for tracking your GraphQL schema. Adopting a shared schema registry for your project has many benefits:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Unlike introspection, which provides a snapshot of a particular server's current schema, the registry serves as a global source of truth for the schema. In small projects this frees you from always needing a running server to access the schema. At scale, it avoids issues related to running multiple servers that may not always be in sync (eg, rolling updates).`}</li>\n      <li parentName=\"ul\">{`Much like a source control system, Warthog's schema registry tracks a full history of a schema and how it changed over time. This is valuable for understanding and collaborating on a GraphQL API, especially as your team grows.`}</li>\n      <li parentName=\"ul\">{`Having a registry allows you to disable introspection in production – a recommended best practice for good security.`}</li>\n      <li parentName=\"ul\">{`Tools like the `}<a parentName=\"li\" {...{\n          \"href\": \"https://marketplace.visualstudio.com/items?itemName=goldcaddy77.vscode-warthog\"\n        }}>{`Warthog VS Code extension`}</a>{` can automatically fetch your schema from the registry and provide intellisense like field descriptions and deprecations directly in your editor.`}</li>\n      <li parentName=\"ul\">{`Warthog's registry lets you track related `}<em parentName=\"li\">{`variants`}</em>{` of a schema, like staging or alpha versions. It's helpful to have these schema definitions handy without having to juggle running servers that implement them.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"using-the-schema-registry\"\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#using-the-schema-registry\",\n        \"aria-label\": \"using the schema registry permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Using the Schema Registry`}</h2>\n    <p>{`To get started using the schema registry, you'll need to make sure your repository is configured to be an Warthog project.`}</p>\n    <ProjectConfigPanel mdxType=\"ProjectConfigPanel\" />\n    <h4 {...{\n      \"id\": \"cli-commands\"\n    }}><a parentName=\"h4\" {...{\n        \"href\": \"#cli-commands\",\n        \"aria-label\": \"cli commands permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`CLI commands`}</h4>\n    <p>{`Once you have that set up, you'll be ready to start connecting to the schema regsitry using the CLI:`}</p>\n    <ul>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`warthog service:push`}</code>{`—`}{` push a new schema to the registry.`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`warthog service:check`}</code>{`—`}{` calculate a local schema diff and compare the changes against live traffic to validate if the changes are `}<em parentName=\"li\">{`safe`}</em>{` or if they will `}<em parentName=\"li\">{`break`}</em>{` live running queries.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"registering-a-schema\"\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#registering-a-schema\",\n        \"aria-label\": \"registering a schema permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Registering a schema`}</h2>\n    <p>{`New versions of your schema are registered to Warthog by running the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:push`}</code>{` command from within your repository.`}</p>\n    <p>{`The CLI will know where to fetch your local schema from based on your `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog.config.js`}</code>{` configuration. Every time you push a new version of your schema it will be logged to your graph's schema history.`}</p>\n    <p>{`Here's what running `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:push`}</code>{` will look like:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"text\"\n    }}><pre parentName=\"div\" {...{\n        \"style\": {\n          \"counterReset\": \"linenumber NaN\"\n        },\n        \"className\": \"language-text line-numbers\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-text\"\n        }}>{`~$ warthog service:push\n  ✔ Loading Warthog Project\n  ✔ Uploading service to Engine\n\nid      schema        tag\n──────  ────────────  ───────\n190330  example-4218  current`}</code><span parentName=\"pre\" {...{\n          \"aria-hidden\": \"true\",\n          \"className\": \"line-numbers-rows\",\n          \"style\": {\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0\"\n          }\n        }}><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span></span></pre></div>\n    <h3 {...{\n      \"id\": \"hooking-into-ci\"\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#hooking-into-ci\",\n        \"aria-label\": \"hooking into ci permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Hooking into CI`}</h3>\n    <p>{`To get the full value out of Warthog, your graph's schema history should be as accurately represented in the registry as possible. We `}<em parentName=\"p\">{`highly recommend`}</em>{` hooking `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:push`}</code>{` into your repository's continuous delivery pipeline so your schema is updated in the registry on every deploy. This will ensure that you always get intellisense for your live-running schema in your VS Code extension, for example.`}</p>\n    <p>{`Here is a sample continuous delivery configuration for pushing a schema to Warthog using CircleCI:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight has-highlighted-lines\",\n      \"data-language\": \"yaml\"\n    }}><pre parentName=\"div\" {...{\n        \"style\": {\n          \"counterReset\": \"linenumber NaN\"\n        },\n        \"className\": \"language-yaml line-numbers\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-yaml\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`version`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`2`}</span>{`\n\n`}<span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`jobs`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`build`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`docker`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{`\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`-`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`image`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` circleci/node`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span><span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`8`}</span>{`\n\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`steps`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{`\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`-`}</span>{` checkout\n\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`-`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`run`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` npm install\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`# CircleCI needs global installs to be sudo`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"gatsby-highlight-code-line\"\n          }}>{`      `}<span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`-`}</span>{` `}<span parentName=\"span\" {...{\n              \"className\": \"token key atrule\"\n            }}>{`run`}</span><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`:`}</span>{` sudo npm install `}<span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`-`}</span><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`-`}</span>{`global warthog`}</span>{`\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`# Start the GraphQL server.  If a different command is used to`}</span>{`\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`# start the server, use it in place of \\`npm start\\` here.`}</span>{`\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`-`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`run`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{`\n          `}<span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`name`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` Starting server\n          `}<span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`command`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` npm start\n          `}<span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`background`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token boolean important\"\n          }}>{`true`}</span>{`\n\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`# make sure the server has enough time to start up before running`}</span>{`\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`# commands against it`}</span>{`\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`-`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`run`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` sleep 5\n\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`# When running on the 'master' branch, push the latest version`}</span>{`\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`# of the schema to Warthog Engine.`}</span>{`\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`-`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`run`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`|`}</span><span parentName=\"code\" {...{\n            \"className\": \"token scalar string\"\n          }}>{`\n`}<span parentName=\"span\" {...{\n              \"className\": \"gatsby-highlight-code-line\"\n            }}>{`          if [ \"\\${CIRCLE_BRANCH}\" == \"master\" ]; then`}</span><span parentName=\"span\" {...{\n              \"className\": \"gatsby-highlight-code-line\"\n            }}>{`            warthog service:push --tag=master`}</span><span parentName=\"span\" {...{\n              \"className\": \"gatsby-highlight-code-line\"\n            }}>{`          fi`}</span></span></code><span parentName=\"pre\" {...{\n          \"aria-hidden\": \"true\",\n          \"className\": \"line-numbers-rows\",\n          \"style\": {\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0\"\n          }\n        }}><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span></span></pre></div>\n    <h2 {...{\n      \"id\": \"viewing-schema-change-history\"\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#viewing-schema-change-history\",\n        \"aria-label\": \"viewing schema change history permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Viewing schema change history`}</h2>\n    <p>{`Changes made to your graph's schema over time can be viewed in `}<a parentName=\"p\" {...{\n        \"href\": \"https://engine.warthog.dev\"\n      }}>{`Engine`}</a>{` by browsing to the History page for your graph. Each time you push a new version of your schema, it will appear in your graph's history along with a list of the changes introduced in that version.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/schema-history-63f8a91c30b6687ede7b5ae61b759e82.png\",\n        \"alt\": \"Schema history page in the Engine UI\"\n      }}></img></p>\n    <h2 {...{\n      \"id\": \"managing-environments\"\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#managing-environments\",\n        \"aria-label\": \"managing environments permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Managing environments`}</h2>\n    <p>{`Product cycles move fast and it's common for schemas to be slightly different across environments as changes make their way through your system. To support this, schemas pushed to the registry can be associated with specific `}<em parentName=\"p\">{`variants`}</em>{` of your graph (also referred to `}<em parentName=\"p\">{`tags`}</em>{`).`}</p>\n    <p>{`Warthog supports tracking multiple `}<em parentName=\"p\">{`variants`}</em>{` for every graph. A variant is just like a regular data graph. It has its own history of schemas, its own metadata store of metrics, and its own operation registry. Variants can be used to track ideas like staging environments, canaries, and deploys of experimental features destined for the production graph.`}</p>\n    <p>{`To get fully set up associating data sent to Warthog with `}<em parentName=\"p\">{`variant`}</em>{` information, you'll need to `}<a parentName=\"p\" {...{\n        \"href\": \"#registering-schemas-to-a-variant\"\n      }}>{`configure your CLI commands`}</a>{` to send data with a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`--tag`}</code>{` flag and `}<a parentName=\"p\" {...{\n        \"href\": \"#associating-metrics-with-a-variant\"\n      }}>{`configure your Warthog Server`}</a>{` with a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`schemaTag`}</code>{` option.`}</p>\n    <h3 {...{\n      \"id\": \"registering-schemas-to-a-variant\"\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#registering-schemas-to-a-variant\",\n        \"aria-label\": \"registering schemas to a variant permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Registering schemas to a variant`}</h3>\n    <p>{`To register your schema to a specific `}<em parentName=\"p\">{`variant`}</em>{`, simply add the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`--tag=<VARIANT>`}</code>{` flag to your push command:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"bash\"\n    }}><pre parentName=\"div\" {...{\n        \"style\": {\n          \"counterReset\": \"linenumber NaN\"\n        },\n        \"className\": \"language-bash line-numbers\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-bash\"\n        }}>{`warthog service:push --tag`}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{`beta`}</code><span parentName=\"pre\" {...{\n          \"aria-hidden\": \"true\",\n          \"className\": \"line-numbers-rows\",\n          \"style\": {\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0\"\n          }\n        }}><span parentName=\"span\"></span></span></pre></div>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note:`}</strong>{` All schema pushes without a specified tag are registered under the default graph variant, `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`current`}</code>{`.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"associating-metrics-with-a-variant\"\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#associating-metrics-with-a-variant\",\n        \"aria-label\": \"associating metrics with a variant permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Associating metrics with a variant`}</h3>\n    <p>{`There are a few ways to associate metrics reported to `}<a parentName=\"p\" {...{\n        \"href\": \"https://engine.warthog.dev\"\n      }}>{`Engine`}</a>{` with a specific variant:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The best way to associate metrics with a variant of your graph is to start your server with an environment variable named `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`ENGINE_SCHEMA_TAG`}</code>{` that contains the name of your variant. This will link metrics sent to Engine with the value of that environment variable.`}</li>\n      <li parentName=\"ol\">{`Alternatively, add the `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`schemaTag`}</code>{` option to your Warthog Server configuration (works for Warthog Server 2.2+):`}</li>\n    </ol>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"js\"\n    }}><pre parentName=\"div\" {...{\n        \"style\": {\n          \"counterReset\": \"linenumber NaN\"\n        },\n        \"className\": \"language-js line-numbers\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`const`}</span>{` server `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`new`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`ApolloServer`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`...`}</span>{`\n  engine`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n    apiKey`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`\"<ENGINE_API_KEY>\"`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"gatsby-highlight-code-line\"\n          }}>{`    schemaTag`}<span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`:`}</span>{` `}<span parentName=\"span\" {...{\n              \"className\": \"token string\"\n            }}>{`\"beta\"`}</span></span>{`  `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span></code><span parentName=\"pre\" {...{\n          \"aria-hidden\": \"true\",\n          \"className\": \"line-numbers-rows\",\n          \"style\": {\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0\"\n          }\n        }}><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span></span></pre></div>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note:`}</strong>{` It's important that metrics are associated with the same tag as `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`service:push`}</code>{` if you want to track isolated data across different variants like production and staging.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"tools-that-use-the-schema-registry\"\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#tools-that-use-the-schema-registry\",\n        \"aria-label\": \"tools that use the schema registry permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Tools that use the schema registry`}</h2>\n    <p>{`Keeping your schema up-to-date in Warthog's registry will ensure that you get the best experience from Warthog's tools that connect to the registry:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<a parentName=\"li\" {...{\n          \"href\": \"https://marketplace.visualstudio.com/items?itemName=goldcaddy77.vscode-warthog\"\n        }}>{`Warthog VS Code extension`}</a>{` provides built-in linting on queries by validating against the schema in your registry. It also annotates fields with their descriptions and with performance indicators collected in Warthog's trace warehouse.`}</li>\n      <li parentName=\"ul\">{`The `}<a parentName=\"li\" {...{\n          \"href\": \"/platform/schema-validation/\"\n        }}>{`schema validation`}</a>{` workflow protects your team from accidentally making breaking schema changes. It creates a diff between your local schema and the last schema pushed to the registry, and validates this diff against live traffic seen on your endpoint to warn you about problematic changes.`}</li>\n      <li parentName=\"ul\">{`Your schema's full history and current usage can be seen in `}<a parentName=\"li\" {...{\n          \"href\": \"https://engine.warthog.dev\"\n        }}>{`Warthog Engine`}</a>{`. The History page tracks changes made over time, and the Explorer page shows which clients and which queries are using each field in your schema.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}