{"expireTime":9007200819376317000,"key":"gatsby-plugin-mdx-entire-payload-a295a49353a4170e12ea0c6b5defb390-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"When organizations roll out GraphQL across multiple teams, coordinating and maintaining a single monolithic schema becomes difficult and error-prone. ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":151,"offset":151},"indent":[]}},{"type":"link","title":null,"url":"https://www.warthog.dev/docs/warthog-server/federation/introduction/","children":[{"type":"text","value":"Warthog Federation","position":{"start":{"line":2,"column":152,"offset":152},"end":{"line":2,"column":170,"offset":170},"indent":[]}}],"position":{"start":{"line":2,"column":151,"offset":151},"end":{"line":2,"column":241,"offset":241},"indent":[]}},{"type":"text","value":" solves this problem by enabling teams to build a distributed graph composed of multiple services declaratively without fragile stitching code.","position":{"start":{"line":2,"column":241,"offset":241},"end":{"line":2,"column":384,"offset":384},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":384,"offset":384},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"While federation empowers teams to scale GraphQL much faster than before, it also introduces complexity that comes along with running a distributed system. Teams need federation-aware tooling in order to help them coordinate updating the graph whenever an underlying service changes. The ","position":{"start":{"line":4,"column":1,"offset":386},"end":{"line":4,"column":289,"offset":674},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Warthog Graph Manager","position":{"start":{"line":4,"column":291,"offset":676},"end":{"line":4,"column":312,"offset":697},"indent":[]}}],"position":{"start":{"line":4,"column":289,"offset":674},"end":{"line":4,"column":314,"offset":699},"indent":[]}},{"type":"text","value":" is a turnkey solution to this problem that includes managed service deployments for free, as well as federated service checks and federation-aware analytics for teams on a paid plan.","position":{"start":{"line":4,"column":314,"offset":699},"end":{"line":4,"column":497,"offset":882},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":386},"end":{"line":4,"column":497,"offset":882},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"What you'll learn","position":{"start":{"line":6,"column":4,"offset":887},"end":{"line":6,"column":21,"offset":904},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":884},"end":{"line":6,"column":21,"offset":904},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Based on our experience helping companies scale GraphQL across their organizations, there are several steps teams need to take to successfully run a federated graph in production. We recommend running through these steps after you've already ","position":{"start":{"line":8,"column":1,"offset":906},"end":{"line":8,"column":243,"offset":1148},"indent":[]}},{"type":"link","title":null,"url":"https://www.warthog.dev/docs/warthog-server/federation/implementing/","children":[{"type":"text","value":"implemented a federated graph","position":{"start":{"line":8,"column":244,"offset":1149},"end":{"line":8,"column":273,"offset":1178},"indent":[]}}],"position":{"start":{"line":8,"column":243,"offset":1148},"end":{"line":8,"column":344,"offset":1249},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":8,"column":344,"offset":1249},"end":{"line":8,"column":345,"offset":1250},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":906},"end":{"line":8,"column":345,"offset":1250},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#registering-federated-services","children":[{"type":"text","value":"Register all federated services","position":{"start":{"line":10,"column":5,"offset":1256},"end":{"line":10,"column":36,"offset":1287},"indent":[]}}],"position":{"start":{"line":10,"column":4,"offset":1255},"end":{"line":10,"column":70,"offset":1321},"indent":[]}},{"type":"text","value":" with the Warthog Graph Manager.","position":{"start":{"line":10,"column":70,"offset":1321},"end":{"line":10,"column":102,"offset":1353},"indent":[]}}],"position":{"start":{"line":10,"column":4,"offset":1255},"end":{"line":10,"column":102,"offset":1353},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":1252},"end":{"line":10,"column":102,"offset":1353},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#connecting-warthog-server-to-the-graph-manager","children":[{"type":"text","value":"Configure Warthog Server","position":{"start":{"line":11,"column":5,"offset":1358},"end":{"line":11,"column":29,"offset":1382},"indent":[]}}],"position":{"start":{"line":11,"column":4,"offset":1357},"end":{"line":11,"column":79,"offset":1432},"indent":[]}},{"type":"text","value":" as a gateway to connect to the graph manager.","position":{"start":{"line":11,"column":79,"offset":1432},"end":{"line":11,"column":125,"offset":1478},"indent":[]}}],"position":{"start":{"line":11,"column":4,"offset":1357},"end":{"line":11,"column":125,"offset":1478},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":1354},"end":{"line":11,"column":125,"offset":1478},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#metrics-and-observability","children":[{"type":"text","value":"Turn on metrics","position":{"start":{"line":12,"column":5,"offset":1483},"end":{"line":12,"column":20,"offset":1498},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":1482},"end":{"line":12,"column":49,"offset":1527},"indent":[]}},{"type":"text","value":" for your federated graph.","position":{"start":{"line":12,"column":49,"offset":1527},"end":{"line":12,"column":75,"offset":1553},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":1482},"end":{"line":12,"column":75,"offset":1553},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":1479},"end":{"line":12,"column":75,"offset":1553},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#validating-changes-to-the-graph","children":[{"type":"text","value":"Validate changes","position":{"start":{"line":13,"column":5,"offset":1558},"end":{"line":13,"column":21,"offset":1574},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":1557},"end":{"line":13,"column":56,"offset":1609},"indent":[]}},{"type":"text","value":" to the graph against production traffic.","position":{"start":{"line":13,"column":56,"offset":1609},"end":{"line":13,"column":97,"offset":1650},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":1557},"end":{"line":13,"column":97,"offset":1650},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1554},"end":{"line":13,"column":97,"offset":1650},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#integrating-with-your-deployment-pipeline","children":[{"type":"text","value":"Integrate your federated graph","position":{"start":{"line":14,"column":5,"offset":1655},"end":{"line":14,"column":35,"offset":1685},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":1654},"end":{"line":14,"column":80,"offset":1730},"indent":[]}},{"type":"text","value":" into your deployment pipeline.","position":{"start":{"line":14,"column":80,"offset":1730},"end":{"line":14,"column":111,"offset":1761},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":1654},"end":{"line":14,"column":111,"offset":1761},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1651},"end":{"line":14,"column":111,"offset":1761},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":1252},"end":{"line":14,"column":111,"offset":1761},"indent":[1,1,1,1]}},{"type":"jsx","value":"<!-- TODO: For current Warthog platform users looking to migrate their monolithic API to a federated graph, follow our [platform migration guide](#platform-migration-guide). -->","position":{"start":{"line":16,"column":1,"offset":1763},"end":{"line":16,"column":178,"offset":1940},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Core concepts","position":{"start":{"line":18,"column":4,"offset":1945},"end":{"line":18,"column":17,"offset":1958},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1942},"end":{"line":18,"column":17,"offset":1958},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Federation introduces several new terms that are necessary for understanding the following steps in this article:","position":{"start":{"line":20,"column":1,"offset":1960},"end":{"line":20,"column":114,"offset":2073},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1960},"end":{"line":20,"column":114,"offset":2073},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Graph","position":{"start":{"line":22,"column":5,"offset":2079},"end":{"line":22,"column":10,"offset":2084},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":2077},"end":{"line":22,"column":12,"offset":2086},"indent":[]}},{"type":"text","value":": A single API composed of multiple federated services","position":{"start":{"line":22,"column":12,"offset":2086},"end":{"line":22,"column":66,"offset":2140},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":2077},"end":{"line":22,"column":66,"offset":2140},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":2075},"end":{"line":22,"column":66,"offset":2140},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Federated services","position":{"start":{"line":23,"column":5,"offset":2145},"end":{"line":23,"column":23,"offset":2163},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":2143},"end":{"line":23,"column":25,"offset":2165},"indent":[]}},{"type":"text","value":": The underlying microservices that make up a graph. These services are standalone GraphQL servers that can be built in any language, since federation is spec-compliant GraphQL.","position":{"start":{"line":23,"column":25,"offset":2165},"end":{"line":23,"column":202,"offset":2342},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":2143},"end":{"line":23,"column":202,"offset":2342},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":2141},"end":{"line":23,"column":202,"offset":2342},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Capabilities","position":{"start":{"line":24,"column":5,"offset":2347},"end":{"line":24,"column":17,"offset":2359},"indent":[]}}],"position":{"start":{"line":24,"column":3,"offset":2345},"end":{"line":24,"column":19,"offset":2361},"indent":[]}},{"type":"text","value":": The types a service extends and adds to the graph. A service's capabilities describe how a service interacts with other portions of the graph.","position":{"start":{"line":24,"column":19,"offset":2361},"end":{"line":24,"column":163,"offset":2505},"indent":[]}}],"position":{"start":{"line":24,"column":3,"offset":2345},"end":{"line":24,"column":163,"offset":2505},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":2343},"end":{"line":24,"column":163,"offset":2505},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":2075},"end":{"line":24,"column":163,"offset":2505},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"When you put these concepts together, a ","position":{"start":{"line":26,"column":1,"offset":2507},"end":{"line":26,"column":41,"offset":2547},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"graph","position":{"start":{"line":26,"column":43,"offset":2549},"end":{"line":26,"column":48,"offset":2554},"indent":[]}}],"position":{"start":{"line":26,"column":41,"offset":2547},"end":{"line":26,"column":50,"offset":2556},"indent":[]}},{"type":"text","value":" is composed of ","position":{"start":{"line":26,"column":50,"offset":2556},"end":{"line":26,"column":66,"offset":2572},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"federated services","position":{"start":{"line":26,"column":68,"offset":2574},"end":{"line":26,"column":86,"offset":2592},"indent":[]}}],"position":{"start":{"line":26,"column":66,"offset":2572},"end":{"line":26,"column":88,"offset":2594},"indent":[]}},{"type":"text","value":" that expose their ","position":{"start":{"line":26,"column":88,"offset":2594},"end":{"line":26,"column":107,"offset":2613},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"capabilities","position":{"start":{"line":26,"column":109,"offset":2615},"end":{"line":26,"column":121,"offset":2627},"indent":[]}}],"position":{"start":{"line":26,"column":107,"offset":2613},"end":{"line":26,"column":123,"offset":2629},"indent":[]}},{"type":"text","value":" in order to interact with each other.","position":{"start":{"line":26,"column":123,"offset":2629},"end":{"line":26,"column":161,"offset":2667},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":2507},"end":{"line":26,"column":161,"offset":2667},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The rest of this article focuses on managing a federated graph with the Warthog platform. It assumes you've already implemented a federated graph. To implement a graph, read the ","position":{"start":{"line":28,"column":1,"offset":2669},"end":{"line":28,"column":179,"offset":2847},"indent":[]}},{"type":"link","title":null,"url":"https://www.warthog.dev/docs/warthog-server/federation/introduction/","children":[{"type":"text","value":"federation guide for Warthog Server","position":{"start":{"line":28,"column":180,"offset":2848},"end":{"line":28,"column":215,"offset":2883},"indent":[]}}],"position":{"start":{"line":28,"column":179,"offset":2847},"end":{"line":28,"column":286,"offset":2954},"indent":[]}},{"type":"text","value":" and come back to these steps once you're ready to run your graph in production.","position":{"start":{"line":28,"column":286,"offset":2954},"end":{"line":28,"column":366,"offset":3034},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":2669},"end":{"line":28,"column":366,"offset":3034},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Registering federated services","position":{"start":{"line":30,"column":4,"offset":3039},"end":{"line":30,"column":34,"offset":3069},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":3036},"end":{"line":30,"column":34,"offset":3069},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you're running a distributed GraphQL infrastructure, where federated services ","position":{"start":{"line":32,"column":1,"offset":3071},"end":{"line":32,"column":82,"offset":3152},"indent":[]}},{"type":"link","title":null,"url":"https://www.warthog.dev/docs/warthog-server/federation/federation-spec/#fetch-service-capabilities","children":[{"type":"text","value":"compose","position":{"start":{"line":32,"column":83,"offset":3153},"end":{"line":32,"column":90,"offset":3160},"indent":[]}}],"position":{"start":{"line":32,"column":82,"offset":3152},"end":{"line":32,"column":191,"offset":3261},"indent":[]}},{"type":"text","value":" to form a complete schema, tracking the history of the graph and its underlying services is essential. Running ","position":{"start":{"line":32,"column":191,"offset":3261},"end":{"line":32,"column":303,"offset":3373},"indent":[]}},{"type":"inlineCode","value":"warthog service:push","position":{"start":{"line":32,"column":303,"offset":3373},"end":{"line":32,"column":325,"offset":3395},"indent":[]}},{"type":"text","value":" from within CI/CD on any federated service registers the overall schema of the graph and updates the graph's ","position":{"start":{"line":32,"column":325,"offset":3395},"end":{"line":32,"column":435,"offset":3505},"indent":[]}},{"type":"link","title":null,"url":"#managed-configuration","children":[{"type":"text","value":"managed configuration","position":{"start":{"line":32,"column":436,"offset":3506},"end":{"line":32,"column":457,"offset":3527},"indent":[]}}],"position":{"start":{"line":32,"column":435,"offset":3505},"end":{"line":32,"column":482,"offset":3552},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":32,"column":482,"offset":3552},"end":{"line":32,"column":483,"offset":3553},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":3071},"end":{"line":32,"column":483,"offset":3553},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To push a single federated service to Warthog, run ","position":{"start":{"line":34,"column":1,"offset":3555},"end":{"line":34,"column":52,"offset":3606},"indent":[]}},{"type":"inlineCode","value":"warthog service:push","position":{"start":{"line":34,"column":52,"offset":3606},"end":{"line":34,"column":74,"offset":3628},"indent":[]}},{"type":"text","value":" in CI/CD with the ","position":{"start":{"line":34,"column":74,"offset":3628},"end":{"line":34,"column":93,"offset":3647},"indent":[]}},{"type":"inlineCode","value":"--serviceName","position":{"start":{"line":34,"column":93,"offset":3647},"end":{"line":34,"column":108,"offset":3662},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":34,"column":108,"offset":3662},"end":{"line":34,"column":110,"offset":3664},"indent":[]}},{"type":"inlineCode","value":"--endpoint","position":{"start":{"line":34,"column":110,"offset":3664},"end":{"line":34,"column":122,"offset":3676},"indent":[]}},{"type":"text","value":", and ","position":{"start":{"line":34,"column":122,"offset":3676},"end":{"line":34,"column":128,"offset":3682},"indent":[]}},{"type":"inlineCode","value":"--serviceURL","position":{"start":{"line":34,"column":128,"offset":3682},"end":{"line":34,"column":142,"offset":3696},"indent":[]}},{"type":"text","value":" tags. The CLI will know where to fetch your service's capabilities based on the ","position":{"start":{"line":34,"column":142,"offset":3696},"end":{"line":34,"column":223,"offset":3777},"indent":[]}},{"type":"inlineCode","value":"--endpoint","position":{"start":{"line":34,"column":223,"offset":3777},"end":{"line":34,"column":235,"offset":3789},"indent":[]}},{"type":"text","value":" flag, and the ","position":{"start":{"line":34,"column":235,"offset":3789},"end":{"line":34,"column":250,"offset":3804},"indent":[]}},{"type":"inlineCode","value":"--serviceURL","position":{"start":{"line":34,"column":250,"offset":3804},"end":{"line":34,"column":264,"offset":3818},"indent":[]}},{"type":"text","value":" flag indicates where the federated service can be reached by the gateway. The ","position":{"start":{"line":34,"column":264,"offset":3818},"end":{"line":34,"column":343,"offset":3897},"indent":[]}},{"type":"inlineCode","value":"--serviceName","position":{"start":{"line":34,"column":343,"offset":3897},"end":{"line":34,"column":358,"offset":3912},"indent":[]}},{"type":"text","value":" flag is used as a unique identifier for each federated service.","position":{"start":{"line":34,"column":358,"offset":3912},"end":{"line":34,"column":422,"offset":3976},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":3555},"end":{"line":34,"column":422,"offset":3976},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Make sure you have a ","position":{"start":{"line":36,"column":1,"offset":3978},"end":{"line":36,"column":22,"offset":3999},"indent":[]}},{"type":"inlineCode","value":".env","position":{"start":{"line":36,"column":22,"offset":3999},"end":{"line":36,"column":28,"offset":4005},"indent":[]}},{"type":"text","value":" file locally with your ENGINE_API_KEY defined! To get an API key, click ","position":{"start":{"line":36,"column":28,"offset":4005},"end":{"line":36,"column":101,"offset":4078},"indent":[]}},{"type":"link","title":null,"url":"https://engine.warthog.dev","children":[{"type":"text","value":"here","position":{"start":{"line":36,"column":102,"offset":4079},"end":{"line":36,"column":106,"offset":4083},"indent":[]}}],"position":{"start":{"line":36,"column":101,"offset":4078},"end":{"line":36,"column":135,"offset":4112},"indent":[]}},{"type":"text","value":". To create a new ","position":{"start":{"line":36,"column":135,"offset":4112},"end":{"line":36,"column":153,"offset":4130},"indent":[]}},{"type":"inlineCode","value":".env","position":{"start":{"line":36,"column":153,"offset":4130},"end":{"line":36,"column":159,"offset":4136},"indent":[]}},{"type":"text","value":" file, copy your API key into the following command from your terminal:","position":{"start":{"line":36,"column":159,"offset":4136},"end":{"line":36,"column":230,"offset":4207},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":3978},"end":{"line":36,"column":230,"offset":4207},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"echo \"ENGINE_API_KEY=<your API key here>\" >> .env","position":{"start":{"line":38,"column":1,"offset":4209},"end":{"line":40,"column":4,"offset":4270},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As an example, running service push on a “launches” federated service might look like:","position":{"start":{"line":42,"column":1,"offset":4272},"end":{"line":42,"column":87,"offset":4358},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":4272},"end":{"line":42,"column":87,"offset":4358},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"warthog service:push --serviceName=\"launches\" \\\n                    --serviceURL=\"http://launches-graphql.svc.cluster.local:4001/\" \\\n                    --endpoint=\"http://localhost:4001/\"","position":{"start":{"line":44,"column":1,"offset":4360},"end":{"line":48,"column":4,"offset":4560},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Pushing a federated service to Warthog will update the ","position":{"start":{"line":50,"column":1,"offset":4562},"end":{"line":50,"column":56,"offset":4617},"indent":[]}},{"type":"link","title":null,"url":"#inspecting-your-graph","children":[{"type":"text","value":"Services tab","position":{"start":{"line":50,"column":57,"offset":4618},"end":{"line":50,"column":69,"offset":4630},"indent":[]}}],"position":{"start":{"line":50,"column":56,"offset":4617},"end":{"line":50,"column":94,"offset":4655},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":50,"column":94,"offset":4655},"end":{"line":50,"column":95,"offset":4656},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":4562},"end":{"line":50,"column":95,"offset":4656},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"For production support, using ","position":{"start":{"line":52,"column":3,"offset":4660},"end":{"line":52,"column":33,"offset":4690},"indent":[]}},{"type":"inlineCode","value":"warthog service:push","position":{"start":{"line":52,"column":33,"offset":4690},"end":{"line":52,"column":55,"offset":4712},"indent":[]}},{"type":"text","value":" should be an automated process that integrates with your continuous delivery pipeline. For more information, see integrating with CI/CD in the ","position":{"start":{"line":52,"column":55,"offset":4712},"end":{"line":52,"column":199,"offset":4856},"indent":[]}},{"type":"link","title":null,"url":"#managed-configuration","children":[{"type":"text","value":"managed federation section","position":{"start":{"line":52,"column":200,"offset":4857},"end":{"line":52,"column":226,"offset":4883},"indent":[]}}],"position":{"start":{"line":52,"column":199,"offset":4856},"end":{"line":52,"column":251,"offset":4908},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":52,"column":251,"offset":4908},"end":{"line":52,"column":252,"offset":4909},"indent":[]}}],"position":{"start":{"line":52,"column":3,"offset":4660},"end":{"line":52,"column":252,"offset":4909},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":4658},"end":{"line":52,"column":252,"offset":4909},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Removing a service from the registry","position":{"start":{"line":54,"column":5,"offset":4915},"end":{"line":54,"column":41,"offset":4951},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":4911},"end":{"line":54,"column":41,"offset":4951},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Removing an federated service from the graph works similarly to registering a service. To delete a service, call ","position":{"start":{"line":56,"column":1,"offset":4953},"end":{"line":56,"column":114,"offset":5066},"indent":[]}},{"type":"inlineCode","value":"warthog service:delete","position":{"start":{"line":56,"column":114,"offset":5066},"end":{"line":56,"column":138,"offset":5090},"indent":[]}},{"type":"text","value":". You can also specify the graph variant you want to remove.","position":{"start":{"line":56,"column":138,"offset":5090},"end":{"line":56,"column":198,"offset":5150},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":4953},"end":{"line":56,"column":198,"offset":5150},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"warthog service:delete --serviceName=launches --tag=staging","position":{"start":{"line":58,"column":1,"offset":5152},"end":{"line":60,"column":4,"offset":5223},"indent":[1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"WARNING! This action cannot be reversed. Also, once deleted, service names cannot be reused within the same graph.","position":{"start":{"line":62,"column":3,"offset":5227},"end":{"line":62,"column":117,"offset":5341},"indent":[]}}],"position":{"start":{"line":62,"column":3,"offset":5227},"end":{"line":62,"column":117,"offset":5341},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":5225},"end":{"line":62,"column":117,"offset":5341},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Inspecting your graph","position":{"start":{"line":64,"column":5,"offset":5347},"end":{"line":64,"column":26,"offset":5368},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":5343},"end":{"line":64,"column":26,"offset":5368},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To view the federated services that make up your graph, you can use both the Warthog CLI as well as the Warthog platform.","position":{"start":{"line":66,"column":1,"offset":5370},"end":{"line":66,"column":122,"offset":5491},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":5370},"end":{"line":66,"column":122,"offset":5491},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Run ","position":{"start":{"line":68,"column":1,"offset":5493},"end":{"line":68,"column":5,"offset":5497},"indent":[]}},{"type":"inlineCode","value":"warthog service:list","position":{"start":{"line":68,"column":5,"offset":5497},"end":{"line":68,"column":27,"offset":5519},"indent":[]}},{"type":"text","value":" in the command line to see a snapshot of the services that make up your graph, including their endpoints and when they were last updated.","position":{"start":{"line":68,"column":27,"offset":5519},"end":{"line":68,"column":165,"offset":5657},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":5493},"end":{"line":68,"column":165,"offset":5657},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here's an example of what running ","position":{"start":{"line":70,"column":1,"offset":5659},"end":{"line":70,"column":35,"offset":5693},"indent":[]}},{"type":"inlineCode","value":"warthog service:list","position":{"start":{"line":70,"column":35,"offset":5693},"end":{"line":70,"column":57,"offset":5715},"indent":[]}},{"type":"text","value":" will look like:","position":{"start":{"line":70,"column":57,"offset":5715},"end":{"line":70,"column":73,"offset":5731},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":5659},"end":{"line":70,"column":73,"offset":5731},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"~$ warthog service:list\n  ✔ Loading Warthog Project\n  ✔ Fetching list of services for graph service-list-federation-demo\n\nname       URL                            last updated\n─────────  ─────────────────────────────  ────────────────────────\nAccounts   http://localhost:4001/graphql  3 July 2019 (2 days ago)\nInventory  http://localhost:4004/graphql  3 July 2019 (2 days ago)\nProducts   http://localhost:4003/graphql  3 July 2019 (2 days ago)\nReviews    http://localhost:4002/graphql  3 July 2019 (2 days ago)\n\nView full details at: https://engine.warthog.dev/graph/service-list-federation-demo/service-list","position":{"start":{"line":72,"column":1,"offset":5733},"end":{"line":85,"column":4,"offset":6350},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can see additional details about the services registered to the graph, such as each service's capabilities, in the ","position":{"start":{"line":87,"column":1,"offset":6352},"end":{"line":87,"column":120,"offset":6471},"indent":[]}},{"type":"link","title":null,"url":"https://engine.warthog.dev/","children":[{"type":"text","value":"Warthog Dashboard","position":{"start":{"line":87,"column":121,"offset":6472},"end":{"line":87,"column":138,"offset":6489},"indent":[]}}],"position":{"start":{"line":87,"column":120,"offset":6471},"end":{"line":87,"column":168,"offset":6519},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":87,"column":168,"offset":6519},"end":{"line":87,"column":169,"offset":6520},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":6352},"end":{"line":87,"column":169,"offset":6520},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Connecting Warthog Server to the graph manager","position":{"start":{"line":89,"column":4,"offset":6525},"end":{"line":89,"column":50,"offset":6571},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":6522},"end":{"line":89,"column":50,"offset":6571},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Federation is made up of two parts: federated services and a ","position":{"start":{"line":91,"column":1,"offset":6573},"end":{"line":91,"column":62,"offset":6634},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"gateway","position":{"start":{"line":91,"column":64,"offset":6636},"end":{"line":91,"column":71,"offset":6643},"indent":[]}}],"position":{"start":{"line":91,"column":62,"offset":6634},"end":{"line":91,"column":73,"offset":6645},"indent":[]}},{"type":"text","value":" to compose the complete graph and execute federated queries. Warthog Server comes with a ","position":{"start":{"line":91,"column":73,"offset":6645},"end":{"line":91,"column":163,"offset":6735},"indent":[]}},{"type":"link","title":null,"url":"https://www.warthog.dev/docs/warthog-server/federation/implementing/#running-a-gateway","children":[{"type":"text","value":"gateway","position":{"start":{"line":91,"column":164,"offset":6736},"end":{"line":91,"column":171,"offset":6743},"indent":[]}}],"position":{"start":{"line":91,"column":163,"offset":6735},"end":{"line":91,"column":260,"offset":6832},"indent":[]}},{"type":"text","value":" that composes a federated graph, but you could also implement a gateway in another language.","position":{"start":{"line":91,"column":260,"offset":6832},"end":{"line":91,"column":353,"offset":6925},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":6573},"end":{"line":91,"column":353,"offset":6925},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"While running in development, it's sufficient to run the gateway with a static service list and use introspection to support the gateway's configuration. When running a gateway in production, however, it's important that the uptime of your gateway is not impacted by the uptime of the federated services beneath it. If a gateway fails to introspect a service or if a service fails to compose with the graph, it's paramount that your gateway be resilient to that change and continue to serve traffic with its previous configuration.","position":{"start":{"line":93,"column":1,"offset":6927},"end":{"line":93,"column":532,"offset":7458},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":6927},"end":{"line":93,"column":532,"offset":7458},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For this use case, an Warthog gateway can be created to pick up its configuration from a set of managed files, securely stored during ","position":{"start":{"line":95,"column":1,"offset":7460},"end":{"line":95,"column":135,"offset":7594},"indent":[]}},{"type":"link","title":null,"url":"#registering-federated-services","children":[{"type":"text","value":"service registration","position":{"start":{"line":95,"column":136,"offset":7595},"end":{"line":95,"column":156,"offset":7615},"indent":[]}}],"position":{"start":{"line":95,"column":135,"offset":7594},"end":{"line":95,"column":190,"offset":7649},"indent":[]}},{"type":"text","value":". To use the managed configuration provisioned by the Graph Manager, define ","position":{"start":{"line":95,"column":190,"offset":7649},"end":{"line":95,"column":266,"offset":7725},"indent":[]}},{"type":"inlineCode","value":"ENGINE_API_KEY","position":{"start":{"line":95,"column":266,"offset":7725},"end":{"line":95,"column":282,"offset":7741},"indent":[]}},{"type":"text","value":" in the environment, and construct the gateway and ApolloServer like so:","position":{"start":{"line":95,"column":282,"offset":7741},"end":{"line":95,"column":354,"offset":7813},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":7460},"end":{"line":95,"column":354,"offset":7813},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const { ApolloServer } = require('warthog-server');\nconst { ApolloGateway } = require('@warthog/gateway');\n\n// Managed configuration will be picked up using the API key\nconst gateway = new ApolloGateway();\n\n// Pass the gateway to Warthog Server\nconst server = new ApolloServer({ gateway });\n\nserver.listen().then(({ url }) => {\n  console.log(`🚀 Server ready at ${url}`);\n});","position":{"start":{"line":97,"column":1,"offset":7815},"end":{"line":110,"column":4,"offset":8200},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"The managed configuration will default to using the ","position":{"start":{"line":112,"column":3,"offset":8204},"end":{"line":112,"column":55,"offset":8256},"indent":[]}},{"type":"inlineCode","value":"'current'","position":{"start":{"line":112,"column":55,"offset":8256},"end":{"line":112,"column":66,"offset":8267},"indent":[]}},{"type":"text","value":" variant.","position":{"start":{"line":112,"column":66,"offset":8267},"end":{"line":112,"column":75,"offset":8276},"indent":[]}}],"position":{"start":{"line":112,"column":3,"offset":8204},"end":{"line":112,"column":75,"offset":8276},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":8202},"end":{"line":112,"column":75,"offset":8276},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Managed configuration","position":{"start":{"line":114,"column":5,"offset":8282},"end":{"line":114,"column":26,"offset":8303},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":8278},"end":{"line":114,"column":26,"offset":8303},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Managed configuration is the concept of allowing the gateway to update dynamically in response to service changes. In principle, it's important to separate the reliability of your graph from the reliability of your services. For that reason, we recommend running federation in production using a managed configuration, where the gateway picks up config changes not from introspection, but from a set of files owned by your graph describing its current state.","position":{"start":{"line":116,"column":1,"offset":8305},"end":{"line":116,"column":459,"offset":8763},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":8305},"end":{"line":116,"column":459,"offset":8763},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"On ","position":{"start":{"line":118,"column":1,"offset":8765},"end":{"line":118,"column":4,"offset":8768},"indent":[]}},{"type":"inlineCode","value":"warthog service:push","position":{"start":{"line":118,"column":4,"offset":8768},"end":{"line":118,"column":26,"offset":8790},"indent":[]}},{"type":"text","value":", the service registry writes configuration files to a cloud file system, stored securely and accessible by your API key. These configuration files detail which federated services are part of the graph, metadata about the federated services, including the ","position":{"start":{"line":118,"column":26,"offset":8790},"end":{"line":118,"column":282,"offset":9046},"indent":[]}},{"type":"inlineCode","value":"serviceURL","position":{"start":{"line":118,"column":282,"offset":9046},"end":{"line":118,"column":294,"offset":9058},"indent":[]}},{"type":"text","value":" specified in the ","position":{"start":{"line":118,"column":294,"offset":9058},"end":{"line":118,"column":312,"offset":9076},"indent":[]}},{"type":"inlineCode","value":"push","position":{"start":{"line":118,"column":312,"offset":9076},"end":{"line":118,"column":318,"offset":9082},"indent":[]}},{"type":"text","value":" command, and the partial schema of that federated service. By default, when the Warthog gateway is instantiated with an API key rather than a ","position":{"start":{"line":118,"column":318,"offset":9082},"end":{"line":118,"column":461,"offset":9225},"indent":[]}},{"type":"inlineCode","value":"serviceList","position":{"start":{"line":118,"column":461,"offset":9225},"end":{"line":118,"column":474,"offset":9238},"indent":[]}},{"type":"text","value":", it will poll for that managed config to pick up changes and smoothly roll over to the new service configuration, draining in-flight requests while beginning to generate query plans for incoming requests against the new config.","position":{"start":{"line":118,"column":474,"offset":9238},"end":{"line":118,"column":702,"offset":9466},"indent":[]}}],"position":{"start":{"line":118,"column":1,"offset":8765},"end":{"line":118,"column":702,"offset":9466},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Because configuration changes can affect the query planner, it's highly recommended to ","position":{"start":{"line":120,"column":1,"offset":9468},"end":{"line":120,"column":88,"offset":9555},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"only call ","position":{"start":{"line":120,"column":90,"offset":9557},"end":{"line":120,"column":100,"offset":9567},"indent":[]}},{"type":"inlineCode","value":"warthog service:push","position":{"start":{"line":120,"column":100,"offset":9567},"end":{"line":120,"column":122,"offset":9589},"indent":[]}},{"type":"text","value":" after all replicas of an federated service have deployed","position":{"start":{"line":120,"column":122,"offset":9589},"end":{"line":120,"column":179,"offset":9646},"indent":[]}}],"position":{"start":{"line":120,"column":88,"offset":9555},"end":{"line":120,"column":181,"offset":9648},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":120,"column":181,"offset":9648},"end":{"line":120,"column":182,"offset":9649},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":9468},"end":{"line":120,"column":182,"offset":9649},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Metrics and observability","position":{"start":{"line":122,"column":4,"offset":9654},"end":{"line":122,"column":29,"offset":9679},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":9651},"end":{"line":122,"column":29,"offset":9679},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Like any distributed architecture, you should make sure that your federated graph has proper observability, monitoring, and automation to ensure reliability and performance of both your gateway and the federated services underneath it. Serving your GraphQL API from a distributed architecture has many benefits, like productivity, isolation, and being able to match the right services with the right runtimes. Operating a distributed system also has more complexity and points of failure than operating a monolith, and with that complexity comes a need to heighten observability into the state of your system and control over its coordination.","position":{"start":{"line":124,"column":1,"offset":9681},"end":{"line":124,"column":644,"offset":10324},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":9681},"end":{"line":124,"column":644,"offset":10324},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Warthog Server has support for reporting federated ","position":{"start":{"line":126,"column":1,"offset":10326},"end":{"line":126,"column":52,"offset":10377},"indent":[]}},{"type":"link","title":null,"url":"/platform/performance/","children":[{"type":"text","value":"tracing","position":{"start":{"line":126,"column":53,"offset":10378},"end":{"line":126,"column":60,"offset":10385},"indent":[]}}],"position":{"start":{"line":126,"column":52,"offset":10377},"end":{"line":126,"column":85,"offset":10410},"indent":[]}},{"type":"text","value":" information from the gateway. In order to support the gateway with detailed timing and error information, federated services expose their own tracing information per-fetch in their extensions, which are consumed by the gateway and merged together in order to be emitted to the Warthog metrics ingress. To enable this functionality, make sure the ","position":{"start":{"line":126,"column":85,"offset":10410},"end":{"line":126,"column":432,"offset":10757},"indent":[]}},{"type":"inlineCode","value":"ENGINE_API_KEY","position":{"start":{"line":126,"column":432,"offset":10757},"end":{"line":126,"column":448,"offset":10773},"indent":[]}},{"type":"text","value":" is set in the environment for your gateway server and ensure that all federated services and the gateway are running ","position":{"start":{"line":126,"column":448,"offset":10773},"end":{"line":126,"column":566,"offset":10891},"indent":[]}},{"type":"inlineCode","value":"warthog-server","position":{"start":{"line":126,"column":566,"offset":10891},"end":{"line":126,"column":582,"offset":10907},"indent":[]}},{"type":"text","value":" version ","position":{"start":{"line":126,"column":582,"offset":10907},"end":{"line":126,"column":591,"offset":10916},"indent":[]}},{"type":"inlineCode","value":"2.7.0","position":{"start":{"line":126,"column":591,"offset":10916},"end":{"line":126,"column":598,"offset":10923},"indent":[]}},{"type":"text","value":" or greater. Also, ensure that federated services do not have the ","position":{"start":{"line":126,"column":598,"offset":10923},"end":{"line":126,"column":664,"offset":10989},"indent":[]}},{"type":"inlineCode","value":"ENGINE_API_KEY","position":{"start":{"line":126,"column":664,"offset":10989},"end":{"line":126,"column":680,"offset":11005},"indent":[]}},{"type":"text","value":" environment variable set.","position":{"start":{"line":126,"column":680,"offset":11005},"end":{"line":126,"column":706,"offset":11031},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":10326},"end":{"line":126,"column":706,"offset":11031},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Traces will be reported in the shape of the query plan, with each unique fetch to a federated service reporting timing and error data.","position":{"start":{"line":128,"column":1,"offset":11033},"end":{"line":128,"column":135,"offset":11167},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":11033},"end":{"line":128,"column":135,"offset":11167},"indent":[]}},{"type":"jsx","value":"<div style=\"text-align:center\">\n  <img src=\"../images/federated_trace.png\" alt=\"Federated Trace\" />\n</div>","position":{"start":{"line":130,"column":1,"offset":11169},"end":{"line":132,"column":7,"offset":11275},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Operation-level statistics will still be collected over the operations sent by the client, and those operations will be validated as part of the ","position":{"start":{"line":134,"column":1,"offset":11277},"end":{"line":134,"column":146,"offset":11422},"indent":[]}},{"type":"inlineCode","value":"service:check","position":{"start":{"line":134,"column":146,"offset":11422},"end":{"line":134,"column":161,"offset":11437},"indent":[]}},{"type":"text","value":" validation workflow.","position":{"start":{"line":134,"column":161,"offset":11437},"end":{"line":134,"column":182,"offset":11458},"indent":[]}}],"position":{"start":{"line":134,"column":1,"offset":11277},"end":{"line":134,"column":182,"offset":11458},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Validating changes to the graph","position":{"start":{"line":137,"column":4,"offset":11464},"end":{"line":137,"column":35,"offset":11495},"indent":[]}}],"position":{"start":{"line":137,"column":1,"offset":11461},"end":{"line":137,"column":35,"offset":11495},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Federation allows teams to work independently on federated services without needing to coordinate over an all-encompassing schema. However, this increase in autonomy requires control to ensure that teams that operate on different services are respecting ","position":{"start":{"line":139,"column":1,"offset":11497},"end":{"line":139,"column":255,"offset":11751},"indent":[]}},{"type":"link","title":null,"url":"https://www.warthog.dev/docs/warthog-server/federation/federation-spec/","children":[{"type":"text","value":"defined dependencies","position":{"start":{"line":139,"column":256,"offset":11752},"end":{"line":139,"column":276,"offset":11772},"indent":[]}}],"position":{"start":{"line":139,"column":255,"offset":11751},"end":{"line":139,"column":350,"offset":11846},"indent":[]}},{"type":"text","value":" and not breaking the ability for the graph to compose. The Warthog platform provides tools to help ensure that this increase in autonomy doesn't come at a cost to stability.","position":{"start":{"line":139,"column":350,"offset":11846},"end":{"line":139,"column":524,"offset":12020},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":11497},"end":{"line":139,"column":524,"offset":12020},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In particular, along with ","position":{"start":{"line":141,"column":1,"offset":12022},"end":{"line":141,"column":27,"offset":12048},"indent":[]}},{"type":"link","title":null,"url":"https://www.warthog.dev/docs/platform/schema-validation/","children":[{"type":"text","value":"validating overall schema changes against known operations","position":{"start":{"line":141,"column":28,"offset":12049},"end":{"line":141,"column":86,"offset":12107},"indent":[]}}],"position":{"start":{"line":141,"column":27,"offset":12048},"end":{"line":141,"column":145,"offset":12166},"indent":[]}},{"type":"text","value":", running ","position":{"start":{"line":141,"column":145,"offset":12166},"end":{"line":141,"column":155,"offset":12176},"indent":[]}},{"type":"inlineCode","value":"warthog service:check","position":{"start":{"line":141,"column":155,"offset":12176},"end":{"line":141,"column":178,"offset":12199},"indent":[]}},{"type":"text","value":" for a federated service will ensure that the overall graph still composes to a valid schema, and will output any violated dependencies if present.","position":{"start":{"line":141,"column":178,"offset":12199},"end":{"line":141,"column":325,"offset":12346},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":12022},"end":{"line":141,"column":325,"offset":12346},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"With a federated graph, use the ","position":{"start":{"line":143,"column":1,"offset":12348},"end":{"line":143,"column":33,"offset":12380},"indent":[]}},{"type":"inlineCode","value":"warthog service:check","position":{"start":{"line":143,"column":33,"offset":12380},"end":{"line":143,"column":56,"offset":12403},"indent":[]}},{"type":"text","value":" command to validate individual service changes by adding the ","position":{"start":{"line":143,"column":56,"offset":12403},"end":{"line":143,"column":118,"offset":12465},"indent":[]}},{"type":"inlineCode","value":"--serviceName","position":{"start":{"line":143,"column":118,"offset":12465},"end":{"line":143,"column":133,"offset":12480},"indent":[]}},{"type":"text","value":" flag.","position":{"start":{"line":143,"column":133,"offset":12480},"end":{"line":143,"column":139,"offset":12486},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":12348},"end":{"line":143,"column":139,"offset":12486},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When running ","position":{"start":{"line":145,"column":1,"offset":12488},"end":{"line":145,"column":14,"offset":12501},"indent":[]}},{"type":"inlineCode","value":"warthog service:check","position":{"start":{"line":145,"column":14,"offset":12501},"end":{"line":145,"column":37,"offset":12524},"indent":[]}},{"type":"text","value":" on a federated service, Engine will run composition on the proposed capabilities with the current list of federated services and their capabilities, making sure that the composition is successful. That composed schema will then be diff'ed against the most recently registered schema and validate that those changes are safe. If composition fails, then validation ends and the results will be returned to the user. Note that running ","position":{"start":{"line":145,"column":37,"offset":12524},"end":{"line":145,"column":470,"offset":12957},"indent":[]}},{"type":"inlineCode","value":"warthog service:check","position":{"start":{"line":145,"column":470,"offset":12957},"end":{"line":145,"column":493,"offset":12980},"indent":[]}},{"type":"text","value":" will never update the graph.","position":{"start":{"line":145,"column":493,"offset":12980},"end":{"line":145,"column":522,"offset":13009},"indent":[]}}],"position":{"start":{"line":145,"column":1,"offset":12488},"end":{"line":145,"column":522,"offset":13009},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There are two types of failures that can occur during validation: failed usage checks and failed composition. Failed usage checks are failures due to breaking changes, like removing a field that an active client is querying. Failed composition, on the other hand, is a failure due to inability to compose the graph, like missing an @key for an extended type.","position":{"start":{"line":147,"column":1,"offset":13011},"end":{"line":147,"column":359,"offset":13369},"indent":[]}}],"position":{"start":{"line":147,"column":1,"offset":13011},"end":{"line":147,"column":359,"offset":13369},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Handling composition failure","position":{"start":{"line":149,"column":5,"offset":13375},"end":{"line":149,"column":33,"offset":13403},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":13371},"end":{"line":149,"column":33,"offset":13403},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In general, an ","position":{"start":{"line":151,"column":1,"offset":13405},"end":{"line":151,"column":16,"offset":13420},"indent":[]}},{"type":"inlineCode","value":"warthog service:push","position":{"start":{"line":151,"column":16,"offset":13420},"end":{"line":151,"column":38,"offset":13442},"indent":[]}},{"type":"text","value":" should only be run after an ","position":{"start":{"line":151,"column":38,"offset":13442},"end":{"line":151,"column":67,"offset":13471},"indent":[]}},{"type":"inlineCode","value":"warthog service:check","position":{"start":{"line":151,"column":67,"offset":13471},"end":{"line":151,"column":90,"offset":13494},"indent":[]}},{"type":"text","value":" has passed, but even so, due to changes in ","position":{"start":{"line":151,"column":90,"offset":13494},"end":{"line":151,"column":134,"offset":13538},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"other","position":{"start":{"line":151,"column":135,"offset":13539},"end":{"line":151,"column":140,"offset":13544},"indent":[]}}],"position":{"start":{"line":151,"column":134,"offset":13538},"end":{"line":151,"column":141,"offset":13545},"indent":[]}},{"type":"text","value":" services, it's possible that the ","position":{"start":{"line":151,"column":141,"offset":13545},"end":{"line":151,"column":175,"offset":13579},"indent":[]}},{"type":"inlineCode","value":"warthog service:push","position":{"start":{"line":151,"column":175,"offset":13579},"end":{"line":151,"column":197,"offset":13601},"indent":[]}},{"type":"text","value":" command will encounter composition errors. When this happens, the federated service will still be updated as long as its capabilities are spec-compliant, but ","position":{"start":{"line":151,"column":197,"offset":13601},"end":{"line":151,"column":356,"offset":13760},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"the graph will not be updated","position":{"start":{"line":151,"column":358,"offset":13762},"end":{"line":151,"column":387,"offset":13791},"indent":[]}}],"position":{"start":{"line":151,"column":356,"offset":13760},"end":{"line":151,"column":389,"offset":13793},"indent":[]}},{"type":"text","value":". This means that a new schema will not be associated nor will the gateway's ","position":{"start":{"line":151,"column":389,"offset":13793},"end":{"line":151,"column":466,"offset":13870},"indent":[]}},{"type":"link","title":null,"url":"#managed-configuration","children":[{"type":"text","value":"managed configuration","position":{"start":{"line":151,"column":467,"offset":13871},"end":{"line":151,"column":488,"offset":13892},"indent":[]}}],"position":{"start":{"line":151,"column":466,"offset":13870},"end":{"line":151,"column":513,"offset":13917},"indent":[]}},{"type":"text","value":" be updated.","position":{"start":{"line":151,"column":513,"offset":13917},"end":{"line":151,"column":525,"offset":13929},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":13405},"end":{"line":151,"column":525,"offset":13929},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An example output of this behavior looks like this:","position":{"start":{"line":153,"column":1,"offset":13931},"end":{"line":153,"column":52,"offset":13982},"indent":[]}}],"position":{"start":{"line":153,"column":1,"offset":13931},"end":{"line":153,"column":52,"offset":13982},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"~$ warthog service:push --serviceName=\"launches\" \\\n                      --serviceURL=\"http://launches-graphql.svc.cluster.local:4001/\" \\\n                      --endpoint=\"http://localhost:4001/\"\n  ✔ Loading Warthog Project\n  ✔ Loading Warthog Project\n  ✔ Uploading service to Engine\n\n\nThe 'launches' service for the 'space-explorer@current' graph was updated\n\n*THE SERVICE UPDATE RESULTED IN COMPOSITION ERRORS.*\n\nComposition errors must be resolved before the graph's schema or corresponding gateway can be updated.\nFor more information, see https://www.warthog.dev/docs/warthog-server/federation/errors/\n\n\nError   [launches] Mutation.createLaunch -> requires the field `launch` to be marked as @external.\n\nThe gateway for the 'space-explorer@current' graph was NOT updated with a new schema","position":{"start":{"line":155,"column":1,"offset":13984},"end":{"line":175,"column":4,"offset":14785},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The reasoning behind this functionality is that the service registry should always be the source of truth for what is running in your infrastructure. Even if that means that composition is failing in your infrastructure, the service registry should reflect that. However, you still want your gateway to function as it has been before the service deployment. Additionally, this functionality can be used to make dependent changes, like smoothly migrating a field from one service to another or introducing a circular service dependency.","position":{"start":{"line":177,"column":1,"offset":14787},"end":{"line":177,"column":536,"offset":15322},"indent":[]}}],"position":{"start":{"line":177,"column":1,"offset":14787},"end":{"line":177,"column":536,"offset":15322},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Integrating with your deployment pipeline","position":{"start":{"line":179,"column":4,"offset":15327},"end":{"line":179,"column":45,"offset":15368},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":15324},"end":{"line":179,"column":45,"offset":15368},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As an engineer working on a federated service, you might wonder how to guarantee that the changes you're making to your service are safe changes for the graph as a whole. When rolling out changes to a federated service, we recommend the following worflow:","position":{"start":{"line":181,"column":1,"offset":15370},"end":{"line":181,"column":256,"offset":15625},"indent":[]}}],"position":{"start":{"line":181,"column":1,"offset":15370},"end":{"line":181,"column":256,"offset":15625},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Run validation on every commit through CI using ","position":{"start":{"line":183,"column":4,"offset":15630},"end":{"line":183,"column":52,"offset":15678},"indent":[]}},{"type":"inlineCode","value":"warthog service:check","position":{"start":{"line":183,"column":52,"offset":15678},"end":{"line":183,"column":75,"offset":15701},"indent":[]}}],"position":{"start":{"line":183,"column":4,"offset":15630},"end":{"line":183,"column":75,"offset":15701},"indent":[]}}],"position":{"start":{"line":183,"column":1,"offset":15627},"end":{"line":183,"column":75,"offset":15701},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Merge in a backwards-compatible PR that has passed schema validation","position":{"start":{"line":184,"column":4,"offset":15705},"end":{"line":184,"column":72,"offset":15773},"indent":[]}}],"position":{"start":{"line":184,"column":4,"offset":15705},"end":{"line":184,"column":72,"offset":15773},"indent":[]}}],"position":{"start":{"line":184,"column":1,"offset":15702},"end":{"line":184,"column":72,"offset":15773},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Deploy changes to the federated service in your infrastructure","position":{"start":{"line":185,"column":4,"offset":15777},"end":{"line":185,"column":66,"offset":15839},"indent":[]}}],"position":{"start":{"line":185,"column":4,"offset":15777},"end":{"line":185,"column":66,"offset":15839},"indent":[]}}],"position":{"start":{"line":185,"column":1,"offset":15774},"end":{"line":185,"column":66,"offset":15839},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Let all replicas finish deploying","position":{"start":{"line":186,"column":4,"offset":15843},"end":{"line":186,"column":37,"offset":15876},"indent":[]}}],"position":{"start":{"line":186,"column":4,"offset":15843},"end":{"line":186,"column":37,"offset":15876},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":15840},"end":{"line":186,"column":37,"offset":15876},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Call ","position":{"start":{"line":187,"column":4,"offset":15880},"end":{"line":187,"column":9,"offset":15885},"indent":[]}},{"type":"inlineCode","value":"warthog service:push","position":{"start":{"line":187,"column":9,"offset":15885},"end":{"line":187,"column":31,"offset":15907},"indent":[]}},{"type":"text","value":" to update the federated service","position":{"start":{"line":187,"column":31,"offset":15907},"end":{"line":187,"column":63,"offset":15939},"indent":[]}}],"position":{"start":{"line":187,"column":4,"offset":15880},"end":{"line":187,"column":63,"offset":15939},"indent":[]}}],"position":{"start":{"line":187,"column":1,"offset":15877},"end":{"line":187,"column":63,"offset":15939},"indent":[]}}],"position":{"start":{"line":183,"column":1,"offset":15627},"end":{"line":187,"column":63,"offset":15939},"indent":[1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"~$ warthog service:push --serviceName=\"launches\" \\\n                      --serviceURL=\"http://launches-graphql.svc.cluster.local:4001/\" \\\n                      --endpoint=\"http://localhost:4001/\"\n  ✔ Loading Warthog Project\n  ✔ Uploading service to Engine\n\nThe 'registry' service for the 'space-explorer@current' graph was updated\n\nThe gateway for the 'space-explorer@current' graph was updated with a new schema, composed from the updated 'launches' service\n\nid      graph             variant\n──────  ────────────────  ───────\naz329e  space-explorer    current","position":{"start":{"line":189,"column":1,"offset":15941},"end":{"line":203,"column":4,"offset":16510},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"What's the difference between ","position":{"start":{"line":205,"column":3,"offset":16514},"end":{"line":205,"column":33,"offset":16544},"indent":[]}},{"type":"inlineCode","value":"serviceURL","position":{"start":{"line":205,"column":33,"offset":16544},"end":{"line":205,"column":45,"offset":16556},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":205,"column":45,"offset":16556},"end":{"line":205,"column":50,"offset":16561},"indent":[]}},{"type":"inlineCode","value":"endpoint","position":{"start":{"line":205,"column":50,"offset":16561},"end":{"line":205,"column":60,"offset":16571},"indent":[]}},{"type":"text","value":" parameters? The ","position":{"start":{"line":205,"column":60,"offset":16571},"end":{"line":205,"column":77,"offset":16588},"indent":[]}},{"type":"inlineCode","value":"endpoint","position":{"start":{"line":205,"column":77,"offset":16588},"end":{"line":205,"column":87,"offset":16598},"indent":[]}},{"type":"text","value":" parameter controls the endpoint where the schema will be fetched from at composition, whereas ","position":{"start":{"line":205,"column":87,"offset":16598},"end":{"line":205,"column":182,"offset":16693},"indent":[]}},{"type":"inlineCode","value":"serviceURL","position":{"start":{"line":205,"column":182,"offset":16693},"end":{"line":205,"column":194,"offset":16705},"indent":[]}},{"type":"text","value":" controls what URL the gateway will query at runtime. This is especially useful because federated services ","position":{"start":{"line":205,"column":194,"offset":16705},"end":{"line":205,"column":301,"offset":16812},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"should not be publicly accessible","position":{"start":{"line":205,"column":303,"offset":16814},"end":{"line":205,"column":336,"offset":16847},"indent":[]}}],"position":{"start":{"line":205,"column":301,"offset":16812},"end":{"line":205,"column":338,"offset":16849},"indent":[]}},{"type":"text","value":", so the ","position":{"start":{"line":205,"column":338,"offset":16849},"end":{"line":205,"column":347,"offset":16858},"indent":[]}},{"type":"inlineCode","value":"endpoint","position":{"start":{"line":205,"column":347,"offset":16858},"end":{"line":205,"column":357,"offset":16868},"indent":[]}},{"type":"text","value":" might point to a locally running server or a file, whereas the ","position":{"start":{"line":205,"column":357,"offset":16868},"end":{"line":205,"column":421,"offset":16932},"indent":[]}},{"type":"inlineCode","value":"serviceURL","position":{"start":{"line":205,"column":421,"offset":16932},"end":{"line":205,"column":433,"offset":16944},"indent":[]}},{"type":"text","value":" should be a URL accessible to the gateway.","position":{"start":{"line":205,"column":433,"offset":16944},"end":{"line":205,"column":476,"offset":16987},"indent":[]}}],"position":{"start":{"line":205,"column":3,"offset":16514},"end":{"line":205,"column":476,"offset":16987},"indent":[]}}],"position":{"start":{"line":205,"column":1,"offset":16512},"end":{"line":205,"column":476,"offset":16987},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It's important to make sure that any possible end-user effect from the changes to the graph have been identified, and it's similarly important to strive for backwards-compatible changes to limit those effects. The reason for waiting for the service to completely roll over before registering it is that if some services are still exposing the previous configuration, they might elicit failures for operations the gateway has planned with the new configuration.","position":{"start":{"line":207,"column":1,"offset":16989},"end":{"line":207,"column":461,"offset":17449},"indent":[]}}],"position":{"start":{"line":207,"column":1,"offset":16989},"end":{"line":207,"column":461,"offset":17449},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Diving into service:push","position":{"start":{"line":209,"column":5,"offset":17455},"end":{"line":209,"column":29,"offset":17479},"indent":[]}}],"position":{"start":{"line":209,"column":1,"offset":17451},"end":{"line":209,"column":29,"offset":17479},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Every time that ","position":{"start":{"line":211,"column":1,"offset":17481},"end":{"line":211,"column":17,"offset":17497},"indent":[]}},{"type":"inlineCode","value":"warthog service:push","position":{"start":{"line":211,"column":17,"offset":17497},"end":{"line":211,"column":39,"offset":17519},"indent":[]}},{"type":"text","value":" is called for a federated service, it not only registers the federated service to the graph, but it also updates the managed configuration files that the gateway has access to. Because the graph is dynamically changing, it's possible for composition errors to occur for a ","position":{"start":{"line":211,"column":39,"offset":17519},"end":{"line":211,"column":312,"offset":17792},"indent":[]}},{"type":"inlineCode","value":"service:push","position":{"start":{"line":211,"column":312,"offset":17792},"end":{"line":211,"column":326,"offset":17806},"indent":[]}},{"type":"text","value":" even after a ","position":{"start":{"line":211,"column":326,"offset":17806},"end":{"line":211,"column":340,"offset":17820},"indent":[]}},{"type":"inlineCode","value":"service:check","position":{"start":{"line":211,"column":340,"offset":17820},"end":{"line":211,"column":355,"offset":17835},"indent":[]}},{"type":"text","value":" has succeeded if other federated services changed in the interim. For this reason, updating a federated service will re-trigger composition in the cloud, ensuring that the federated services still compose to form a complete graph before provisioning the managed configuration. The workflow behind the scenes can be summed up as follows:","position":{"start":{"line":211,"column":355,"offset":17835},"end":{"line":211,"column":692,"offset":18172},"indent":[]}}],"position":{"start":{"line":211,"column":1,"offset":17481},"end":{"line":211,"column":692,"offset":18172},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The partial schema is uploaded to a secure location and indexed","position":{"start":{"line":213,"column":4,"offset":18177},"end":{"line":213,"column":67,"offset":18240},"indent":[]}}],"position":{"start":{"line":213,"column":4,"offset":18177},"end":{"line":213,"column":67,"offset":18240},"indent":[]}}],"position":{"start":{"line":213,"column":1,"offset":18174},"end":{"line":213,"column":67,"offset":18240},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The federated service is updated in the registry to point to the partial schema","position":{"start":{"line":214,"column":4,"offset":18244},"end":{"line":214,"column":83,"offset":18323},"indent":[]}}],"position":{"start":{"line":214,"column":4,"offset":18244},"end":{"line":214,"column":83,"offset":18323},"indent":[]}}],"position":{"start":{"line":214,"column":1,"offset":18241},"end":{"line":214,"column":83,"offset":18323},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"All federated services are composed in the cloud to produce a new complete schema","position":{"start":{"line":215,"column":4,"offset":18327},"end":{"line":215,"column":85,"offset":18408},"indent":[]}}],"position":{"start":{"line":215,"column":4,"offset":18327},"end":{"line":215,"column":85,"offset":18408},"indent":[]}}],"position":{"start":{"line":215,"column":1,"offset":18324},"end":{"line":215,"column":85,"offset":18408},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If composition fails, the command exits and emits errors","position":{"start":{"line":216,"column":4,"offset":18412},"end":{"line":216,"column":60,"offset":18468},"indent":[]}}],"position":{"start":{"line":216,"column":4,"offset":18412},"end":{"line":216,"column":60,"offset":18468},"indent":[]}}],"position":{"start":{"line":216,"column":1,"offset":18409},"end":{"line":216,"column":60,"offset":18468},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If composition succeeds, the top-level managed configuration file is updated in-place to point to the updated set of federated services","position":{"start":{"line":217,"column":4,"offset":18472},"end":{"line":217,"column":139,"offset":18607},"indent":[]}}],"position":{"start":{"line":217,"column":4,"offset":18472},"end":{"line":217,"column":139,"offset":18607},"indent":[]}}],"position":{"start":{"line":217,"column":1,"offset":18469},"end":{"line":217,"column":139,"offset":18607},"indent":[]}}],"position":{"start":{"line":213,"column":1,"offset":18174},"end":{"line":217,"column":139,"offset":18607},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"On the other side of the equation sits the gateway. The gateway is constantly listening for changes to the top-level managed configuration file. The location of the managed configuration file is guarded by using a hash of the API key, provisioned ahead of time so as not to affect reliability. The life-cycle of dynamic configuration updates is as follows:","position":{"start":{"line":219,"column":1,"offset":18609},"end":{"line":219,"column":357,"offset":18965},"indent":[]}}],"position":{"start":{"line":219,"column":1,"offset":18609},"end":{"line":219,"column":357,"offset":18965},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The gateway listens for updates to its managed configuration","position":{"start":{"line":221,"column":4,"offset":18970},"end":{"line":221,"column":64,"offset":19030},"indent":[]}}],"position":{"start":{"line":221,"column":4,"offset":18970},"end":{"line":221,"column":64,"offset":19030},"indent":[]}}],"position":{"start":{"line":221,"column":1,"offset":18967},"end":{"line":221,"column":64,"offset":19030},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"On update, the gateway downloads configuration for each federated service in parallel","position":{"start":{"line":222,"column":4,"offset":19034},"end":{"line":222,"column":89,"offset":19119},"indent":[]}}],"position":{"start":{"line":222,"column":4,"offset":19034},"end":{"line":222,"column":89,"offset":19119},"indent":[]}}],"position":{"start":{"line":222,"column":1,"offset":19031},"end":{"line":222,"column":89,"offset":19119},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The gateway performs composition over the managed configuration to update query planning","position":{"start":{"line":223,"column":4,"offset":19123},"end":{"line":223,"column":92,"offset":19211},"indent":[]}}],"position":{"start":{"line":223,"column":4,"offset":19123},"end":{"line":223,"column":92,"offset":19211},"indent":[]}}],"position":{"start":{"line":223,"column":1,"offset":19120},"end":{"line":223,"column":92,"offset":19211},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The gateway continues to resolve in-flight requests with the previous configuration while using the updated configuration for all new requests","position":{"start":{"line":224,"column":4,"offset":19215},"end":{"line":224,"column":146,"offset":19357},"indent":[]}}],"position":{"start":{"line":224,"column":4,"offset":19215},"end":{"line":224,"column":146,"offset":19357},"indent":[]}}],"position":{"start":{"line":224,"column":1,"offset":19212},"end":{"line":224,"column":146,"offset":19357},"indent":[]}}],"position":{"start":{"line":221,"column":1,"offset":18967},"end":{"line":224,"column":146,"offset":19357},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Reliability and security","position":{"start":{"line":226,"column":5,"offset":19363},"end":{"line":226,"column":29,"offset":19387},"indent":[]}}],"position":{"start":{"line":226,"column":1,"offset":19359},"end":{"line":226,"column":29,"offset":19387},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The managed configuration for the Warthog gateway is exposed through ","position":{"start":{"line":228,"column":1,"offset":19389},"end":{"line":228,"column":70,"offset":19458},"indent":[]}},{"type":"link","title":null,"url":"https://cloud.google.com/storage","children":[{"type":"text","value":"Google Cloud Storage","position":{"start":{"line":228,"column":71,"offset":19459},"end":{"line":228,"column":91,"offset":19479},"indent":[]}}],"position":{"start":{"line":228,"column":70,"offset":19458},"end":{"line":228,"column":126,"offset":19514},"indent":[]}},{"type":"text","value":". For all API keys, the Warthog Graph Manager provisions a public file accessible via the hash of the API key. In the event that managed configuration is inaccessible due to an outage in Google's Cloud Storage service, the gateway will continue to serve the last-known configuration. In the event that Warthog Graph Manager API is down, changes to managed configuration will be stalled but the last-published configuration files will still be accessible via GCS.","position":{"start":{"line":228,"column":126,"offset":19514},"end":{"line":228,"column":588,"offset":19976},"indent":[]}}],"position":{"start":{"line":228,"column":1,"offset":19389},"end":{"line":228,"column":588,"offset":19976},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Using variants to control rollout","position":{"start":{"line":230,"column":5,"offset":19982},"end":{"line":230,"column":38,"offset":20015},"indent":[]}}],"position":{"start":{"line":230,"column":1,"offset":19978},"end":{"line":230,"column":38,"offset":20015},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"With ","position":{"start":{"line":232,"column":1,"offset":20017},"end":{"line":232,"column":6,"offset":20022},"indent":[]}},{"type":"link","title":null,"url":"#managed-configuration","children":[{"type":"text","value":"managed federation","position":{"start":{"line":232,"column":7,"offset":20023},"end":{"line":232,"column":25,"offset":20041},"indent":[]}}],"position":{"start":{"line":232,"column":6,"offset":20022},"end":{"line":232,"column":50,"offset":20066},"indent":[]}},{"type":"text","value":", you have the ability to control which version of your graph a fleet of gateways are running with. For the majority of deployments, rolling over all of your gateways to a new schema version is a good strategy, since changes should be checked to be backwards compatible using ","position":{"start":{"line":232,"column":50,"offset":20066},"end":{"line":232,"column":326,"offset":20342},"indent":[]}},{"type":"link","title":null,"url":"/platform/schema-validation/","children":[{"type":"text","value":"schema validation","position":{"start":{"line":232,"column":327,"offset":20343},"end":{"line":232,"column":344,"offset":20360},"indent":[]}}],"position":{"start":{"line":232,"column":326,"offset":20342},"end":{"line":232,"column":375,"offset":20391},"indent":[]}},{"type":"text","value":". However, changes at the gateway level may involve a variety of different updates, like transferring type ownership from one service to another. In the case that your infrastructure requires more advanced deployment strategies, we recommend using ","position":{"start":{"line":232,"column":375,"offset":20391},"end":{"line":232,"column":623,"offset":20639},"indent":[]}},{"type":"link","title":null,"url":"/platform/schema-registry/#registering-schemas-to-a-variant","children":[{"type":"text","value":"graph variants","position":{"start":{"line":232,"column":624,"offset":20640},"end":{"line":232,"column":638,"offset":20654},"indent":[]}}],"position":{"start":{"line":232,"column":623,"offset":20639},"end":{"line":232,"column":700,"offset":20716},"indent":[]}},{"type":"text","value":" to manage different fleets of gateways running with different configurations.","position":{"start":{"line":232,"column":700,"offset":20716},"end":{"line":232,"column":778,"offset":20794},"indent":[]}}],"position":{"start":{"line":232,"column":1,"offset":20017},"end":{"line":232,"column":778,"offset":20794},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For instance, in order to have a canary deployment, you might maintain two production graphs in the graph manager, one called ","position":{"start":{"line":234,"column":1,"offset":20796},"end":{"line":234,"column":127,"offset":20922},"indent":[]}},{"type":"inlineCode","value":"prod","position":{"start":{"line":234,"column":127,"offset":20922},"end":{"line":234,"column":133,"offset":20928},"indent":[]}},{"type":"text","value":" and one called ","position":{"start":{"line":234,"column":133,"offset":20928},"end":{"line":234,"column":149,"offset":20944},"indent":[]}},{"type":"inlineCode","value":"prod-canary","position":{"start":{"line":234,"column":149,"offset":20944},"end":{"line":234,"column":162,"offset":20957},"indent":[]}},{"type":"text","value":". Your deployment of a change to some federated service named \"foo\" might look something like this:","position":{"start":{"line":234,"column":162,"offset":20957},"end":{"line":234,"column":261,"offset":21056},"indent":[]}}],"position":{"start":{"line":234,"column":1,"offset":20796},"end":{"line":234,"column":261,"offset":21056},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Check changes in \"foo\" against ","position":{"start":{"line":236,"column":4,"offset":21061},"end":{"line":236,"column":35,"offset":21092},"indent":[]}},{"type":"inlineCode","value":"prod","position":{"start":{"line":236,"column":35,"offset":21092},"end":{"line":236,"column":41,"offset":21098},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":236,"column":41,"offset":21098},"end":{"line":236,"column":46,"offset":21103},"indent":[]}},{"type":"inlineCode","value":"prod-canary","position":{"start":{"line":236,"column":46,"offset":21103},"end":{"line":236,"column":59,"offset":21116},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":236,"column":59,"offset":21116},"end":{"line":236,"column":60,"offset":21117},"indent":[]}}],"position":{"start":{"line":236,"column":4,"offset":21061},"end":{"line":236,"column":60,"offset":21117},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"warthog service:check --tag=prod --serviceName=foo && warthog service:check --tag=prod-canary --serviceName=foo","position":{"start":{"line":237,"column":4,"offset":21121},"end":{"line":239,"column":7,"offset":21246},"indent":[4,4]}}],"position":{"start":{"line":236,"column":1,"offset":21058},"end":{"line":239,"column":7,"offset":21246},"indent":[1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Deploy changes to \"foo\" into your production environment. (","position":{"start":{"line":240,"column":4,"offset":21250},"end":{"line":240,"column":63,"offset":21309},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Note: This will not roll out changes to the gateway yet","position":{"start":{"line":240,"column":64,"offset":21310},"end":{"line":240,"column":119,"offset":21365},"indent":[]}}],"position":{"start":{"line":240,"column":63,"offset":21309},"end":{"line":240,"column":120,"offset":21366},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":240,"column":120,"offset":21366},"end":{"line":240,"column":121,"offset":21367},"indent":[]}}],"position":{"start":{"line":240,"column":4,"offset":21250},"end":{"line":240,"column":121,"offset":21367},"indent":[]}}],"position":{"start":{"line":240,"column":1,"offset":21247},"end":{"line":240,"column":121,"offset":21367},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Roll over the ","position":{"start":{"line":241,"column":4,"offset":21371},"end":{"line":241,"column":18,"offset":21385},"indent":[]}},{"type":"inlineCode","value":"prod-canary","position":{"start":{"line":241,"column":18,"offset":21385},"end":{"line":241,"column":31,"offset":21398},"indent":[]}},{"type":"text","value":" graph, containing one gateway container, using ","position":{"start":{"line":241,"column":31,"offset":21398},"end":{"line":241,"column":79,"offset":21446},"indent":[]}},{"type":"inlineCode","value":"warthog service:push --tag=prod-canary --serviceName=foo","position":{"start":{"line":241,"column":79,"offset":21446},"end":{"line":241,"column":137,"offset":21504},"indent":[]}},{"type":"text","value":". (","position":{"start":{"line":241,"column":137,"offset":21504},"end":{"line":241,"column":140,"offset":21507},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Note: If composition fails due to intermediate changes to the canary graph, new configuration will not be rolled out","position":{"start":{"line":241,"column":141,"offset":21508},"end":{"line":241,"column":257,"offset":21624},"indent":[]}}],"position":{"start":{"line":241,"column":140,"offset":21507},"end":{"line":241,"column":258,"offset":21625},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":241,"column":258,"offset":21625},"end":{"line":241,"column":259,"offset":21626},"indent":[]}}],"position":{"start":{"line":241,"column":4,"offset":21371},"end":{"line":241,"column":259,"offset":21626},"indent":[]}}],"position":{"start":{"line":241,"column":1,"offset":21368},"end":{"line":241,"column":259,"offset":21626},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Wait for health checks to pass against the canary, watch dashboards, etc.","position":{"start":{"line":242,"column":4,"offset":21630},"end":{"line":242,"column":77,"offset":21703},"indent":[]}}],"position":{"start":{"line":242,"column":4,"offset":21630},"end":{"line":242,"column":77,"offset":21703},"indent":[]}}],"position":{"start":{"line":242,"column":1,"offset":21627},"end":{"line":242,"column":77,"offset":21703},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"After the canary is stable, roll out the changes to the rest of production using ","position":{"start":{"line":243,"column":4,"offset":21707},"end":{"line":243,"column":85,"offset":21788},"indent":[]}},{"type":"inlineCode","value":"warthog service:push --tag=prod --serviceName=foo","position":{"start":{"line":243,"column":85,"offset":21788},"end":{"line":243,"column":136,"offset":21839},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":243,"column":136,"offset":21839},"end":{"line":243,"column":137,"offset":21840},"indent":[]}}],"position":{"start":{"line":243,"column":4,"offset":21707},"end":{"line":243,"column":137,"offset":21840},"indent":[]}}],"position":{"start":{"line":243,"column":1,"offset":21704},"end":{"line":243,"column":137,"offset":21840},"indent":[]}}],"position":{"start":{"line":236,"column":1,"offset":21058},"end":{"line":243,"column":137,"offset":21840},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Because you can ","position":{"start":{"line":245,"column":1,"offset":21842},"end":{"line":245,"column":17,"offset":21858},"indent":[]}},{"type":"link","title":null,"url":"/platform/schema-registry/#associating-metrics-with-a-variant","children":[{"type":"text","value":"tag metrics with variants","position":{"start":{"line":245,"column":18,"offset":21859},"end":{"line":245,"column":43,"offset":21884},"indent":[]}}],"position":{"start":{"line":245,"column":17,"offset":21858},"end":{"line":245,"column":107,"offset":21948},"indent":[]}},{"type":"text","value":" as well, you can use ","position":{"start":{"line":245,"column":107,"offset":21948},"end":{"line":245,"column":129,"offset":21970},"indent":[]}},{"type":"link","title":null,"url":"https://engine.warthog.dev","children":[{"type":"text","value":"Warthog Graph Manager","position":{"start":{"line":245,"column":130,"offset":21971},"end":{"line":245,"column":151,"offset":21992},"indent":[]}}],"position":{"start":{"line":245,"column":129,"offset":21970},"end":{"line":245,"column":180,"offset":22021},"indent":[]}},{"type":"text","value":" to verify a canary's performance before rolling out changes to the rest of the graph. You can also use a similar strategy with variants to support a variety of other advanced deployment workflows, like blue/green deployments.","position":{"start":{"line":245,"column":180,"offset":22021},"end":{"line":245,"column":406,"offset":22247},"indent":[]}}],"position":{"start":{"line":245,"column":1,"offset":21842},"end":{"line":245,"column":406,"offset":22247},"indent":[]}},{"type":"jsx","value":"<!-- ## Platform migration guide -->","position":{"start":{"line":247,"column":1,"offset":22249},"end":{"line":247,"column":37,"offset":22285},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Managing a federated graph\",\"description\":\"How to run, manage, and deploy a federated graph\"}","position":{"start":{"line":250,"column":1,"offset":22288},"end":{"line":250,"column":132,"offset":22419},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":250,"column":132,"offset":22419}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Managing a federated graph\",\n  \"description\": \"How to run, manage, and deploy a federated graph\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When organizations roll out GraphQL across multiple teams, coordinating and maintaining a single monolithic schema becomes difficult and error-prone. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.warthog.dev/docs/warthog-server/federation/introduction/\"\n  }), \"Warthog Federation\"), \" solves this problem by enabling teams to build a distributed graph composed of multiple services declaratively without fragile stitching code.\"), mdx(\"p\", null, \"While federation empowers teams to scale GraphQL much faster than before, it also introduces complexity that comes along with running a distributed system. Teams need federation-aware tooling in order to help them coordinate updating the graph whenever an underlying service changes. The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Warthog Graph Manager\"), \" is a turnkey solution to this problem that includes managed service deployments for free, as well as federated service checks and federation-aware analytics for teams on a paid plan.\"), mdx(\"h2\", {\n    \"id\": \"what-youll-learn\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#what-youll-learn\",\n    \"aria-label\": \"what youll learn permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"What you'll learn\"), mdx(\"p\", null, \"Based on our experience helping companies scale GraphQL across their organizations, there are several steps teams need to take to successfully run a federated graph in production. We recommend running through these steps after you've already \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.warthog.dev/docs/warthog-server/federation/implementing/\"\n  }), \"implemented a federated graph\"), \":\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#registering-federated-services\"\n  }), \"Register all federated services\"), \" with the Warthog Graph Manager.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#connecting-warthog-server-to-the-graph-manager\"\n  }), \"Configure Warthog Server\"), \" as a gateway to connect to the graph manager.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#metrics-and-observability\"\n  }), \"Turn on metrics\"), \" for your federated graph.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#validating-changes-to-the-graph\"\n  }), \"Validate changes\"), \" to the graph against production traffic.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#integrating-with-your-deployment-pipeline\"\n  }), \"Integrate your federated graph\"), \" into your deployment pipeline.\")), mdx(\"h2\", {\n    \"id\": \"core-concepts\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#core-concepts\",\n    \"aria-label\": \"core concepts permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Core concepts\"), mdx(\"p\", null, \"Federation introduces several new terms that are necessary for understanding the following steps in this article:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Graph\"), \": A single API composed of multiple federated services\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Federated services\"), \": The underlying microservices that make up a graph. These services are standalone GraphQL servers that can be built in any language, since federation is spec-compliant GraphQL.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Capabilities\"), \": The types a service extends and adds to the graph. A service's capabilities describe how a service interacts with other portions of the graph.\")), mdx(\"p\", null, \"When you put these concepts together, a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"graph\"), \" is composed of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"federated services\"), \" that expose their \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"capabilities\"), \" in order to interact with each other.\"), mdx(\"p\", null, \"The rest of this article focuses on managing a federated graph with the Warthog platform. It assumes you've already implemented a federated graph. To implement a graph, read the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.warthog.dev/docs/warthog-server/federation/introduction/\"\n  }), \"federation guide for Warthog Server\"), \" and come back to these steps once you're ready to run your graph in production.\"), mdx(\"h2\", {\n    \"id\": \"registering-federated-services\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#registering-federated-services\",\n    \"aria-label\": \"registering federated services permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Registering federated services\"), mdx(\"p\", null, \"If you're running a distributed GraphQL infrastructure, where federated services \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.warthog.dev/docs/warthog-server/federation/federation-spec/#fetch-service-capabilities\"\n  }), \"compose\"), \" to form a complete schema, tracking the history of the graph and its underlying services is essential. Running \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:push\"), \" from within CI/CD on any federated service registers the overall schema of the graph and updates the graph's \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#managed-configuration\"\n  }), \"managed configuration\"), \".\"), mdx(\"p\", null, \"To push a single federated service to Warthog, run \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:push\"), \" in CI/CD with the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"--serviceName\"), \", \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"--endpoint\"), \", and \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"--serviceURL\"), \" tags. The CLI will know where to fetch your service's capabilities based on the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"--endpoint\"), \" flag, and the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"--serviceURL\"), \" flag indicates where the federated service can be reached by the gateway. The \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"--serviceName\"), \" flag is used as a unique identifier for each federated service.\"), mdx(\"p\", null, \"Make sure you have a \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \".env\"), \" file locally with your ENGINE_API_KEY defined! To get an API key, click \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://engine.warthog.dev\"\n  }), \"here\"), \". To create a new \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \".env\"), \" file, copy your API key into the following command from your terminal:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-bash line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token builtin class-name\"\n  }), \"echo\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"\\\"ENGINE_API_KEY=<your API key here>\\\"\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">>\"), \" .env\"), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"p\", null, \"As an example, running service push on a \\u201Claunches\\u201D federated service might look like:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-bash line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"warthog service:push --serviceName\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"\\\"launches\\\"\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"\\\\\"), \"\\n                    --serviceURL\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"\\\"http://launches-graphql.svc.cluster.local:4001/\\\"\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"\\\\\"), \"\\n                    --endpoint\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"\\\"http://localhost:4001/\\\"\")), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"p\", null, \"Pushing a federated service to Warthog will update the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#inspecting-your-graph\"\n  }), \"Services tab\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"For production support, using \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:push\"), \" should be an automated process that integrates with your continuous delivery pipeline. For more information, see integrating with CI/CD in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#managed-configuration\"\n  }), \"managed federation section\"), \".\")), mdx(\"h3\", {\n    \"id\": \"removing-a-service-from-the-registry\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#removing-a-service-from-the-registry\",\n    \"aria-label\": \"removing a service from the registry permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Removing a service from the registry\"), mdx(\"p\", null, \"Removing an federated service from the graph works similarly to registering a service. To delete a service, call \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:delete\"), \". You can also specify the graph variant you want to remove.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-bash line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"warthog service:delete --serviceName\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \"launches --tag\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \"staging\"), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"WARNING! This action cannot be reversed. Also, once deleted, service names cannot be reused within the same graph.\")), mdx(\"h3\", {\n    \"id\": \"inspecting-your-graph\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#inspecting-your-graph\",\n    \"aria-label\": \"inspecting your graph permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Inspecting your graph\"), mdx(\"p\", null, \"To view the federated services that make up your graph, you can use both the Warthog CLI as well as the Warthog platform.\"), mdx(\"p\", null, \"Run \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:list\"), \" in the command line to see a snapshot of the services that make up your graph, including their endpoints and when they were last updated.\"), mdx(\"p\", null, \"Here's an example of what running \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:list\"), \" will look like:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-text line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"~$ warthog service:list\\n  \\u2714 Loading Warthog Project\\n  \\u2714 Fetching list of services for graph service-list-federation-demo\\n\\nname       URL                            last updated\\n\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\nAccounts   http://localhost:4001/graphql  3 July 2019 (2 days ago)\\nInventory  http://localhost:4004/graphql  3 July 2019 (2 days ago)\\nProducts   http://localhost:4003/graphql  3 July 2019 (2 days ago)\\nReviews    http://localhost:4002/graphql  3 July 2019 (2 days ago)\\n\\nView full details at: https://engine.warthog.dev/graph/service-list-federation-demo/service-list\"), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"p\", null, \"You can see additional details about the services registered to the graph, such as each service's capabilities, in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://engine.warthog.dev/\"\n  }), \"Warthog Dashboard\"), \".\"), mdx(\"h2\", {\n    \"id\": \"connecting-warthog-server-to-the-graph-manager\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#connecting-warthog-server-to-the-graph-manager\",\n    \"aria-label\": \"connecting warthog server to the graph manager permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Connecting Warthog Server to the graph manager\"), mdx(\"p\", null, \"Federation is made up of two parts: federated services and a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"gateway\"), \" to compose the complete graph and execute federated queries. Warthog Server comes with a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.warthog.dev/docs/warthog-server/federation/implementing/#running-a-gateway\"\n  }), \"gateway\"), \" that composes a federated graph, but you could also implement a gateway in another language.\"), mdx(\"p\", null, \"While running in development, it's sufficient to run the gateway with a static service list and use introspection to support the gateway's configuration. When running a gateway in production, however, it's important that the uptime of your gateway is not impacted by the uptime of the federated services beneath it. If a gateway fails to introspect a service or if a service fails to compose with the graph, it's paramount that your gateway be resilient to that change and continue to serve traffic with its previous configuration.\"), mdx(\"p\", null, \"For this use case, an Warthog gateway can be created to pick up its configuration from a set of managed files, securely stored during \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#registering-federated-services\"\n  }), \"service registration\"), \". To use the managed configuration provisioned by the Graph Manager, define \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"ENGINE_API_KEY\"), \" in the environment, and construct the gateway and ApolloServer like so:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"js\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-js line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"const\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \" ApolloServer \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"require\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"'warthog-server'\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"const\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \" ApolloGateway \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"require\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"'@warthog/gateway'\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"// Managed configuration will be picked up using the API key\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"const\"), \" gateway \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"new\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"ApolloGateway\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"// Pass the gateway to Warthog Server\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"const\"), \" server \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"new\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"ApolloServer\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \" gateway \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\\nserver\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"listen\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"then\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token parameter\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \" url \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\")), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=>\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n  console\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"log\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token template-string\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token template-punctuation string\"\n  }), \"`\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token string\"\n  }), \"\\uD83D\\uDE80 Server ready at \"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token interpolation\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token interpolation-punctuation punctuation\"\n  }), \"${\"), \"url\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token interpolation-punctuation punctuation\"\n  }), \"}\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token template-punctuation string\"\n  }), \"`\")), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\")), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The managed configuration will default to using the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"'current'\"), \" variant.\")), mdx(\"h3\", {\n    \"id\": \"managed-configuration\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#managed-configuration\",\n    \"aria-label\": \"managed configuration permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Managed configuration\"), mdx(\"p\", null, \"Managed configuration is the concept of allowing the gateway to update dynamically in response to service changes. In principle, it's important to separate the reliability of your graph from the reliability of your services. For that reason, we recommend running federation in production using a managed configuration, where the gateway picks up config changes not from introspection, but from a set of files owned by your graph describing its current state.\"), mdx(\"p\", null, \"On \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:push\"), \", the service registry writes configuration files to a cloud file system, stored securely and accessible by your API key. These configuration files detail which federated services are part of the graph, metadata about the federated services, including the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"serviceURL\"), \" specified in the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"push\"), \" command, and the partial schema of that federated service. By default, when the Warthog gateway is instantiated with an API key rather than a \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"serviceList\"), \", it will poll for that managed config to pick up changes and smoothly roll over to the new service configuration, draining in-flight requests while beginning to generate query plans for incoming requests against the new config.\"), mdx(\"p\", null, \"Because configuration changes can affect the query planner, it's highly recommended to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"only call \", mdx(\"code\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:push\"), \" after all replicas of an federated service have deployed\"), \".\"), mdx(\"h2\", {\n    \"id\": \"metrics-and-observability\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#metrics-and-observability\",\n    \"aria-label\": \"metrics and observability permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Metrics and observability\"), mdx(\"p\", null, \"Like any distributed architecture, you should make sure that your federated graph has proper observability, monitoring, and automation to ensure reliability and performance of both your gateway and the federated services underneath it. Serving your GraphQL API from a distributed architecture has many benefits, like productivity, isolation, and being able to match the right services with the right runtimes. Operating a distributed system also has more complexity and points of failure than operating a monolith, and with that complexity comes a need to heighten observability into the state of your system and control over its coordination.\"), mdx(\"p\", null, \"Warthog Server has support for reporting federated \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/platform/performance/\"\n  }), \"tracing\"), \" information from the gateway. In order to support the gateway with detailed timing and error information, federated services expose their own tracing information per-fetch in their extensions, which are consumed by the gateway and merged together in order to be emitted to the Warthog metrics ingress. To enable this functionality, make sure the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"ENGINE_API_KEY\"), \" is set in the environment for your gateway server and ensure that all federated services and the gateway are running \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog-server\"), \" version \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"2.7.0\"), \" or greater. Also, ensure that federated services do not have the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"ENGINE_API_KEY\"), \" environment variable set.\"), mdx(\"p\", null, \"Traces will be reported in the shape of the query plan, with each unique fetch to a federated service reporting timing and error data.\"), mdx(\"div\", {\n    style: {\n      \"textAlign\": \"center\"\n    }\n  }, mdx(\"img\", {\n    src: \"/federated_trace-62c533de250ddb07feb4d443394fab02.png\",\n    alt: \"Federated Trace\"\n  })), mdx(\"p\", null, \"Operation-level statistics will still be collected over the operations sent by the client, and those operations will be validated as part of the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"service:check\"), \" validation workflow.\"), mdx(\"h2\", {\n    \"id\": \"validating-changes-to-the-graph\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#validating-changes-to-the-graph\",\n    \"aria-label\": \"validating changes to the graph permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Validating changes to the graph\"), mdx(\"p\", null, \"Federation allows teams to work independently on federated services without needing to coordinate over an all-encompassing schema. However, this increase in autonomy requires control to ensure that teams that operate on different services are respecting \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.warthog.dev/docs/warthog-server/federation/federation-spec/\"\n  }), \"defined dependencies\"), \" and not breaking the ability for the graph to compose. The Warthog platform provides tools to help ensure that this increase in autonomy doesn't come at a cost to stability.\"), mdx(\"p\", null, \"In particular, along with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.warthog.dev/docs/platform/schema-validation/\"\n  }), \"validating overall schema changes against known operations\"), \", running \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:check\"), \" for a federated service will ensure that the overall graph still composes to a valid schema, and will output any violated dependencies if present.\"), mdx(\"p\", null, \"With a federated graph, use the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:check\"), \" command to validate individual service changes by adding the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"--serviceName\"), \" flag.\"), mdx(\"p\", null, \"When running \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:check\"), \" on a federated service, Engine will run composition on the proposed capabilities with the current list of federated services and their capabilities, making sure that the composition is successful. That composed schema will then be diff'ed against the most recently registered schema and validate that those changes are safe. If composition fails, then validation ends and the results will be returned to the user. Note that running \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:check\"), \" will never update the graph.\"), mdx(\"p\", null, \"There are two types of failures that can occur during validation: failed usage checks and failed composition. Failed usage checks are failures due to breaking changes, like removing a field that an active client is querying. Failed composition, on the other hand, is a failure due to inability to compose the graph, like missing an @key for an extended type.\"), mdx(\"h3\", {\n    \"id\": \"handling-composition-failure\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#handling-composition-failure\",\n    \"aria-label\": \"handling composition failure permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Handling composition failure\"), mdx(\"p\", null, \"In general, an \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:push\"), \" should only be run after an \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:check\"), \" has passed, but even so, due to changes in \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"other\"), \" services, it's possible that the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:push\"), \" command will encounter composition errors. When this happens, the federated service will still be updated as long as its capabilities are spec-compliant, but \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"the graph will not be updated\"), \". This means that a new schema will not be associated nor will the gateway's \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#managed-configuration\"\n  }), \"managed configuration\"), \" be updated.\"), mdx(\"p\", null, \"An example output of this behavior looks like this:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-text line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"~$ warthog service:push --serviceName=\\\"launches\\\" \\\\\\n                      --serviceURL=\\\"http://launches-graphql.svc.cluster.local:4001/\\\" \\\\\\n                      --endpoint=\\\"http://localhost:4001/\\\"\\n  \\u2714 Loading Warthog Project\\n  \\u2714 Loading Warthog Project\\n  \\u2714 Uploading service to Engine\\n\\n\\nThe 'launches' service for the 'space-explorer@current' graph was updated\\n\\n*THE SERVICE UPDATE RESULTED IN COMPOSITION ERRORS.*\\n\\nComposition errors must be resolved before the graph's schema or corresponding gateway can be updated.\\nFor more information, see https://www.warthog.dev/docs/warthog-server/federation/errors/\\n\\n\\nError   [launches] Mutation.createLaunch -> requires the field `launch` to be marked as @external.\\n\\nThe gateway for the 'space-explorer@current' graph was NOT updated with a new schema\"), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"p\", null, \"The reasoning behind this functionality is that the service registry should always be the source of truth for what is running in your infrastructure. Even if that means that composition is failing in your infrastructure, the service registry should reflect that. However, you still want your gateway to function as it has been before the service deployment. Additionally, this functionality can be used to make dependent changes, like smoothly migrating a field from one service to another or introducing a circular service dependency.\"), mdx(\"h2\", {\n    \"id\": \"integrating-with-your-deployment-pipeline\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#integrating-with-your-deployment-pipeline\",\n    \"aria-label\": \"integrating with your deployment pipeline permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Integrating with your deployment pipeline\"), mdx(\"p\", null, \"As an engineer working on a federated service, you might wonder how to guarantee that the changes you're making to your service are safe changes for the graph as a whole. When rolling out changes to a federated service, we recommend the following worflow:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Run validation on every commit through CI using \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:check\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Merge in a backwards-compatible PR that has passed schema validation\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Deploy changes to the federated service in your infrastructure\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Let all replicas finish deploying\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Call \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:push\"), \" to update the federated service\")), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-text line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"~$ warthog service:push --serviceName=\\\"launches\\\" \\\\\\n                      --serviceURL=\\\"http://launches-graphql.svc.cluster.local:4001/\\\" \\\\\\n                      --endpoint=\\\"http://localhost:4001/\\\"\\n  \\u2714 Loading Warthog Project\\n  \\u2714 Uploading service to Engine\\n\\nThe 'registry' service for the 'space-explorer@current' graph was updated\\n\\nThe gateway for the 'space-explorer@current' graph was updated with a new schema, composed from the updated 'launches' service\\n\\nid      graph             variant\\n\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\naz329e  space-explorer    current\"), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"What's the difference between \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"serviceURL\"), \" and \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"endpoint\"), \" parameters? The \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"endpoint\"), \" parameter controls the endpoint where the schema will be fetched from at composition, whereas \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"serviceURL\"), \" controls what URL the gateway will query at runtime. This is especially useful because federated services \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"should not be publicly accessible\"), \", so the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"endpoint\"), \" might point to a locally running server or a file, whereas the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"serviceURL\"), \" should be a URL accessible to the gateway.\")), mdx(\"p\", null, \"It's important to make sure that any possible end-user effect from the changes to the graph have been identified, and it's similarly important to strive for backwards-compatible changes to limit those effects. The reason for waiting for the service to completely roll over before registering it is that if some services are still exposing the previous configuration, they might elicit failures for operations the gateway has planned with the new configuration.\"), mdx(\"h3\", {\n    \"id\": \"diving-into-servicepush\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#diving-into-servicepush\",\n    \"aria-label\": \"diving into servicepush permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Diving into service:push\"), mdx(\"p\", null, \"Every time that \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:push\"), \" is called for a federated service, it not only registers the federated service to the graph, but it also updates the managed configuration files that the gateway has access to. Because the graph is dynamically changing, it's possible for composition errors to occur for a \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"service:push\"), \" even after a \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"service:check\"), \" has succeeded if other federated services changed in the interim. For this reason, updating a federated service will re-trigger composition in the cloud, ensuring that the federated services still compose to form a complete graph before provisioning the managed configuration. The workflow behind the scenes can be summed up as follows:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The partial schema is uploaded to a secure location and indexed\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The federated service is updated in the registry to point to the partial schema\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"All federated services are composed in the cloud to produce a new complete schema\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"If composition fails, the command exits and emits errors\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"If composition succeeds, the top-level managed configuration file is updated in-place to point to the updated set of federated services\")), mdx(\"p\", null, \"On the other side of the equation sits the gateway. The gateway is constantly listening for changes to the top-level managed configuration file. The location of the managed configuration file is guarded by using a hash of the API key, provisioned ahead of time so as not to affect reliability. The life-cycle of dynamic configuration updates is as follows:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The gateway listens for updates to its managed configuration\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"On update, the gateway downloads configuration for each federated service in parallel\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The gateway performs composition over the managed configuration to update query planning\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The gateway continues to resolve in-flight requests with the previous configuration while using the updated configuration for all new requests\")), mdx(\"h3\", {\n    \"id\": \"reliability-and-security\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#reliability-and-security\",\n    \"aria-label\": \"reliability and security permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Reliability and security\"), mdx(\"p\", null, \"The managed configuration for the Warthog gateway is exposed through \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://cloud.google.com/storage\"\n  }), \"Google Cloud Storage\"), \". For all API keys, the Warthog Graph Manager provisions a public file accessible via the hash of the API key. In the event that managed configuration is inaccessible due to an outage in Google's Cloud Storage service, the gateway will continue to serve the last-known configuration. In the event that Warthog Graph Manager API is down, changes to managed configuration will be stalled but the last-published configuration files will still be accessible via GCS.\"), mdx(\"h3\", {\n    \"id\": \"using-variants-to-control-rollout\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#using-variants-to-control-rollout\",\n    \"aria-label\": \"using variants to control rollout permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Using variants to control rollout\"), mdx(\"p\", null, \"With \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#managed-configuration\"\n  }), \"managed federation\"), \", you have the ability to control which version of your graph a fleet of gateways are running with. For the majority of deployments, rolling over all of your gateways to a new schema version is a good strategy, since changes should be checked to be backwards compatible using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/platform/schema-validation/\"\n  }), \"schema validation\"), \". However, changes at the gateway level may involve a variety of different updates, like transferring type ownership from one service to another. In the case that your infrastructure requires more advanced deployment strategies, we recommend using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/platform/schema-registry/#registering-schemas-to-a-variant\"\n  }), \"graph variants\"), \" to manage different fleets of gateways running with different configurations.\"), mdx(\"p\", null, \"For instance, in order to have a canary deployment, you might maintain two production graphs in the graph manager, one called \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"prod\"), \" and one called \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"prod-canary\"), \". Your deployment of a change to some federated service named \\\"foo\\\" might look something like this:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Check changes in \\\"foo\\\" against \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"prod\"), \" and \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"prod-canary\"), \":\", mdx(\"div\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }), mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-text line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:check --tag=prod --serviceName=foo && warthog service:check --tag=prod-canary --serviceName=foo\"), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }))))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Deploy changes to \\\"foo\\\" into your production environment. (\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Note: This will not roll out changes to the gateway yet\"), \")\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Roll over the \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"prod-canary\"), \" graph, containing one gateway container, using \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:push --tag=prod-canary --serviceName=foo\"), \". (\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Note: If composition fails due to intermediate changes to the canary graph, new configuration will not be rolled out\"), \")\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Wait for health checks to pass against the canary, watch dashboards, etc.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"After the canary is stable, roll out the changes to the rest of production using \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:push --tag=prod --serviceName=foo\"), \".\")), mdx(\"p\", null, \"Because you can \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/platform/schema-registry/#associating-metrics-with-a-variant\"\n  }), \"tag metrics with variants\"), \" as well, you can use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://engine.warthog.dev\"\n  }), \"Warthog Graph Manager\"), \" to verify a canary's performance before rolling out changes to the rest of the graph. You can also use a similar strategy with variants to support a variety of other advanced deployment workflows, like blue/green deployments.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\"title\":\"Managing a federated graph\",\"description\":\"How to run, manage, and deploy a federated graph\"}\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`When organizations roll out GraphQL across multiple teams, coordinating and maintaining a single monolithic schema becomes difficult and error-prone. `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.warthog.dev/docs/warthog-server/federation/introduction/\"\n      }}>{`Warthog Federation`}</a>{` solves this problem by enabling teams to build a distributed graph composed of multiple services declaratively without fragile stitching code.`}</p>\n    <p>{`While federation empowers teams to scale GraphQL much faster than before, it also introduces complexity that comes along with running a distributed system. Teams need federation-aware tooling in order to help them coordinate updating the graph whenever an underlying service changes. The `}<strong parentName=\"p\">{`Warthog Graph Manager`}</strong>{` is a turnkey solution to this problem that includes managed service deployments for free, as well as federated service checks and federation-aware analytics for teams on a paid plan.`}</p>\n    <h2 {...{\n      \"id\": \"what-youll-learn\"\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#what-youll-learn\",\n        \"aria-label\": \"what youll learn permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`What you'll learn`}</h2>\n    <p>{`Based on our experience helping companies scale GraphQL across their organizations, there are several steps teams need to take to successfully run a federated graph in production. We recommend running through these steps after you've already `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.warthog.dev/docs/warthog-server/federation/implementing/\"\n      }}>{`implemented a federated graph`}</a>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#registering-federated-services\"\n        }}>{`Register all federated services`}</a>{` with the Warthog Graph Manager.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#connecting-warthog-server-to-the-graph-manager\"\n        }}>{`Configure Warthog Server`}</a>{` as a gateway to connect to the graph manager.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#metrics-and-observability\"\n        }}>{`Turn on metrics`}</a>{` for your federated graph.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#validating-changes-to-the-graph\"\n        }}>{`Validate changes`}</a>{` to the graph against production traffic.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#integrating-with-your-deployment-pipeline\"\n        }}>{`Integrate your federated graph`}</a>{` into your deployment pipeline.`}</li>\n    </ol>\n    {\n      /* TODO: For current Warthog platform users looking to migrate their monolithic API to a federated graph, follow our [platform migration guide](#platform-migration-guide). */\n    }\n    <h2 {...{\n      \"id\": \"core-concepts\"\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#core-concepts\",\n        \"aria-label\": \"core concepts permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Core concepts`}</h2>\n    <p>{`Federation introduces several new terms that are necessary for understanding the following steps in this article:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Graph`}</strong>{`: A single API composed of multiple federated services`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Federated services`}</strong>{`: The underlying microservices that make up a graph. These services are standalone GraphQL servers that can be built in any language, since federation is spec-compliant GraphQL.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Capabilities`}</strong>{`: The types a service extends and adds to the graph. A service's capabilities describe how a service interacts with other portions of the graph.`}</li>\n    </ul>\n    <p>{`When you put these concepts together, a `}<strong parentName=\"p\">{`graph`}</strong>{` is composed of `}<strong parentName=\"p\">{`federated services`}</strong>{` that expose their `}<strong parentName=\"p\">{`capabilities`}</strong>{` in order to interact with each other.`}</p>\n    <p>{`The rest of this article focuses on managing a federated graph with the Warthog platform. It assumes you've already implemented a federated graph. To implement a graph, read the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.warthog.dev/docs/warthog-server/federation/introduction/\"\n      }}>{`federation guide for Warthog Server`}</a>{` and come back to these steps once you're ready to run your graph in production.`}</p>\n    <h2 {...{\n      \"id\": \"registering-federated-services\"\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#registering-federated-services\",\n        \"aria-label\": \"registering federated services permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Registering federated services`}</h2>\n    <p>{`If you're running a distributed GraphQL infrastructure, where federated services `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.warthog.dev/docs/warthog-server/federation/federation-spec/#fetch-service-capabilities\"\n      }}>{`compose`}</a>{` to form a complete schema, tracking the history of the graph and its underlying services is essential. Running `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:push`}</code>{` from within CI/CD on any federated service registers the overall schema of the graph and updates the graph's `}<a parentName=\"p\" {...{\n        \"href\": \"#managed-configuration\"\n      }}>{`managed configuration`}</a>{`.`}</p>\n    <p>{`To push a single federated service to Warthog, run `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:push`}</code>{` in CI/CD with the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`--serviceName`}</code>{`, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`--endpoint`}</code>{`, and `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`--serviceURL`}</code>{` tags. The CLI will know where to fetch your service's capabilities based on the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`--endpoint`}</code>{` flag, and the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`--serviceURL`}</code>{` flag indicates where the federated service can be reached by the gateway. The `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`--serviceName`}</code>{` flag is used as a unique identifier for each federated service.`}</p>\n    <p>{`Make sure you have a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`.env`}</code>{` file locally with your ENGINE_API_KEY defined! To get an API key, click `}<a parentName=\"p\" {...{\n        \"href\": \"https://engine.warthog.dev\"\n      }}>{`here`}</a>{`. To create a new `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`.env`}</code>{` file, copy your API key into the following command from your terminal:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"bash\"\n    }}><pre parentName=\"div\" {...{\n        \"style\": {\n          \"counterReset\": \"linenumber NaN\"\n        },\n        \"className\": \"language-bash line-numbers\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-bash\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token builtin class-name\"\n          }}>{`echo`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`\"ENGINE_API_KEY=<your API key here>\"`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`>>`}</span>{` .env`}</code><span parentName=\"pre\" {...{\n          \"aria-hidden\": \"true\",\n          \"className\": \"line-numbers-rows\",\n          \"style\": {\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0\"\n          }\n        }}><span parentName=\"span\"></span></span></pre></div>\n    <p>{`As an example, running service push on a “launches” federated service might look like:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"bash\"\n    }}><pre parentName=\"div\" {...{\n        \"style\": {\n          \"counterReset\": \"linenumber NaN\"\n        },\n        \"className\": \"language-bash line-numbers\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-bash\"\n        }}>{`warthog service:push --serviceName`}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span><span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`\"launches\"`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`\\\\`}</span>{`\n                    --serviceURL`}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span><span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`\"http://launches-graphql.svc.cluster.local:4001/\"`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`\\\\`}</span>{`\n                    --endpoint`}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span><span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`\"http://localhost:4001/\"`}</span></code><span parentName=\"pre\" {...{\n          \"aria-hidden\": \"true\",\n          \"className\": \"line-numbers-rows\",\n          \"style\": {\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0\"\n          }\n        }}><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span></span></pre></div>\n    <p>{`Pushing a federated service to Warthog will update the `}<a parentName=\"p\" {...{\n        \"href\": \"#inspecting-your-graph\"\n      }}>{`Services tab`}</a>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`For production support, using `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`warthog service:push`}</code>{` should be an automated process that integrates with your continuous delivery pipeline. For more information, see integrating with CI/CD in the `}<a parentName=\"p\" {...{\n          \"href\": \"#managed-configuration\"\n        }}>{`managed federation section`}</a>{`.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"removing-a-service-from-the-registry\"\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#removing-a-service-from-the-registry\",\n        \"aria-label\": \"removing a service from the registry permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Removing a service from the registry`}</h3>\n    <p>{`Removing an federated service from the graph works similarly to registering a service. To delete a service, call `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:delete`}</code>{`. You can also specify the graph variant you want to remove.`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"bash\"\n    }}><pre parentName=\"div\" {...{\n        \"style\": {\n          \"counterReset\": \"linenumber NaN\"\n        },\n        \"className\": \"language-bash line-numbers\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-bash\"\n        }}>{`warthog service:delete --serviceName`}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{`launches --tag`}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{`staging`}</code><span parentName=\"pre\" {...{\n          \"aria-hidden\": \"true\",\n          \"className\": \"line-numbers-rows\",\n          \"style\": {\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0\"\n          }\n        }}><span parentName=\"span\"></span></span></pre></div>\n    <blockquote>\n      <p parentName=\"blockquote\">{`WARNING! This action cannot be reversed. Also, once deleted, service names cannot be reused within the same graph.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"inspecting-your-graph\"\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#inspecting-your-graph\",\n        \"aria-label\": \"inspecting your graph permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Inspecting your graph`}</h3>\n    <p>{`To view the federated services that make up your graph, you can use both the Warthog CLI as well as the Warthog platform.`}</p>\n    <p>{`Run `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:list`}</code>{` in the command line to see a snapshot of the services that make up your graph, including their endpoints and when they were last updated.`}</p>\n    <p>{`Here's an example of what running `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:list`}</code>{` will look like:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"text\"\n    }}><pre parentName=\"div\" {...{\n        \"style\": {\n          \"counterReset\": \"linenumber NaN\"\n        },\n        \"className\": \"language-text line-numbers\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-text\"\n        }}>{`~$ warthog service:list\n  ✔ Loading Warthog Project\n  ✔ Fetching list of services for graph service-list-federation-demo\n\nname       URL                            last updated\n─────────  ─────────────────────────────  ────────────────────────\nAccounts   http://localhost:4001/graphql  3 July 2019 (2 days ago)\nInventory  http://localhost:4004/graphql  3 July 2019 (2 days ago)\nProducts   http://localhost:4003/graphql  3 July 2019 (2 days ago)\nReviews    http://localhost:4002/graphql  3 July 2019 (2 days ago)\n\nView full details at: https://engine.warthog.dev/graph/service-list-federation-demo/service-list`}</code><span parentName=\"pre\" {...{\n          \"aria-hidden\": \"true\",\n          \"className\": \"line-numbers-rows\",\n          \"style\": {\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0\"\n          }\n        }}><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span></span></pre></div>\n    <p>{`You can see additional details about the services registered to the graph, such as each service's capabilities, in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://engine.warthog.dev/\"\n      }}>{`Warthog Dashboard`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"connecting-warthog-server-to-the-graph-manager\"\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#connecting-warthog-server-to-the-graph-manager\",\n        \"aria-label\": \"connecting warthog server to the graph manager permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Connecting Warthog Server to the graph manager`}</h2>\n    <p>{`Federation is made up of two parts: federated services and a `}<strong parentName=\"p\">{`gateway`}</strong>{` to compose the complete graph and execute federated queries. Warthog Server comes with a `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.warthog.dev/docs/warthog-server/federation/implementing/#running-a-gateway\"\n      }}>{`gateway`}</a>{` that composes a federated graph, but you could also implement a gateway in another language.`}</p>\n    <p>{`While running in development, it's sufficient to run the gateway with a static service list and use introspection to support the gateway's configuration. When running a gateway in production, however, it's important that the uptime of your gateway is not impacted by the uptime of the federated services beneath it. If a gateway fails to introspect a service or if a service fails to compose with the graph, it's paramount that your gateway be resilient to that change and continue to serve traffic with its previous configuration.`}</p>\n    <p>{`For this use case, an Warthog gateway can be created to pick up its configuration from a set of managed files, securely stored during `}<a parentName=\"p\" {...{\n        \"href\": \"#registering-federated-services\"\n      }}>{`service registration`}</a>{`. To use the managed configuration provisioned by the Graph Manager, define `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`ENGINE_API_KEY`}</code>{` in the environment, and construct the gateway and ApolloServer like so:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"js\"\n    }}><pre parentName=\"div\" {...{\n        \"style\": {\n          \"counterReset\": \"linenumber NaN\"\n        },\n        \"className\": \"language-js line-numbers\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`const`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{` ApolloServer `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`require`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`'warthog-server'`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`const`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{` ApolloGateway `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`require`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`'@warthog/gateway'`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n\n`}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`// Managed configuration will be picked up using the API key`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`const`}</span>{` gateway `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`new`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`ApolloGateway`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n\n`}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`// Pass the gateway to Warthog Server`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`const`}</span>{` server `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`new`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token class-name\"\n          }}>{`ApolloServer`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{` gateway `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n\nserver`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`listen`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`then`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token parameter\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`{`}</span>{` url `}<span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`}`}</span></span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n  console`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`log`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token template-string\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"token template-punctuation string\"\n            }}>{`\\``}</span><span parentName=\"span\" {...{\n              \"className\": \"token string\"\n            }}>{`🚀 Server ready at `}</span><span parentName=\"span\" {...{\n              \"className\": \"token interpolation\"\n            }}><span parentName=\"span\" {...{\n                \"className\": \"token interpolation-punctuation punctuation\"\n              }}>{`\\${`}</span>{`url`}<span parentName=\"span\" {...{\n                \"className\": \"token interpolation-punctuation punctuation\"\n              }}>{`}`}</span></span><span parentName=\"span\" {...{\n              \"className\": \"token template-punctuation string\"\n            }}>{`\\``}</span></span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span></code><span parentName=\"pre\" {...{\n          \"aria-hidden\": \"true\",\n          \"className\": \"line-numbers-rows\",\n          \"style\": {\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0\"\n          }\n        }}><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span></span></pre></div>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The managed configuration will default to using the `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`'current'`}</code>{` variant.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"managed-configuration\"\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#managed-configuration\",\n        \"aria-label\": \"managed configuration permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Managed configuration`}</h3>\n    <p>{`Managed configuration is the concept of allowing the gateway to update dynamically in response to service changes. In principle, it's important to separate the reliability of your graph from the reliability of your services. For that reason, we recommend running federation in production using a managed configuration, where the gateway picks up config changes not from introspection, but from a set of files owned by your graph describing its current state.`}</p>\n    <p>{`On `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:push`}</code>{`, the service registry writes configuration files to a cloud file system, stored securely and accessible by your API key. These configuration files detail which federated services are part of the graph, metadata about the federated services, including the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`serviceURL`}</code>{` specified in the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`push`}</code>{` command, and the partial schema of that federated service. By default, when the Warthog gateway is instantiated with an API key rather than a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`serviceList`}</code>{`, it will poll for that managed config to pick up changes and smoothly roll over to the new service configuration, draining in-flight requests while beginning to generate query plans for incoming requests against the new config.`}</p>\n    <p>{`Because configuration changes can affect the query planner, it's highly recommended to `}<strong parentName=\"p\">{`only call `}<code parentName=\"strong\" {...{\n          \"className\": \"language-text\"\n        }}>{`warthog service:push`}</code>{` after all replicas of an federated service have deployed`}</strong>{`.`}</p>\n    <h2 {...{\n      \"id\": \"metrics-and-observability\"\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#metrics-and-observability\",\n        \"aria-label\": \"metrics and observability permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Metrics and observability`}</h2>\n    <p>{`Like any distributed architecture, you should make sure that your federated graph has proper observability, monitoring, and automation to ensure reliability and performance of both your gateway and the federated services underneath it. Serving your GraphQL API from a distributed architecture has many benefits, like productivity, isolation, and being able to match the right services with the right runtimes. Operating a distributed system also has more complexity and points of failure than operating a monolith, and with that complexity comes a need to heighten observability into the state of your system and control over its coordination.`}</p>\n    <p>{`Warthog Server has support for reporting federated `}<a parentName=\"p\" {...{\n        \"href\": \"/platform/performance/\"\n      }}>{`tracing`}</a>{` information from the gateway. In order to support the gateway with detailed timing and error information, federated services expose their own tracing information per-fetch in their extensions, which are consumed by the gateway and merged together in order to be emitted to the Warthog metrics ingress. To enable this functionality, make sure the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`ENGINE_API_KEY`}</code>{` is set in the environment for your gateway server and ensure that all federated services and the gateway are running `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog-server`}</code>{` version `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`2.7.0`}</code>{` or greater. Also, ensure that federated services do not have the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`ENGINE_API_KEY`}</code>{` environment variable set.`}</p>\n    <p>{`Traces will be reported in the shape of the query plan, with each unique fetch to a federated service reporting timing and error data.`}</p>\n    <div style=\"text-align:center\">\n  <img src=\"/federated_trace-62c533de250ddb07feb4d443394fab02.png\" alt=\"Federated Trace\" />\n    </div>\n    <p>{`Operation-level statistics will still be collected over the operations sent by the client, and those operations will be validated as part of the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`service:check`}</code>{` validation workflow.`}</p>\n    <h2 {...{\n      \"id\": \"validating-changes-to-the-graph\"\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#validating-changes-to-the-graph\",\n        \"aria-label\": \"validating changes to the graph permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Validating changes to the graph`}</h2>\n    <p>{`Federation allows teams to work independently on federated services without needing to coordinate over an all-encompassing schema. However, this increase in autonomy requires control to ensure that teams that operate on different services are respecting `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.warthog.dev/docs/warthog-server/federation/federation-spec/\"\n      }}>{`defined dependencies`}</a>{` and not breaking the ability for the graph to compose. The Warthog platform provides tools to help ensure that this increase in autonomy doesn't come at a cost to stability.`}</p>\n    <p>{`In particular, along with `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.warthog.dev/docs/platform/schema-validation/\"\n      }}>{`validating overall schema changes against known operations`}</a>{`, running `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:check`}</code>{` for a federated service will ensure that the overall graph still composes to a valid schema, and will output any violated dependencies if present.`}</p>\n    <p>{`With a federated graph, use the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:check`}</code>{` command to validate individual service changes by adding the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`--serviceName`}</code>{` flag.`}</p>\n    <p>{`When running `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:check`}</code>{` on a federated service, Engine will run composition on the proposed capabilities with the current list of federated services and their capabilities, making sure that the composition is successful. That composed schema will then be diff'ed against the most recently registered schema and validate that those changes are safe. If composition fails, then validation ends and the results will be returned to the user. Note that running `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:check`}</code>{` will never update the graph.`}</p>\n    <p>{`There are two types of failures that can occur during validation: failed usage checks and failed composition. Failed usage checks are failures due to breaking changes, like removing a field that an active client is querying. Failed composition, on the other hand, is a failure due to inability to compose the graph, like missing an @key for an extended type.`}</p>\n    <h3 {...{\n      \"id\": \"handling-composition-failure\"\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#handling-composition-failure\",\n        \"aria-label\": \"handling composition failure permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Handling composition failure`}</h3>\n    <p>{`In general, an `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:push`}</code>{` should only be run after an `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:check`}</code>{` has passed, but even so, due to changes in `}<em parentName=\"p\">{`other`}</em>{` services, it's possible that the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:push`}</code>{` command will encounter composition errors. When this happens, the federated service will still be updated as long as its capabilities are spec-compliant, but `}<strong parentName=\"p\">{`the graph will not be updated`}</strong>{`. This means that a new schema will not be associated nor will the gateway's `}<a parentName=\"p\" {...{\n        \"href\": \"#managed-configuration\"\n      }}>{`managed configuration`}</a>{` be updated.`}</p>\n    <p>{`An example output of this behavior looks like this:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"text\"\n    }}><pre parentName=\"div\" {...{\n        \"style\": {\n          \"counterReset\": \"linenumber NaN\"\n        },\n        \"className\": \"language-text line-numbers\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-text\"\n        }}>{`~$ warthog service:push --serviceName=\"launches\" \\\\\n                      --serviceURL=\"http://launches-graphql.svc.cluster.local:4001/\" \\\\\n                      --endpoint=\"http://localhost:4001/\"\n  ✔ Loading Warthog Project\n  ✔ Loading Warthog Project\n  ✔ Uploading service to Engine\n\n\nThe 'launches' service for the 'space-explorer@current' graph was updated\n\n*THE SERVICE UPDATE RESULTED IN COMPOSITION ERRORS.*\n\nComposition errors must be resolved before the graph's schema or corresponding gateway can be updated.\nFor more information, see https://www.warthog.dev/docs/warthog-server/federation/errors/\n\n\nError   [launches] Mutation.createLaunch -> requires the field \\`launch\\` to be marked as @external.\n\nThe gateway for the 'space-explorer@current' graph was NOT updated with a new schema`}</code><span parentName=\"pre\" {...{\n          \"aria-hidden\": \"true\",\n          \"className\": \"line-numbers-rows\",\n          \"style\": {\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0\"\n          }\n        }}><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span></span></pre></div>\n    <p>{`The reasoning behind this functionality is that the service registry should always be the source of truth for what is running in your infrastructure. Even if that means that composition is failing in your infrastructure, the service registry should reflect that. However, you still want your gateway to function as it has been before the service deployment. Additionally, this functionality can be used to make dependent changes, like smoothly migrating a field from one service to another or introducing a circular service dependency.`}</p>\n    <h2 {...{\n      \"id\": \"integrating-with-your-deployment-pipeline\"\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#integrating-with-your-deployment-pipeline\",\n        \"aria-label\": \"integrating with your deployment pipeline permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Integrating with your deployment pipeline`}</h2>\n    <p>{`As an engineer working on a federated service, you might wonder how to guarantee that the changes you're making to your service are safe changes for the graph as a whole. When rolling out changes to a federated service, we recommend the following worflow:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Run validation on every commit through CI using `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`warthog service:check`}</code></li>\n      <li parentName=\"ol\">{`Merge in a backwards-compatible PR that has passed schema validation`}</li>\n      <li parentName=\"ol\">{`Deploy changes to the federated service in your infrastructure`}</li>\n      <li parentName=\"ol\">{`Let all replicas finish deploying`}</li>\n      <li parentName=\"ol\">{`Call `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`warthog service:push`}</code>{` to update the federated service`}</li>\n    </ol>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"text\"\n    }}><pre parentName=\"div\" {...{\n        \"style\": {\n          \"counterReset\": \"linenumber NaN\"\n        },\n        \"className\": \"language-text line-numbers\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-text\"\n        }}>{`~$ warthog service:push --serviceName=\"launches\" \\\\\n                      --serviceURL=\"http://launches-graphql.svc.cluster.local:4001/\" \\\\\n                      --endpoint=\"http://localhost:4001/\"\n  ✔ Loading Warthog Project\n  ✔ Uploading service to Engine\n\nThe 'registry' service for the 'space-explorer@current' graph was updated\n\nThe gateway for the 'space-explorer@current' graph was updated with a new schema, composed from the updated 'launches' service\n\nid      graph             variant\n──────  ────────────────  ───────\naz329e  space-explorer    current`}</code><span parentName=\"pre\" {...{\n          \"aria-hidden\": \"true\",\n          \"className\": \"line-numbers-rows\",\n          \"style\": {\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0\"\n          }\n        }}><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span></span></pre></div>\n    <blockquote>\n      <p parentName=\"blockquote\">{`What's the difference between `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`serviceURL`}</code>{` and `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`endpoint`}</code>{` parameters? The `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`endpoint`}</code>{` parameter controls the endpoint where the schema will be fetched from at composition, whereas `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`serviceURL`}</code>{` controls what URL the gateway will query at runtime. This is especially useful because federated services `}<strong parentName=\"p\">{`should not be publicly accessible`}</strong>{`, so the `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`endpoint`}</code>{` might point to a locally running server or a file, whereas the `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`serviceURL`}</code>{` should be a URL accessible to the gateway.`}</p>\n    </blockquote>\n    <p>{`It's important to make sure that any possible end-user effect from the changes to the graph have been identified, and it's similarly important to strive for backwards-compatible changes to limit those effects. The reason for waiting for the service to completely roll over before registering it is that if some services are still exposing the previous configuration, they might elicit failures for operations the gateway has planned with the new configuration.`}</p>\n    <h3 {...{\n      \"id\": \"diving-into-servicepush\"\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#diving-into-servicepush\",\n        \"aria-label\": \"diving into servicepush permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Diving into service:push`}</h3>\n    <p>{`Every time that `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:push`}</code>{` is called for a federated service, it not only registers the federated service to the graph, but it also updates the managed configuration files that the gateway has access to. Because the graph is dynamically changing, it's possible for composition errors to occur for a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`service:push`}</code>{` even after a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`service:check`}</code>{` has succeeded if other federated services changed in the interim. For this reason, updating a federated service will re-trigger composition in the cloud, ensuring that the federated services still compose to form a complete graph before provisioning the managed configuration. The workflow behind the scenes can be summed up as follows:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The partial schema is uploaded to a secure location and indexed`}</li>\n      <li parentName=\"ol\">{`The federated service is updated in the registry to point to the partial schema`}</li>\n      <li parentName=\"ol\">{`All federated services are composed in the cloud to produce a new complete schema`}</li>\n      <li parentName=\"ol\">{`If composition fails, the command exits and emits errors`}</li>\n      <li parentName=\"ol\">{`If composition succeeds, the top-level managed configuration file is updated in-place to point to the updated set of federated services`}</li>\n    </ol>\n    <p>{`On the other side of the equation sits the gateway. The gateway is constantly listening for changes to the top-level managed configuration file. The location of the managed configuration file is guarded by using a hash of the API key, provisioned ahead of time so as not to affect reliability. The life-cycle of dynamic configuration updates is as follows:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The gateway listens for updates to its managed configuration`}</li>\n      <li parentName=\"ol\">{`On update, the gateway downloads configuration for each federated service in parallel`}</li>\n      <li parentName=\"ol\">{`The gateway performs composition over the managed configuration to update query planning`}</li>\n      <li parentName=\"ol\">{`The gateway continues to resolve in-flight requests with the previous configuration while using the updated configuration for all new requests`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"reliability-and-security\"\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#reliability-and-security\",\n        \"aria-label\": \"reliability and security permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Reliability and security`}</h3>\n    <p>{`The managed configuration for the Warthog gateway is exposed through `}<a parentName=\"p\" {...{\n        \"href\": \"https://cloud.google.com/storage\"\n      }}>{`Google Cloud Storage`}</a>{`. For all API keys, the Warthog Graph Manager provisions a public file accessible via the hash of the API key. In the event that managed configuration is inaccessible due to an outage in Google's Cloud Storage service, the gateway will continue to serve the last-known configuration. In the event that Warthog Graph Manager API is down, changes to managed configuration will be stalled but the last-published configuration files will still be accessible via GCS.`}</p>\n    <h3 {...{\n      \"id\": \"using-variants-to-control-rollout\"\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#using-variants-to-control-rollout\",\n        \"aria-label\": \"using variants to control rollout permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Using variants to control rollout`}</h3>\n    <p>{`With `}<a parentName=\"p\" {...{\n        \"href\": \"#managed-configuration\"\n      }}>{`managed federation`}</a>{`, you have the ability to control which version of your graph a fleet of gateways are running with. For the majority of deployments, rolling over all of your gateways to a new schema version is a good strategy, since changes should be checked to be backwards compatible using `}<a parentName=\"p\" {...{\n        \"href\": \"/platform/schema-validation/\"\n      }}>{`schema validation`}</a>{`. However, changes at the gateway level may involve a variety of different updates, like transferring type ownership from one service to another. In the case that your infrastructure requires more advanced deployment strategies, we recommend using `}<a parentName=\"p\" {...{\n        \"href\": \"/platform/schema-registry/#registering-schemas-to-a-variant\"\n      }}>{`graph variants`}</a>{` to manage different fleets of gateways running with different configurations.`}</p>\n    <p>{`For instance, in order to have a canary deployment, you might maintain two production graphs in the graph manager, one called `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`prod`}</code>{` and one called `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`prod-canary`}</code>{`. Your deployment of a change to some federated service named \"foo\" might look something like this:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Check changes in \"foo\" against `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`prod`}</code>{` and `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`prod-canary`}</code>{`:`}<div parentName=\"li\" {...{\n          \"className\": \"gatsby-highlight\",\n          \"data-language\": \"text\"\n        }}><pre parentName=\"div\" {...{\n            \"style\": {\n              \"counterReset\": \"linenumber NaN\"\n            },\n            \"className\": \"language-text line-numbers\"\n          }}><code parentName=\"pre\" {...{\n              \"className\": \"language-text\"\n            }}>{`warthog service:check --tag=prod --serviceName=foo && warthog service:check --tag=prod-canary --serviceName=foo`}</code><span parentName=\"pre\" {...{\n              \"aria-hidden\": \"true\",\n              \"className\": \"line-numbers-rows\",\n              \"style\": {\n                \"whiteSpace\": \"normal\",\n                \"width\": \"auto\",\n                \"left\": \"0\"\n              }\n            }}><span parentName=\"span\"></span></span></pre></div></li>\n      <li parentName=\"ol\">{`Deploy changes to \"foo\" into your production environment. (`}<em parentName=\"li\">{`Note: This will not roll out changes to the gateway yet`}</em>{`)`}</li>\n      <li parentName=\"ol\">{`Roll over the `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`prod-canary`}</code>{` graph, containing one gateway container, using `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`warthog service:push --tag=prod-canary --serviceName=foo`}</code>{`. (`}<em parentName=\"li\">{`Note: If composition fails due to intermediate changes to the canary graph, new configuration will not be rolled out`}</em>{`)`}</li>\n      <li parentName=\"ol\">{`Wait for health checks to pass against the canary, watch dashboards, etc.`}</li>\n      <li parentName=\"ol\">{`After the canary is stable, roll out the changes to the rest of production using `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`warthog service:push --tag=prod --serviceName=foo`}</code>{`.`}</li>\n    </ol>\n    <p>{`Because you can `}<a parentName=\"p\" {...{\n        \"href\": \"/platform/schema-registry/#associating-metrics-with-a-variant\"\n      }}>{`tag metrics with variants`}</a>{` as well, you can use `}<a parentName=\"p\" {...{\n        \"href\": \"https://engine.warthog.dev\"\n      }}>{`Warthog Graph Manager`}</a>{` to verify a canary's performance before rolling out changes to the rest of the graph. You can also use a similar strategy with variants to support a variety of other advanced deployment workflows, like blue/green deployments.`}</p>\n    {\n      /* ## Platform migration guide */\n    }\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}