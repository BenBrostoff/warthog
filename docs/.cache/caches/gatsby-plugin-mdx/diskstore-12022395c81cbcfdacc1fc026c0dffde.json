{"expireTime":9007200819376322000,"key":"gatsby-plugin-mdx-entire-payload-9244e840e7fe3d8c43b8b0120b1b3dc8-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"There are many types of schema changes that can be potentially breaking to clients, like removing a field, if made without special consideration. For safety, some organizations take the approach of ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":199,"offset":199},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"never","position":{"start":{"line":2,"column":200,"offset":200},"end":{"line":2,"column":205,"offset":205},"indent":[]}}],"position":{"start":{"line":2,"column":199,"offset":199},"end":{"line":2,"column":206,"offset":206},"indent":[]}},{"type":"text","value":" making these types of changes, but this leads to an ever-growing schema and reduced API flexibility over time. In reality, making these types of changes to a schema can be very safe as long as you have tools in place to ensure that no queries are broken in the process.","position":{"start":{"line":2,"column":206,"offset":206},"end":{"line":2,"column":476,"offset":476},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":476,"offset":476},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Warthog provides a tool to protect for exactly this scenario called ","position":{"start":{"line":4,"column":1,"offset":478},"end":{"line":4,"column":69,"offset":546},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"schema validation","position":{"start":{"line":4,"column":71,"offset":548},"end":{"line":4,"column":88,"offset":565},"indent":[]}}],"position":{"start":{"line":4,"column":69,"offset":546},"end":{"line":4,"column":90,"offset":567},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":4,"column":90,"offset":567},"end":{"line":4,"column":91,"offset":568},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":478},"end":{"line":4,"column":91,"offset":568},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":6,"column":5,"offset":574},"end":{"line":6,"column":10,"offset":579},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":572},"end":{"line":6,"column":12,"offset":581},"indent":[]}},{"type":"text","value":" Schema validation is an Warthog Platform feature available on the ","position":{"start":{"line":6,"column":12,"offset":581},"end":{"line":6,"column":79,"offset":648},"indent":[]}},{"type":"link","title":null,"url":"https://www.warthog.dev/plans/","children":[{"type":"text","value":"Team and Enterprise plans","position":{"start":{"line":6,"column":80,"offset":649},"end":{"line":6,"column":105,"offset":674},"indent":[]}}],"position":{"start":{"line":6,"column":79,"offset":648},"end":{"line":6,"column":138,"offset":707},"indent":[]}},{"type":"text","value":" of ","position":{"start":{"line":6,"column":138,"offset":707},"end":{"line":6,"column":142,"offset":711},"indent":[]}},{"type":"link","title":null,"url":"https://engine.warthog.dev","children":[{"type":"text","value":"Warthog Engine","position":{"start":{"line":6,"column":143,"offset":712},"end":{"line":6,"column":157,"offset":726},"indent":[]}}],"position":{"start":{"line":6,"column":142,"offset":711},"end":{"line":6,"column":186,"offset":755},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":6,"column":186,"offset":755},"end":{"line":6,"column":187,"offset":756},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":572},"end":{"line":6,"column":187,"offset":756},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":570},"end":{"line":6,"column":187,"offset":756},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"How it works","position":{"start":{"line":8,"column":4,"offset":761},"end":{"line":8,"column":16,"offset":773},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":758},"end":{"line":8,"column":16,"offset":773},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Schema validation is run through the Warthog CLI by executing the ","position":{"start":{"line":10,"column":1,"offset":775},"end":{"line":10,"column":67,"offset":841},"indent":[]}},{"type":"inlineCode","value":"warthog service:check","position":{"start":{"line":10,"column":67,"offset":841},"end":{"line":10,"column":90,"offset":864},"indent":[]}},{"type":"text","value":" command. Warthog will generate a diff between your local schema and your most recently registered schema, then validate that the changes are safe by checking if any queries actively running against your graph will be affected.","position":{"start":{"line":10,"column":90,"offset":864},"end":{"line":10,"column":317,"offset":1091},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":775},"end":{"line":10,"column":317,"offset":1091},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here's how it works:","position":{"start":{"line":12,"column":1,"offset":1093},"end":{"line":12,"column":21,"offset":1113},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":1093},"end":{"line":12,"column":21,"offset":1113},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"You run ","position":{"start":{"line":14,"column":4,"offset":1118},"end":{"line":14,"column":12,"offset":1126},"indent":[]}},{"type":"inlineCode","value":"warthog service:check","position":{"start":{"line":14,"column":12,"offset":1126},"end":{"line":14,"column":35,"offset":1149},"indent":[]}},{"type":"text","value":" locally or in CI. The proposed schema is sent to Engine's schema registry.","position":{"start":{"line":14,"column":35,"offset":1149},"end":{"line":14,"column":110,"offset":1224},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":1118},"end":{"line":14,"column":110,"offset":1224},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1115},"end":{"line":14,"column":110,"offset":1224},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Engine creates a diff between the local schema and the most recently published schema in the registry.","position":{"start":{"line":15,"column":4,"offset":1228},"end":{"line":15,"column":106,"offset":1330},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":1228},"end":{"line":15,"column":106,"offset":1330},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1225},"end":{"line":15,"column":106,"offset":1330},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Engine fetches a list of all operations sent to your graph in the last day (time window is ","position":{"start":{"line":16,"column":4,"offset":1334},"end":{"line":16,"column":95,"offset":1425},"indent":[]}},{"type":"link","title":null,"url":"#adjusting-validation-parameters","children":[{"type":"text","value":"configurable","position":{"start":{"line":16,"column":96,"offset":1426},"end":{"line":16,"column":108,"offset":1438},"indent":[]}}],"position":{"start":{"line":16,"column":95,"offset":1425},"end":{"line":16,"column":143,"offset":1473},"indent":[]}},{"type":"text","value":").","position":{"start":{"line":16,"column":143,"offset":1473},"end":{"line":16,"column":145,"offset":1475},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":1334},"end":{"line":16,"column":145,"offset":1475},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1331},"end":{"line":16,"column":145,"offset":1475},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Engine walks through the schema diff change-by-change and compares against the operation list to see if the changes will affect the behavior of any operations.","position":{"start":{"line":17,"column":4,"offset":1479},"end":{"line":17,"column":163,"offset":1638},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":1479},"end":{"line":17,"column":163,"offset":1638},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1476},"end":{"line":17,"column":163,"offset":1638},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Engine returns the schema diff and indicates any breaking changes found.","position":{"start":{"line":18,"column":4,"offset":1642},"end":{"line":18,"column":76,"offset":1714},"indent":[]}}],"position":{"start":{"line":18,"column":4,"offset":1642},"end":{"line":18,"column":76,"offset":1714},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1639},"end":{"line":18,"column":76,"offset":1714},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The CLI prints the output of this check with a link to view more details in the Engine UI.","position":{"start":{"line":19,"column":4,"offset":1718},"end":{"line":19,"column":94,"offset":1808},"indent":[]}}],"position":{"start":{"line":19,"column":4,"offset":1718},"end":{"line":19,"column":94,"offset":1808},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1715},"end":{"line":19,"column":94,"offset":1808},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1115},"end":{"line":19,"column":94,"offset":1808},"indent":[1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Breaking change detection","position":{"start":{"line":21,"column":5,"offset":1814},"end":{"line":21,"column":30,"offset":1839},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1810},"end":{"line":21,"column":30,"offset":1839},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Not all schema changes are potentially breaking. Some changes, like adding a field, will always be safe and never cause unexpected behavior for active clients. Other changes, like removing a field or changing a return type, can potentially affect the behavior of clients making queries that use those fields. These are what we consider potentially breaking changes.","position":{"start":{"line":23,"column":1,"offset":1841},"end":{"line":23,"column":366,"offset":2206},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1841},"end":{"line":23,"column":366,"offset":2206},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If schema validation detects that a proposed schema has a potentially breaking change, the ","position":{"start":{"line":25,"column":1,"offset":2208},"end":{"line":25,"column":92,"offset":2299},"indent":[]}},{"type":"inlineCode","value":"warthog service:check","position":{"start":{"line":25,"column":92,"offset":2299},"end":{"line":25,"column":115,"offset":2322},"indent":[]}},{"type":"text","value":" command will return a non-0 exit code. Warthog schema validation will detect breaking changes according to the following rules:","position":{"start":{"line":25,"column":115,"offset":2322},"end":{"line":25,"column":243,"offset":2450},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":2208},"end":{"line":25,"column":243,"offset":2450},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Removals","position":{"start":{"line":27,"column":6,"offset":2457},"end":{"line":27,"column":14,"offset":2465},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":2452},"end":{"line":27,"column":14,"offset":2465},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Each of these change types removes a schema element. If an element of your graph is being actively used by an operation and it is removed, your GraphQL layer will start returning errors to the dependent operations.","position":{"start":{"line":29,"column":1,"offset":2467},"end":{"line":29,"column":215,"offset":2681},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":2467},"end":{"line":29,"column":215,"offset":2681},"indent":[]}},{"type":"jsx","value":"<ul>\n  <li id=\"FIELD_REMOVED\">\n    <code>FIELD_REMOVED</code>: Field used by at least one operation was removed\n  </li>\n  <li id=\"TYPE_REMOVED\">\n    <code>TYPE_REMOVED</code>: Type(scalar, object) used by at least one operation was removed\n  </li>\n  <li id=\"ARG_REMOVED\">\n    <code>ARG_REMOVED</code>: Argument was removed from a field used by at least one operation\n  </li>\n  <li id=\"TYPE_REMOVED_FROM_UNION\">\n    <code>TYPE_REMOVED_FROM_UNION</code>: Type was removed from a union used by at least one operation\n  </li>\n  <li id=\"INPUT_FIELD_REMOVED\">\n    <code>INPUT_FIELD_REMOVED</code>: Field removed from an input type referenced by an argument on a field used by at least one operation\n  </li>\n  <li id=\"VALUE_REMOVED_FROM_ENUM\">\n    <code>VALUE_REMOVED_FROM_ENUM</code>: A value removed from an enum used by at least one operation\n  </li>\n  <li id=\"TYPE_REMOVED_FROM_INTERFACE\">\n    <code>TYPE_REMOVED_FROM_INTERFACE</code>: An object removed from an interface used by at least one operation\n  </li>\n</ul>","position":{"start":{"line":31,"column":1,"offset":2683},"end":{"line":53,"column":6,"offset":3696},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Required arguments","position":{"start":{"line":55,"column":6,"offset":3703},"end":{"line":55,"column":24,"offset":3721},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":3698},"end":{"line":55,"column":24,"offset":3721},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Each of these changes adds a required input to a schema element. If an operation is actively using an element of your graph and doesn't update itself to add the new required input argument, the GraphQL layer will start returning an error to the operation.","position":{"start":{"line":57,"column":1,"offset":3723},"end":{"line":57,"column":256,"offset":3978},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":3723},"end":{"line":57,"column":256,"offset":3978},"indent":[]}},{"type":"jsx","value":"<ul>\n  <li id=\"REQUIRED_ARG_ADDED\">\n    <code>REQUIRED_ARG_ADDED</code>: Non-nullable argument added to field used by at least one operation\n  </li>\n  <li id=\"NON_NULL_INPUT_FIELD_ADDED\">\n    <code>NON_NULL_INPUT_FIELD_ADDED</code>: Non-null field added to an input object used by at least one operation\n  </li>\n</ul>","position":{"start":{"line":59,"column":1,"offset":3980},"end":{"line":66,"column":6,"offset":4297},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"In-place updates","position":{"start":{"line":68,"column":6,"offset":4304},"end":{"line":68,"column":22,"offset":4320},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":4299},"end":{"line":68,"column":22,"offset":4320},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Each of these changes updates an existing schema element. If an operation is activley using an element of your graph and that element is updated, the operation could start receiving an error from the GraphQL layer or, in some cases, an unexpected result.","position":{"start":{"line":70,"column":1,"offset":4322},"end":{"line":70,"column":255,"offset":4576},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":4322},"end":{"line":70,"column":255,"offset":4576},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":72,"column":5,"offset":4582},"end":{"line":72,"column":10,"offset":4587},"indent":[]}}],"position":{"start":{"line":72,"column":3,"offset":4580},"end":{"line":72,"column":12,"offset":4589},"indent":[]}},{"type":"text","value":" In some cases, these changes are compatible with the client at runtime, such as a type rename or an object to interface conversion with the same fields. Schema validation still marks these breaking changes because validation does not have enough information to ensure safety and these changes deserve extra scrutiny, such as their impact on type generation.","position":{"start":{"line":72,"column":12,"offset":4589},"end":{"line":72,"column":370,"offset":4947},"indent":[]}}],"position":{"start":{"line":72,"column":3,"offset":4580},"end":{"line":72,"column":370,"offset":4947},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":4578},"end":{"line":72,"column":370,"offset":4947},"indent":[]}},{"type":"jsx","value":"<ul>\n  <li id=\"FIELD_CHANGED_TYPE\">\n    <code>FIELD_CHANGED_TYPE</code>: Field used by at least one operation changed return type\n  </li>\n  <li id=\"INPUT_FIELD_CHANGED_TYPE\">\n    <code>INPUT_FIELD_CHANGED_TYPE</code>: Field in input object changed type and is referenced by argument on field used by at least one operation\n  </li>\n  <li id=\"TYPE_CHANGED_KIND\">\n    <code>TYPE_CHANGED_KIND</code>: Type used by at least one operation changed, ex: scalar to object or enum to union\n  </li>\n  <li id=\"ARG_CHANGED_TYPE\">\n    <code>ARG_CHANGED_TYPE</code>: Argument changed type on field used by at least one operation\n  </li>\n</ul>","position":{"start":{"line":74,"column":1,"offset":4949},"end":{"line":87,"column":6,"offset":5576},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Type extensions","position":{"start":{"line":89,"column":6,"offset":5583},"end":{"line":89,"column":21,"offset":5598},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":5578},"end":{"line":89,"column":21,"offset":5598},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"These changes add a type to an existing union or interface in your graph. If an operation is actively using an element of the union or interface, it could receive and unexpected result when updated depending on the fragment spreads requested.","position":{"start":{"line":91,"column":1,"offset":5600},"end":{"line":91,"column":243,"offset":5842},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":5600},"end":{"line":91,"column":243,"offset":5842},"indent":[]}},{"type":"jsx","value":"<ul>\n  <li id=\"TYPE_ADDED_TO_UNION\">\n    <code>TYPE_ADDED_TO_UNION</code>: Type added to a union used by at least one operation\n  </li>\n  <li id=\"TYPE_ADDED_TO_INTERFACE\">\n    <code>TYPE_ADDED_TO_INTERFACE</code>: Interface added to an object used by at least one operation\n  </li>\n</ul>","position":{"start":{"line":93,"column":1,"offset":5844},"end":{"line":100,"column":6,"offset":6131},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Default arguments","position":{"start":{"line":102,"column":6,"offset":6138},"end":{"line":102,"column":23,"offset":6155},"indent":[]}}],"position":{"start":{"line":102,"column":1,"offset":6133},"end":{"line":102,"column":23,"offset":6155},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"These changes update the default value for an argument. If an operation is using an element of your graph and does not specify a value for this argument, the operation could experience unexpected results when the schema is updated if it was relying on the original default value.","position":{"start":{"line":104,"column":1,"offset":6157},"end":{"line":104,"column":280,"offset":6436},"indent":[]}}],"position":{"start":{"line":104,"column":1,"offset":6157},"end":{"line":104,"column":280,"offset":6436},"indent":[]}},{"type":"jsx","value":"<ul>\n  <li id=\"ARG_DEFAULT_VALUE_CHANGE\">\n    <code>ARG_DEFAULT_VALUE_CHANGE</code>: Default value added or changed for argument on a field used by at least one operation\n  </li>\n</ul>","position":{"start":{"line":106,"column":1,"offset":6438},"end":{"line":110,"column":6,"offset":6622},"indent":[1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Non-breaking changes","position":{"start":{"line":112,"column":6,"offset":6629},"end":{"line":112,"column":26,"offset":6649},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":6624},"end":{"line":112,"column":26,"offset":6649},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"These are change types detected ny the ","position":{"start":{"line":114,"column":1,"offset":6651},"end":{"line":114,"column":40,"offset":6690},"indent":[]}},{"type":"inlineCode","value":"warthog service:check","position":{"start":{"line":114,"column":40,"offset":6690},"end":{"line":114,"column":63,"offset":6713},"indent":[]}},{"type":"text","value":" command, but they are \"safe\" and will always be compatible with all exisitng client usage of the graph. They will not affect the behavior of any clients if deployed.","position":{"start":{"line":114,"column":63,"offset":6713},"end":{"line":114,"column":229,"offset":6879},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":6651},"end":{"line":114,"column":229,"offset":6879},"indent":[]}},{"type":"jsx","value":"<ul>\n  <li>Optional arguments</li>\n  <ul>\n    <li id=\"OPTIONAL_ARG_ADDED\"><code>OPTIONAL_ARG_ADDED</code> Nullable argument added to a field</li>\n    <li id=\"NULLABLE_FIELD_ADDED_TO_INPUT_OBJECT\"><code>NULLABLE_FIELD_ADDED_TO_INPUT_OBJECT</code> Nullable field added to an input object</li>\n  </ul>\n  <li>Additions</li>\n  <ul>\n    <li id=\"FIELD_ADDED\"><code>FIELD_ADDED</code> Field added to a type</li>\n    <li id=\"TYPE_ADDED\"><code>TYPE_ADDED</code> Type added to the schema</li>\n    <li id=\"VALUE_ADDED_TO_ENUM\"><code>VALUE_ADDED_TO_ENUM</code> Value added to an enum. If clients contain a switch case on the enum and do not include the `default`, this change could cause unexpected behavior</li>\n  </ul>\n  <li>Deprecations</li>\n  <ul>\n    <li id=\"FIELD_DEPRECATED\"><code>FIELD_DEPRECATED</code> Field deprecated</li>\n    <li id=\"FIELD_DEPRECATION_REMOVED\"><code>FIELD_DEPRECATION_REMOVED</code> Field no longer deprecated</li>\n    <li id=\"FIELD_DEPRECATED_REASON_CHANGE\"><code>FIELD_DEPRECATED_REASON_CHANGE</code> Reason for deprecation changed</li>\n    <li id=\"ENUM_DEPRECATED\"><code>ENUM_DEPRECATED</code> Enum deprecated</li>\n    <li id=\"ENUM_DEPRECATION_REMOVED\"><code>ENUM_DEPRECATION_REMOVED</code> Enum no longer deprecated</li>\n    <li id=\"ENUM_DEPRECATED_REASON_CHANGE\"><code>ENUM_DEPRECATED_REASON_CHANGE</code> Reason for enum deprecation changed</li>\n  </ul>\n</ul>","position":{"start":{"line":116,"column":1,"offset":6881},"end":{"line":137,"column":6,"offset":8262},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Validation response","position":{"start":{"line":139,"column":5,"offset":8268},"end":{"line":139,"column":24,"offset":8287},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":8264},"end":{"line":139,"column":24,"offset":8287},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Running a schema validation check is as simple as running ","position":{"start":{"line":141,"column":1,"offset":8289},"end":{"line":141,"column":59,"offset":8347},"indent":[]}},{"type":"inlineCode","value":"warthog service:check","position":{"start":{"line":141,"column":59,"offset":8347},"end":{"line":141,"column":82,"offset":8370},"indent":[]}},{"type":"text","value":" on the command line from within a service repository that is configured to be an Warthog project.","position":{"start":{"line":141,"column":82,"offset":8370},"end":{"line":141,"column":180,"offset":8468},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":8289},"end":{"line":141,"column":180,"offset":8468},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Running ","position":{"start":{"line":143,"column":1,"offset":8470},"end":{"line":143,"column":9,"offset":8478},"indent":[]}},{"type":"inlineCode","value":"warthog service:check","position":{"start":{"line":143,"column":9,"offset":8478},"end":{"line":143,"column":32,"offset":8501},"indent":[]}},{"type":"text","value":" will output the diff of all schema changes found and highlight changes determined to be breaking. Here's an example:","position":{"start":{"line":143,"column":32,"offset":8501},"end":{"line":143,"column":149,"offset":8618},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":8470},"end":{"line":143,"column":149,"offset":8618},"indent":[]}},{"type":"code","lang":"console","meta":null,"value":"$ npx warthog service:check --tag=prod\n  ✔ Loading Warthog Project\n  ✔ Validated local schema against tag prod on service engine\n  ✔ Compared 8 schema changes against 110 operations over the last 24 hours\n  ✖ Found 3 breaking changes and 5 compatible changes\n    → breaking changes found\n\nFAIL    ARG_REMOVED                `ServiceMutation.checkSchema` arg `gitContext` was removed\nFAIL    FIELD_REMOVED              `Schema.fieldCount` was removed\nFAIL    FIELD_REMOVED              `Schema.typeCount` was removed\n\nPASS    FIELD_ADDED                `SchemaTag.schemaRepoID` was added\nPASS    FIELD_CHANGED_TYPE         `ServiceMutation.uploadPartialSchema` changed type from `UploadPartialSchemaResponse!` to `CompositionResult!`\nPASS    FIELD_DEPRECATION_REMOVED  `IntrospectionSchema.fieldCount` is no longer deprecated\nPASS    FIELD_DEPRECATION_REMOVED  `IntrospectionSchema.typeCount` is no longer deprecated\nPASS    TYPE_REMOVED               `UploadPartialSchemaResponse` removed\n\nView full details at: https://engine.warthog.dev/service/example-1234/check/<DETAILS>","position":{"start":{"line":145,"column":1,"offset":8620},"end":{"line":164,"column":4,"offset":9710},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Each change to the schema will be labeled with ","position":{"start":{"line":166,"column":1,"offset":9712},"end":{"line":166,"column":48,"offset":9759},"indent":[]}},{"type":"inlineCode","value":"PASS","position":{"start":{"line":166,"column":48,"offset":9759},"end":{"line":166,"column":54,"offset":9765},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":166,"column":54,"offset":9765},"end":{"line":166,"column":58,"offset":9769},"indent":[]}},{"type":"inlineCode","value":"FAIL","position":{"start":{"line":166,"column":58,"offset":9769},"end":{"line":166,"column":64,"offset":9775},"indent":[]}},{"type":"text","value":" and a URL with full details on the changes and their impact on clients and operations will be generated. Following the URL will take you to Engine:","position":{"start":{"line":166,"column":64,"offset":9775},"end":{"line":166,"column":212,"offset":9923},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":9712},"end":{"line":166,"column":212,"offset":9923},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"../img/schema-validation/service-check-page.png","alt":"Service check page in the Engine UI","position":{"start":{"line":168,"column":1,"offset":9925},"end":{"line":168,"column":88,"offset":10012},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":9925},"end":{"line":168,"column":88,"offset":10012},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":170,"column":5,"offset":10018},"end":{"line":170,"column":10,"offset":10023},"indent":[]}}],"position":{"start":{"line":170,"column":3,"offset":10016},"end":{"line":170,"column":12,"offset":10025},"indent":[]}},{"type":"text","value":" If you have ","position":{"start":{"line":170,"column":12,"offset":10025},"end":{"line":170,"column":25,"offset":10038},"indent":[]}},{"type":"link","title":null,"url":"#github-integration","children":[{"type":"text","value":"installed schema validation checks on your GitHub PRs","position":{"start":{"line":170,"column":26,"offset":10039},"end":{"line":170,"column":79,"offset":10092},"indent":[]}}],"position":{"start":{"line":170,"column":25,"offset":10038},"end":{"line":170,"column":101,"offset":10114},"indent":[]}},{"type":"text","value":", the \"Details\" link in your GitHub checks will take you to the same details link in this output.","position":{"start":{"line":170,"column":101,"offset":10114},"end":{"line":170,"column":198,"offset":10211},"indent":[]}}],"position":{"start":{"line":170,"column":3,"offset":10016},"end":{"line":170,"column":198,"offset":10211},"indent":[]}}],"position":{"start":{"line":170,"column":1,"offset":10014},"end":{"line":170,"column":198,"offset":10211},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A failed ","position":{"start":{"line":172,"column":1,"offset":10213},"end":{"line":172,"column":10,"offset":10222},"indent":[]}},{"type":"inlineCode","value":"warthog service:check","position":{"start":{"line":172,"column":10,"offset":10222},"end":{"line":172,"column":33,"offset":10245},"indent":[]}},{"type":"text","value":" command will exit with a non-0 exit code and fail CI checks. There are many cases where it is safe to make a potentially breaking change, as long as the change is made intentionally with an understanding of its impact.","position":{"start":{"line":172,"column":33,"offset":10245},"end":{"line":172,"column":252,"offset":10464},"indent":[]}}],"position":{"start":{"line":172,"column":1,"offset":10213},"end":{"line":172,"column":252,"offset":10464},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Since breaking changes are detected using live traffic, your service will ","position":{"start":{"line":174,"column":1,"offset":10466},"end":{"line":174,"column":75,"offset":10540},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"need active metrics","position":{"start":{"line":174,"column":76,"offset":10541},"end":{"line":174,"column":95,"offset":10560},"indent":[]}}],"position":{"start":{"line":174,"column":75,"offset":10540},"end":{"line":174,"column":96,"offset":10561},"indent":[]}},{"type":"text","value":" for the change algorithm to detect failures. If there are no metrics associated with your service, ","position":{"start":{"line":174,"column":96,"offset":10561},"end":{"line":174,"column":196,"offset":10661},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"all changes will be labeled as a ","position":{"start":{"line":174,"column":197,"offset":10662},"end":{"line":174,"column":230,"offset":10695},"indent":[]}},{"type":"inlineCode","value":"PASS","position":{"start":{"line":174,"column":230,"offset":10695},"end":{"line":174,"column":236,"offset":10701},"indent":[]}},{"type":"text","value":" as opposed to a ","position":{"start":{"line":174,"column":236,"offset":10701},"end":{"line":174,"column":253,"offset":10718},"indent":[]}},{"type":"inlineCode","value":"FAIL","position":{"start":{"line":174,"column":253,"offset":10718},"end":{"line":174,"column":259,"offset":10724},"indent":[]}}],"position":{"start":{"line":174,"column":196,"offset":10661},"end":{"line":174,"column":260,"offset":10725},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":174,"column":260,"offset":10725},"end":{"line":174,"column":261,"offset":10726},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":10466},"end":{"line":174,"column":261,"offset":10726},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Set up schema validation","position":{"start":{"line":176,"column":4,"offset":10731},"end":{"line":176,"column":28,"offset":10755},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":10728},"end":{"line":176,"column":28,"offset":10755},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To set up schema validation, you will need to be both actively sending traces and registering schemas to Warthog:","position":{"start":{"line":178,"column":1,"offset":10757},"end":{"line":178,"column":114,"offset":10870},"indent":[]}}],"position":{"start":{"line":178,"column":1,"offset":10757},"end":{"line":178,"column":114,"offset":10870},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"/references/setup-analytics/","children":[{"type":"text","value":"Set up trace reporting to Warthog Engine","position":{"start":{"line":180,"column":5,"offset":10876},"end":{"line":180,"column":45,"offset":10916},"indent":[]}}],"position":{"start":{"line":180,"column":4,"offset":10875},"end":{"line":180,"column":76,"offset":10947},"indent":[]}}],"position":{"start":{"line":180,"column":4,"offset":10875},"end":{"line":180,"column":76,"offset":10947},"indent":[]}}],"position":{"start":{"line":180,"column":1,"offset":10872},"end":{"line":180,"column":76,"offset":10947},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"/platform/schema-registry/","children":[{"type":"text","value":"Set up schema registration in your continuous delivery pipeline","position":{"start":{"line":181,"column":5,"offset":10952},"end":{"line":181,"column":68,"offset":11015},"indent":[]}}],"position":{"start":{"line":181,"column":4,"offset":10951},"end":{"line":181,"column":97,"offset":11044},"indent":[]}}],"position":{"start":{"line":181,"column":4,"offset":10951},"end":{"line":181,"column":97,"offset":11044},"indent":[]}}],"position":{"start":{"line":181,"column":1,"offset":10948},"end":{"line":181,"column":97,"offset":11044},"indent":[]}}],"position":{"start":{"line":180,"column":1,"offset":10872},"end":{"line":181,"column":97,"offset":11044},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Then, you will need to configure your project for the ","position":{"start":{"line":183,"column":1,"offset":11046},"end":{"line":183,"column":55,"offset":11100},"indent":[]}},{"type":"inlineCode","value":"warthog service:check","position":{"start":{"line":183,"column":55,"offset":11100},"end":{"line":183,"column":78,"offset":11123},"indent":[]}},{"type":"text","value":" command:","position":{"start":{"line":183,"column":78,"offset":11123},"end":{"line":183,"column":87,"offset":11132},"indent":[]}}],"position":{"start":{"line":183,"column":1,"offset":11046},"end":{"line":183,"column":87,"offset":11132},"indent":[]}},{"type":"import","value":"import ProjectConfigPanel from 'gatsby-theme-apollo-docs/mdx/project-config-panel.mdx';","position":{"start":{"line":185,"column":1,"offset":11134},"end":{"line":185,"column":88,"offset":11221},"indent":[]}},{"type":"jsx","value":"<ProjectConfigPanel />","position":{"start":{"line":187,"column":1,"offset":11223},"end":{"line":187,"column":23,"offset":11245},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":189,"column":5,"offset":11251},"end":{"line":189,"column":10,"offset":11256},"indent":[]}}],"position":{"start":{"line":189,"column":3,"offset":11249},"end":{"line":189,"column":12,"offset":11258},"indent":[]}},{"type":"text","value":" If you have set up one of Warthog's workflows previously, your project may already have its ","position":{"start":{"line":189,"column":12,"offset":11258},"end":{"line":189,"column":105,"offset":11351},"indent":[]}},{"type":"inlineCode","value":".env","position":{"start":{"line":189,"column":105,"offset":11351},"end":{"line":189,"column":111,"offset":11357},"indent":[]}},{"type":"text","value":" file and ","position":{"start":{"line":189,"column":111,"offset":11357},"end":{"line":189,"column":121,"offset":11367},"indent":[]}},{"type":"inlineCode","value":"warthog.config.js","position":{"start":{"line":189,"column":121,"offset":11367},"end":{"line":189,"column":140,"offset":11386},"indent":[]}},{"type":"text","value":" file configured.","position":{"start":{"line":189,"column":140,"offset":11386},"end":{"line":189,"column":157,"offset":11403},"indent":[]}}],"position":{"start":{"line":189,"column":3,"offset":11249},"end":{"line":189,"column":157,"offset":11403},"indent":[]}}],"position":{"start":{"line":189,"column":1,"offset":11247},"end":{"line":189,"column":157,"offset":11403},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once you've got these set up, running your schema check is as simple as running:","position":{"start":{"line":191,"column":1,"offset":11405},"end":{"line":191,"column":81,"offset":11485},"indent":[]}}],"position":{"start":{"line":191,"column":1,"offset":11405},"end":{"line":191,"column":81,"offset":11485},"indent":[]}},{"type":"code","lang":"console","meta":null,"value":"$ npm install warthog\n$ npx warthog service:check","position":{"start":{"line":193,"column":1,"offset":11487},"end":{"line":196,"column":4,"offset":11551},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The command can be placed in any continuous integration pipeline. To surface results, ","position":{"start":{"line":198,"column":1,"offset":11553},"end":{"line":198,"column":87,"offset":11639},"indent":[]}},{"type":"inlineCode","value":"warthog","position":{"start":{"line":198,"column":87,"offset":11639},"end":{"line":198,"column":96,"offset":11648},"indent":[]}},{"type":"text","value":" emits an exit code and ","position":{"start":{"line":198,"column":96,"offset":11648},"end":{"line":198,"column":120,"offset":11672},"indent":[]}},{"type":"link","title":null,"url":"#github-integration","children":[{"type":"text","value":"integrates with GitHub statuses","position":{"start":{"line":198,"column":121,"offset":11673},"end":{"line":198,"column":152,"offset":11704},"indent":[]}}],"position":{"start":{"line":198,"column":120,"offset":11672},"end":{"line":198,"column":174,"offset":11726},"indent":[]}},{"type":"text","value":". The time window of live traffic that the check command validates against can be ","position":{"start":{"line":198,"column":174,"offset":11726},"end":{"line":198,"column":256,"offset":11808},"indent":[]}},{"type":"link","title":null,"url":"#adjusting-validation-parameters","children":[{"type":"text","value":"configured","position":{"start":{"line":198,"column":257,"offset":11809},"end":{"line":198,"column":267,"offset":11819},"indent":[]}}],"position":{"start":{"line":198,"column":256,"offset":11808},"end":{"line":198,"column":302,"offset":11854},"indent":[]}},{"type":"text","value":" to any range within your data retention window.","position":{"start":{"line":198,"column":302,"offset":11854},"end":{"line":198,"column":350,"offset":11902},"indent":[]}}],"position":{"start":{"line":198,"column":1,"offset":11553},"end":{"line":198,"column":350,"offset":11902},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":200,"column":5,"offset":11908},"end":{"line":200,"column":10,"offset":11913},"indent":[]}}],"position":{"start":{"line":200,"column":3,"offset":11906},"end":{"line":200,"column":12,"offset":11915},"indent":[]}},{"type":"text","value":" The Warthog CLI will be looking in your Warthog config for a location from which to fetch your local schema and using your ENGINE_API_KEY to authenticate its requests with the Engine service.","position":{"start":{"line":200,"column":12,"offset":11915},"end":{"line":200,"column":204,"offset":12107},"indent":[]}}],"position":{"start":{"line":200,"column":3,"offset":11906},"end":{"line":200,"column":204,"offset":12107},"indent":[]}}],"position":{"start":{"line":200,"column":1,"offset":11904},"end":{"line":200,"column":204,"offset":12107},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Run validation on each commit","position":{"start":{"line":202,"column":5,"offset":12113},"end":{"line":202,"column":34,"offset":12142},"indent":[]}}],"position":{"start":{"line":202,"column":1,"offset":12109},"end":{"line":202,"column":34,"offset":12142},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We highly recommended that you add validation to your continuous integration workflow (e.g. Jenkins, CircleCI, etc.). In doing so, you can detect potential problems automatically and display the results of checks directly on pull requests.","position":{"start":{"line":204,"column":1,"offset":12144},"end":{"line":204,"column":240,"offset":12383},"indent":[]}}],"position":{"start":{"line":204,"column":1,"offset":12144},"end":{"line":204,"column":240,"offset":12383},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here's a example of how to add a schema validation check to CircleCI:","position":{"start":{"line":206,"column":1,"offset":12385},"end":{"line":206,"column":70,"offset":12454},"indent":[]}}],"position":{"start":{"line":206,"column":1,"offset":12385},"end":{"line":206,"column":70,"offset":12454},"indent":[]}},{"type":"code","lang":"yaml{26}","meta":null,"value":"version: 2\n\njobs:\n  build:\n    docker:\n      - image: circleci/node:8\n\n    steps:\n      - checkout\n\n      - run: npm install\n\n      # Start the GraphQL server.  If a different command is used to\n      # start the server, use it in place of `npm start` here.\n      - run:\n          name: Starting server\n          command: npm start\n          background: true\n\n      # make sure the server has enough time to start up before running\n      # commands against it\n      - run: sleep 5\n\n      # This will authenticate using the `ENGINE_API_KEY` environment\n      # variable. Configure your endpoint's location in your Warthog config.\n      - run: npx warthog service:check","position":{"start":{"line":208,"column":1,"offset":12456},"end":{"line":235,"column":4,"offset":13139},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":237,"column":5,"offset":13145},"end":{"line":237,"column":10,"offset":13150},"indent":[]}}],"position":{"start":{"line":237,"column":3,"offset":13143},"end":{"line":237,"column":12,"offset":13152},"indent":[]}},{"type":"text","value":" If you're using GitHub status checks, we recommend ignoring the exit code of the ","position":{"start":{"line":237,"column":12,"offset":13152},"end":{"line":237,"column":94,"offset":13234},"indent":[]}},{"type":"inlineCode","value":"warthog service:check","position":{"start":{"line":237,"column":94,"offset":13234},"end":{"line":237,"column":117,"offset":13257},"indent":[]}},{"type":"text","value":" command so your continuous integration can complete without failing early. This can be done by appending ","position":{"start":{"line":237,"column":117,"offset":13257},"end":{"line":237,"column":223,"offset":13363},"indent":[]}},{"type":"inlineCode","value":"|| echo 'validation failed'","position":{"start":{"line":237,"column":223,"offset":13363},"end":{"line":237,"column":252,"offset":13392},"indent":[]}},{"type":"text","value":" to the command call.","position":{"start":{"line":237,"column":252,"offset":13392},"end":{"line":237,"column":273,"offset":13413},"indent":[]}}],"position":{"start":{"line":237,"column":3,"offset":13143},"end":{"line":237,"column":273,"offset":13413},"indent":[]}}],"position":{"start":{"line":237,"column":1,"offset":13141},"end":{"line":237,"column":273,"offset":13413},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"GitHub integration","position":{"start":{"line":239,"column":5,"offset":13419},"end":{"line":239,"column":23,"offset":13437},"indent":[]}}],"position":{"start":{"line":239,"column":1,"offset":13415},"end":{"line":239,"column":23,"offset":13437},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"../img/schema-validation/github-check.png","alt":"GitHub Status View","position":{"start":{"line":241,"column":1,"offset":13439},"end":{"line":241,"column":65,"offset":13503},"indent":[]}}],"position":{"start":{"line":241,"column":1,"offset":13439},"end":{"line":241,"column":65,"offset":13503},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Like most tools, schema validation is best used when it is integrated directly into the rest of your workflow. If you're using GitHub, you can install the Warthog Engine GitHub app. This will enable Warthog's systems to send a webhook back to your project on each ","position":{"start":{"line":243,"column":1,"offset":13505},"end":{"line":243,"column":265,"offset":13769},"indent":[]}},{"type":"inlineCode","value":"warthog service:check","position":{"start":{"line":243,"column":265,"offset":13769},"end":{"line":243,"column":288,"offset":13792},"indent":[]}},{"type":"text","value":", providing built-in pass/fail status checks on your pull requests.","position":{"start":{"line":243,"column":288,"offset":13792},"end":{"line":243,"column":355,"offset":13859},"indent":[]}}],"position":{"start":{"line":243,"column":1,"offset":13505},"end":{"line":243,"column":355,"offset":13859},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To install the Warthog Engine integration on GitHub, go to ","position":{"start":{"line":245,"column":1,"offset":13861},"end":{"line":245,"column":60,"offset":13920},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/apps/warthog-engine","children":[{"type":"text","value":"https://github.com/apps/warthog-engine","position":{"start":{"line":245,"column":61,"offset":13921},"end":{"line":245,"column":99,"offset":13959},"indent":[]}}],"position":{"start":{"line":245,"column":60,"offset":13920},"end":{"line":245,"column":140,"offset":14000},"indent":[]}},{"type":"text","value":", click the ","position":{"start":{"line":245,"column":140,"offset":14000},"end":{"line":245,"column":152,"offset":14012},"indent":[]}},{"type":"inlineCode","value":"Configure","position":{"start":{"line":245,"column":152,"offset":14012},"end":{"line":245,"column":163,"offset":14023},"indent":[]}},{"type":"text","value":" button, and select the appropriate GitHub profile or organization.","position":{"start":{"line":245,"column":163,"offset":14023},"end":{"line":245,"column":230,"offset":14090},"indent":[]}}],"position":{"start":{"line":245,"column":1,"offset":13861},"end":{"line":245,"column":230,"offset":14090},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Posting a comment to your PRs","position":{"start":{"line":247,"column":5,"offset":14096},"end":{"line":247,"column":34,"offset":14125},"indent":[]}}],"position":{"start":{"line":247,"column":1,"offset":14092},"end":{"line":247,"column":34,"offset":14125},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For teams using GitHub Enterprise, Bitbucket, and other source control tools, we recommend setting up your CI to post a comment on your PRs with the results of schema validation. Surfacing schema diffs and breaking changes directly in your PR will speed up your review workflow by saving you the time of searching your CI logs to check why validation didn't pass.","position":{"start":{"line":249,"column":1,"offset":14127},"end":{"line":249,"column":364,"offset":14490},"indent":[]}}],"position":{"start":{"line":249,"column":1,"offset":14127},"end":{"line":249,"column":364,"offset":14490},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The CLI supports passing a ","position":{"start":{"line":251,"column":1,"offset":14492},"end":{"line":251,"column":28,"offset":14519},"indent":[]}},{"type":"inlineCode","value":"--markdown","position":{"start":{"line":251,"column":28,"offset":14519},"end":{"line":251,"column":40,"offset":14531},"indent":[]}},{"type":"text","value":" flag to ","position":{"start":{"line":251,"column":40,"offset":14531},"end":{"line":251,"column":49,"offset":14540},"indent":[]}},{"type":"inlineCode","value":"warthog service:check","position":{"start":{"line":251,"column":49,"offset":14540},"end":{"line":251,"column":72,"offset":14563},"indent":[]}},{"type":"text","value":", which outputs the results of schema validation in a markdown format specifically. This markdown can be piped directly into a comment to your source control tool, like in ","position":{"start":{"line":251,"column":72,"offset":14563},"end":{"line":251,"column":244,"offset":14735},"indent":[]}},{"type":"link","title":null,"url":"https://gist.github.com/daniman/e53d0589d18b778878bd8ef32d2e793c","children":[{"type":"text","value":"this example of posting a comment with the results of schema validation to GitHub","position":{"start":{"line":251,"column":245,"offset":14736},"end":{"line":251,"column":326,"offset":14817},"indent":[]}}],"position":{"start":{"line":251,"column":244,"offset":14735},"end":{"line":251,"column":393,"offset":14884},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":251,"column":393,"offset":14884},"end":{"line":251,"column":394,"offset":14885},"indent":[]}}],"position":{"start":{"line":251,"column":1,"offset":14492},"end":{"line":251,"column":394,"offset":14885},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The output of ","position":{"start":{"line":253,"column":1,"offset":14887},"end":{"line":253,"column":15,"offset":14901},"indent":[]}},{"type":"inlineCode","value":"warthog service:check --markdown","position":{"start":{"line":253,"column":15,"offset":14901},"end":{"line":253,"column":49,"offset":14935},"indent":[]}},{"type":"text","value":" looks like this:","position":{"start":{"line":253,"column":49,"offset":14935},"end":{"line":253,"column":66,"offset":14952},"indent":[]}}],"position":{"start":{"line":253,"column":1,"offset":14887},"end":{"line":253,"column":66,"offset":14952},"indent":[]}},{"type":"code","lang":"md","meta":null,"value":"### Warthog Service Check\n\n🔄 Validated your local schema against schema tag `staging` on service `engine`.\n🔢 Compared **18 schema changes** against **100 operations** seen over the **last 24 hours**.\n❌ Found **7 breaking changes** that would affect **3 operations** across **2 clients**\n\n🔗 [View your service check details](https://engine.warthog.dev/service/engine/checks?...).","position":{"start":{"line":255,"column":1,"offset":14954},"end":{"line":263,"column":4,"offset":15345},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Multiple environments","position":{"start":{"line":265,"column":5,"offset":15351},"end":{"line":265,"column":26,"offset":15372},"indent":[]}}],"position":{"start":{"line":265,"column":1,"offset":15347},"end":{"line":265,"column":26,"offset":15372},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Product cycles move fast and it's common for schemas to be slightly different across environments as changes make their way through your system. To support this, schemas pushed to the registry can be associated with specific ","position":{"start":{"line":267,"column":1,"offset":15374},"end":{"line":267,"column":226,"offset":15599},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"variants","position":{"start":{"line":267,"column":227,"offset":15600},"end":{"line":267,"column":235,"offset":15608},"indent":[]}}],"position":{"start":{"line":267,"column":226,"offset":15599},"end":{"line":267,"column":236,"offset":15609},"indent":[]}},{"type":"text","value":" of your graph (also referred to tags).","position":{"start":{"line":267,"column":236,"offset":15609},"end":{"line":267,"column":275,"offset":15648},"indent":[]}}],"position":{"start":{"line":267,"column":1,"offset":15374},"end":{"line":267,"column":275,"offset":15648},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Variants mostly commonly represent environments and can also indicate branches or future schemas. Passing the ","position":{"start":{"line":269,"column":1,"offset":15650},"end":{"line":269,"column":111,"offset":15760},"indent":[]}},{"type":"inlineCode","value":"--tag=<VARIANT>","position":{"start":{"line":269,"column":111,"offset":15760},"end":{"line":269,"column":128,"offset":15777},"indent":[]}},{"type":"text","value":" flag to ","position":{"start":{"line":269,"column":128,"offset":15777},"end":{"line":269,"column":137,"offset":15786},"indent":[]}},{"type":"inlineCode","value":"warthog service:check","position":{"start":{"line":269,"column":137,"offset":15786},"end":{"line":269,"column":160,"offset":15809},"indent":[]}},{"type":"text","value":" specifies which schema variant to compara against, such as ","position":{"start":{"line":269,"column":160,"offset":15809},"end":{"line":269,"column":220,"offset":15869},"indent":[]}},{"type":"inlineCode","value":"prod","position":{"start":{"line":269,"column":220,"offset":15869},"end":{"line":269,"column":226,"offset":15875},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":269,"column":226,"offset":15875},"end":{"line":269,"column":230,"offset":15879},"indent":[]}},{"type":"inlineCode","value":"staging","position":{"start":{"line":269,"column":230,"offset":15879},"end":{"line":269,"column":239,"offset":15888},"indent":[]}},{"type":"text","value":". It's common to run checks against multple different graph variants in the same continuous integration pipeline to ensure that all important deployments are accounted for. Running ","position":{"start":{"line":269,"column":239,"offset":15888},"end":{"line":269,"column":420,"offset":16069},"indent":[]}},{"type":"inlineCode","value":"service:check","position":{"start":{"line":269,"column":420,"offset":16069},"end":{"line":269,"column":435,"offset":16084},"indent":[]}},{"type":"text","value":" against multiple variants will result in status checks similar to:","position":{"start":{"line":269,"column":435,"offset":16084},"end":{"line":269,"column":502,"offset":16151},"indent":[]}}],"position":{"start":{"line":269,"column":1,"offset":15650},"end":{"line":269,"column":502,"offset":16151},"indent":[]}},{"type":"jsx","value":"<div style=\"text-align:center\">","position":{"start":{"line":271,"column":1,"offset":16153},"end":{"line":271,"column":32,"offset":16184},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"../img/schema-validation/multi-github-check.png","alt":"multiple service checks","position":{"start":{"line":273,"column":1,"offset":16186},"end":{"line":273,"column":76,"offset":16261},"indent":[]}}],"position":{"start":{"line":273,"column":1,"offset":16186},"end":{"line":273,"column":76,"offset":16261},"indent":[]}},{"type":"jsx","value":"</div>","position":{"start":{"line":275,"column":1,"offset":16263},"end":{"line":275,"column":7,"offset":16269},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Adjusting validation parameters","position":{"start":{"line":277,"column":4,"offset":16274},"end":{"line":277,"column":35,"offset":16305},"indent":[]}}],"position":{"start":{"line":277,"column":1,"offset":16271},"end":{"line":277,"column":35,"offset":16305},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Depending on the requirements of your application, you may want to configure the timeframe to validate operations against. You can do so by providing a ","position":{"start":{"line":279,"column":1,"offset":16307},"end":{"line":279,"column":153,"offset":16459},"indent":[]}},{"type":"inlineCode","value":"validationPeriod","position":{"start":{"line":279,"column":153,"offset":16459},"end":{"line":279,"column":171,"offset":16477},"indent":[]}},{"type":"text","value":" flag to the CLI. The timeframe will always end at \"now\", and go back in time by the amount specified.","position":{"start":{"line":279,"column":171,"offset":16477},"end":{"line":279,"column":273,"offset":16579},"indent":[]}}],"position":{"start":{"line":279,"column":1,"offset":16307},"end":{"line":279,"column":273,"offset":16579},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"warthog service:check --validationPeriod=P2W","position":{"start":{"line":281,"column":1,"offset":16581},"end":{"line":283,"column":4,"offset":16637},"indent":[1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":285,"column":5,"offset":16643},"end":{"line":285,"column":10,"offset":16648},"indent":[]}}],"position":{"start":{"line":285,"column":3,"offset":16641},"end":{"line":285,"column":12,"offset":16650},"indent":[]}},{"type":"text","value":" Valid durations are represented in ","position":{"start":{"line":285,"column":12,"offset":16650},"end":{"line":285,"column":48,"offset":16686},"indent":[]}},{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/ISO_8601#Durations","children":[{"type":"text","value":"ISO 8601","position":{"start":{"line":285,"column":49,"offset":16687},"end":{"line":285,"column":57,"offset":16695},"indent":[]}}],"position":{"start":{"line":285,"column":48,"offset":16686},"end":{"line":285,"column":108,"offset":16746},"indent":[]}},{"type":"text","value":". It can also be provided as a number in seconds, i.e. 86400 for a single day.","position":{"start":{"line":285,"column":108,"offset":16746},"end":{"line":285,"column":186,"offset":16824},"indent":[]}}],"position":{"start":{"line":285,"column":3,"offset":16641},"end":{"line":285,"column":186,"offset":16824},"indent":[]}}],"position":{"start":{"line":285,"column":1,"offset":16639},"end":{"line":285,"column":186,"offset":16824},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Two other parameters for customizing the results of ","position":{"start":{"line":287,"column":1,"offset":16826},"end":{"line":287,"column":53,"offset":16878},"indent":[]}},{"type":"inlineCode","value":"service:check","position":{"start":{"line":287,"column":53,"offset":16878},"end":{"line":287,"column":68,"offset":16893},"indent":[]}},{"type":"text","value":" are threshold values. For example, you may wish to drop support for an old version of an app in order to remove some deprecated fields. Using these parameters, you can decide what amount of breakage is acceptable before shipping any breaking changes.","position":{"start":{"line":287,"column":68,"offset":16893},"end":{"line":287,"column":319,"offset":17144},"indent":[]}}],"position":{"start":{"line":287,"column":1,"offset":16826},"end":{"line":287,"column":319,"offset":17144},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"queryCountThreshold","position":{"start":{"line":289,"column":3,"offset":17148},"end":{"line":289,"column":24,"offset":17169},"indent":[]}},{"type":"text","value":" - This flag will only validate the schema against operations that have been executed at least the specified number of times within the provided duration.","position":{"start":{"line":289,"column":24,"offset":17169},"end":{"line":289,"column":178,"offset":17323},"indent":[]}}],"position":{"start":{"line":289,"column":3,"offset":17148},"end":{"line":289,"column":178,"offset":17323},"indent":[]}}],"position":{"start":{"line":289,"column":1,"offset":17146},"end":{"line":289,"column":178,"offset":17323},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"queryCountThresholdPercentage","position":{"start":{"line":290,"column":3,"offset":17326},"end":{"line":290,"column":34,"offset":17357},"indent":[]}},{"type":"text","value":" - Similar to ","position":{"start":{"line":290,"column":34,"offset":17357},"end":{"line":290,"column":48,"offset":17371},"indent":[]}},{"type":"inlineCode","value":"queryCountThreshold","position":{"start":{"line":290,"column":48,"offset":17371},"end":{"line":290,"column":69,"offset":17392},"indent":[]}},{"type":"text","value":", but expressed as a percentage of all operation volume.","position":{"start":{"line":290,"column":69,"offset":17392},"end":{"line":290,"column":125,"offset":17448},"indent":[]}}],"position":{"start":{"line":290,"column":3,"offset":17326},"end":{"line":290,"column":125,"offset":17448},"indent":[]}}],"position":{"start":{"line":290,"column":1,"offset":17324},"end":{"line":290,"column":125,"offset":17448},"indent":[]}}],"position":{"start":{"line":289,"column":1,"offset":17146},"end":{"line":290,"column":125,"offset":17448},"indent":[1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":292,"column":5,"offset":17454},"end":{"line":292,"column":10,"offset":17459},"indent":[]}}],"position":{"start":{"line":292,"column":3,"offset":17452},"end":{"line":292,"column":12,"offset":17461},"indent":[]}},{"type":"text","value":" these flags are compatible with each other. In the case that both are provided, an operation must meet or exceed both thresholds.","position":{"start":{"line":292,"column":12,"offset":17461},"end":{"line":292,"column":142,"offset":17591},"indent":[]}}],"position":{"start":{"line":292,"column":3,"offset":17452},"end":{"line":292,"column":142,"offset":17591},"indent":[]}}],"position":{"start":{"line":292,"column":1,"offset":17450},"end":{"line":292,"column":142,"offset":17591},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here's an example of how to run a ","position":{"start":{"line":294,"column":1,"offset":17593},"end":{"line":294,"column":35,"offset":17627},"indent":[]}},{"type":"inlineCode","value":"service:check","position":{"start":{"line":294,"column":35,"offset":17627},"end":{"line":294,"column":50,"offset":17642},"indent":[]}},{"type":"text","value":" with custom thresholds set:","position":{"start":{"line":294,"column":50,"offset":17642},"end":{"line":294,"column":78,"offset":17670},"indent":[]}}],"position":{"start":{"line":294,"column":1,"offset":17593},"end":{"line":294,"column":78,"offset":17670},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"npx warthog service:check \\\n# Validate the schema against operations that have run in the last 5 days\n--validationPeriod=P5D \\\n# Only validate against operations that have run at least 5 times during the 5 day duration\n--queryCountThreshold=5 \\\n# Only validate against operations that account for at least 3% of total operation volume\n--queryCountThresholdPercentage=3","position":{"start":{"line":296,"column":1,"offset":17672},"end":{"line":304,"column":4,"offset":18052},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you have any requests for other filtering or threshold mechanisms, please get in touch with us on the ","position":{"start":{"line":306,"column":1,"offset":18054},"end":{"line":306,"column":106,"offset":18159},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/goldcaddy77/warthog-tooling/","children":[{"type":"text","value":"warthog-tooling","position":{"start":{"line":306,"column":107,"offset":18160},"end":{"line":306,"column":122,"offset":18175},"indent":[]}}],"position":{"start":{"line":306,"column":106,"offset":18159},"end":{"line":306,"column":172,"offset":18225},"indent":[]}},{"type":"text","value":" repository.","position":{"start":{"line":306,"column":172,"offset":18225},"end":{"line":306,"column":184,"offset":18237},"indent":[]}}],"position":{"start":{"line":306,"column":1,"offset":18054},"end":{"line":306,"column":184,"offset":18237},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Validating schema changes\",\"description\":\"Check if schema changes are safe or breaking by comparing against live server traffic\"}","position":{"start":{"line":309,"column":1,"offset":18240},"end":{"line":309,"column":168,"offset":18407},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":309,"column":168,"offset":18407}}},"scopeImports":["import ProjectConfigPanel from 'gatsby-theme-apollo-docs/mdx/project-config-panel.mdx';","import React from 'react'"],"scopeIdentifiers":["ProjectConfigPanel","React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Validating schema changes\",\n  \"description\": \"Check if schema changes are safe or breaking by comparing against live server traffic\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"There are many types of schema changes that can be potentially breaking to clients, like removing a field, if made without special consideration. For safety, some organizations take the approach of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"never\"), \" making these types of changes, but this leads to an ever-growing schema and reduced API flexibility over time. In reality, making these types of changes to a schema can be very safe as long as you have tools in place to ensure that no queries are broken in the process.\"), mdx(\"p\", null, \"Warthog provides a tool to protect for exactly this scenario called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"schema validation\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" Schema validation is an Warthog Platform feature available on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.warthog.dev/plans/\"\n  }), \"Team and Enterprise plans\"), \" of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://engine.warthog.dev\"\n  }), \"Warthog Engine\"), \".\")), mdx(\"h2\", {\n    \"id\": \"how-it-works\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#how-it-works\",\n    \"aria-label\": \"how it works permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"How it works\"), mdx(\"p\", null, \"Schema validation is run through the Warthog CLI by executing the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:check\"), \" command. Warthog will generate a diff between your local schema and your most recently registered schema, then validate that the changes are safe by checking if any queries actively running against your graph will be affected.\"), mdx(\"p\", null, \"Here's how it works:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"You run \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:check\"), \" locally or in CI. The proposed schema is sent to Engine's schema registry.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Engine creates a diff between the local schema and the most recently published schema in the registry.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Engine fetches a list of all operations sent to your graph in the last day (time window is \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#adjusting-validation-parameters\"\n  }), \"configurable\"), \").\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Engine walks through the schema diff change-by-change and compares against the operation list to see if the changes will affect the behavior of any operations.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Engine returns the schema diff and indicates any breaking changes found.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The CLI prints the output of this check with a link to view more details in the Engine UI.\")), mdx(\"h3\", {\n    \"id\": \"breaking-change-detection\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#breaking-change-detection\",\n    \"aria-label\": \"breaking change detection permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Breaking change detection\"), mdx(\"p\", null, \"Not all schema changes are potentially breaking. Some changes, like adding a field, will always be safe and never cause unexpected behavior for active clients. Other changes, like removing a field or changing a return type, can potentially affect the behavior of clients making queries that use those fields. These are what we consider potentially breaking changes.\"), mdx(\"p\", null, \"If schema validation detects that a proposed schema has a potentially breaking change, the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:check\"), \" command will return a non-0 exit code. Warthog schema validation will detect breaking changes according to the following rules:\"), mdx(\"h4\", {\n    \"id\": \"removals\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#removals\",\n    \"aria-label\": \"removals permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Removals\"), mdx(\"p\", null, \"Each of these change types removes a schema element. If an element of your graph is being actively used by an operation and it is removed, your GraphQL layer will start returning errors to the dependent operations.\"), mdx(\"ul\", null, mdx(\"li\", {\n    id: \"FIELD_REMOVED\"\n  }, mdx(\"code\", null, \"FIELD_REMOVED\"), \": Field used by at least one operation was removed\"), mdx(\"li\", {\n    id: \"TYPE_REMOVED\"\n  }, mdx(\"code\", null, \"TYPE_REMOVED\"), \": Type(scalar, object) used by at least one operation was removed\"), mdx(\"li\", {\n    id: \"ARG_REMOVED\"\n  }, mdx(\"code\", null, \"ARG_REMOVED\"), \": Argument was removed from a field used by at least one operation\"), mdx(\"li\", {\n    id: \"TYPE_REMOVED_FROM_UNION\"\n  }, mdx(\"code\", null, \"TYPE_REMOVED_FROM_UNION\"), \": Type was removed from a union used by at least one operation\"), mdx(\"li\", {\n    id: \"INPUT_FIELD_REMOVED\"\n  }, mdx(\"code\", null, \"INPUT_FIELD_REMOVED\"), \": Field removed from an input type referenced by an argument on a field used by at least one operation\"), mdx(\"li\", {\n    id: \"VALUE_REMOVED_FROM_ENUM\"\n  }, mdx(\"code\", null, \"VALUE_REMOVED_FROM_ENUM\"), \": A value removed from an enum used by at least one operation\"), mdx(\"li\", {\n    id: \"TYPE_REMOVED_FROM_INTERFACE\"\n  }, mdx(\"code\", null, \"TYPE_REMOVED_FROM_INTERFACE\"), \": An object removed from an interface used by at least one operation\")), mdx(\"h4\", {\n    \"id\": \"required-arguments\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#required-arguments\",\n    \"aria-label\": \"required arguments permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Required arguments\"), mdx(\"p\", null, \"Each of these changes adds a required input to a schema element. If an operation is actively using an element of your graph and doesn't update itself to add the new required input argument, the GraphQL layer will start returning an error to the operation.\"), mdx(\"ul\", null, mdx(\"li\", {\n    id: \"REQUIRED_ARG_ADDED\"\n  }, mdx(\"code\", null, \"REQUIRED_ARG_ADDED\"), \": Non-nullable argument added to field used by at least one operation\"), mdx(\"li\", {\n    id: \"NON_NULL_INPUT_FIELD_ADDED\"\n  }, mdx(\"code\", null, \"NON_NULL_INPUT_FIELD_ADDED\"), \": Non-null field added to an input object used by at least one operation\")), mdx(\"h4\", {\n    \"id\": \"in-place-updates\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#in-place-updates\",\n    \"aria-label\": \"in place updates permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"In-place updates\"), mdx(\"p\", null, \"Each of these changes updates an existing schema element. If an operation is activley using an element of your graph and that element is updated, the operation could start receiving an error from the GraphQL layer or, in some cases, an unexpected result.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" In some cases, these changes are compatible with the client at runtime, such as a type rename or an object to interface conversion with the same fields. Schema validation still marks these breaking changes because validation does not have enough information to ensure safety and these changes deserve extra scrutiny, such as their impact on type generation.\")), mdx(\"ul\", null, mdx(\"li\", {\n    id: \"FIELD_CHANGED_TYPE\"\n  }, mdx(\"code\", null, \"FIELD_CHANGED_TYPE\"), \": Field used by at least one operation changed return type\"), mdx(\"li\", {\n    id: \"INPUT_FIELD_CHANGED_TYPE\"\n  }, mdx(\"code\", null, \"INPUT_FIELD_CHANGED_TYPE\"), \": Field in input object changed type and is referenced by argument on field used by at least one operation\"), mdx(\"li\", {\n    id: \"TYPE_CHANGED_KIND\"\n  }, mdx(\"code\", null, \"TYPE_CHANGED_KIND\"), \": Type used by at least one operation changed, ex: scalar to object or enum to union\"), mdx(\"li\", {\n    id: \"ARG_CHANGED_TYPE\"\n  }, mdx(\"code\", null, \"ARG_CHANGED_TYPE\"), \": Argument changed type on field used by at least one operation\")), mdx(\"h4\", {\n    \"id\": \"type-extensions\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#type-extensions\",\n    \"aria-label\": \"type extensions permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Type extensions\"), mdx(\"p\", null, \"These changes add a type to an existing union or interface in your graph. If an operation is actively using an element of the union or interface, it could receive and unexpected result when updated depending on the fragment spreads requested.\"), mdx(\"ul\", null, mdx(\"li\", {\n    id: \"TYPE_ADDED_TO_UNION\"\n  }, mdx(\"code\", null, \"TYPE_ADDED_TO_UNION\"), \": Type added to a union used by at least one operation\"), mdx(\"li\", {\n    id: \"TYPE_ADDED_TO_INTERFACE\"\n  }, mdx(\"code\", null, \"TYPE_ADDED_TO_INTERFACE\"), \": Interface added to an object used by at least one operation\")), mdx(\"h4\", {\n    \"id\": \"default-arguments\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#default-arguments\",\n    \"aria-label\": \"default arguments permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Default arguments\"), mdx(\"p\", null, \"These changes update the default value for an argument. If an operation is using an element of your graph and does not specify a value for this argument, the operation could experience unexpected results when the schema is updated if it was relying on the original default value.\"), mdx(\"ul\", null, mdx(\"li\", {\n    id: \"ARG_DEFAULT_VALUE_CHANGE\"\n  }, mdx(\"code\", null, \"ARG_DEFAULT_VALUE_CHANGE\"), \": Default value added or changed for argument on a field used by at least one operation\")), mdx(\"h4\", {\n    \"id\": \"non-breaking-changes\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#non-breaking-changes\",\n    \"aria-label\": \"non breaking changes permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Non-breaking changes\"), mdx(\"p\", null, \"These are change types detected ny the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:check\"), \" command, but they are \\\"safe\\\" and will always be compatible with all exisitng client usage of the graph. They will not affect the behavior of any clients if deployed.\"), mdx(\"ul\", null, mdx(\"li\", null, \"Optional arguments\"), mdx(\"ul\", null, mdx(\"li\", {\n    id: \"OPTIONAL_ARG_ADDED\"\n  }, mdx(\"code\", null, \"OPTIONAL_ARG_ADDED\"), \" Nullable argument added to a field\"), mdx(\"li\", {\n    id: \"NULLABLE_FIELD_ADDED_TO_INPUT_OBJECT\"\n  }, mdx(\"code\", null, \"NULLABLE_FIELD_ADDED_TO_INPUT_OBJECT\"), \" Nullable field added to an input object\")), mdx(\"li\", null, \"Additions\"), mdx(\"ul\", null, mdx(\"li\", {\n    id: \"FIELD_ADDED\"\n  }, mdx(\"code\", null, \"FIELD_ADDED\"), \" Field added to a type\"), mdx(\"li\", {\n    id: \"TYPE_ADDED\"\n  }, mdx(\"code\", null, \"TYPE_ADDED\"), \" Type added to the schema\"), mdx(\"li\", {\n    id: \"VALUE_ADDED_TO_ENUM\"\n  }, mdx(\"code\", null, \"VALUE_ADDED_TO_ENUM\"), \" Value added to an enum. If clients contain a switch case on the enum and do not include the `default`, this change could cause unexpected behavior\")), mdx(\"li\", null, \"Deprecations\"), mdx(\"ul\", null, mdx(\"li\", {\n    id: \"FIELD_DEPRECATED\"\n  }, mdx(\"code\", null, \"FIELD_DEPRECATED\"), \" Field deprecated\"), mdx(\"li\", {\n    id: \"FIELD_DEPRECATION_REMOVED\"\n  }, mdx(\"code\", null, \"FIELD_DEPRECATION_REMOVED\"), \" Field no longer deprecated\"), mdx(\"li\", {\n    id: \"FIELD_DEPRECATED_REASON_CHANGE\"\n  }, mdx(\"code\", null, \"FIELD_DEPRECATED_REASON_CHANGE\"), \" Reason for deprecation changed\"), mdx(\"li\", {\n    id: \"ENUM_DEPRECATED\"\n  }, mdx(\"code\", null, \"ENUM_DEPRECATED\"), \" Enum deprecated\"), mdx(\"li\", {\n    id: \"ENUM_DEPRECATION_REMOVED\"\n  }, mdx(\"code\", null, \"ENUM_DEPRECATION_REMOVED\"), \" Enum no longer deprecated\"), mdx(\"li\", {\n    id: \"ENUM_DEPRECATED_REASON_CHANGE\"\n  }, mdx(\"code\", null, \"ENUM_DEPRECATED_REASON_CHANGE\"), \" Reason for enum deprecation changed\"))), mdx(\"h3\", {\n    \"id\": \"validation-response\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#validation-response\",\n    \"aria-label\": \"validation response permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Validation response\"), mdx(\"p\", null, \"Running a schema validation check is as simple as running \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:check\"), \" on the command line from within a service repository that is configured to be an Warthog project.\"), mdx(\"p\", null, \"Running \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:check\"), \" will output the diff of all schema changes found and highlight changes determined to be breaking. Here's an example:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"console\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-console line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-console\"\n  }), \"$ npx warthog service:check --tag=prod\\n  \\u2714 Loading Warthog Project\\n  \\u2714 Validated local schema against tag prod on service engine\\n  \\u2714 Compared 8 schema changes against 110 operations over the last 24 hours\\n  \\u2716 Found 3 breaking changes and 5 compatible changes\\n    \\u2192 breaking changes found\\n\\nFAIL    ARG_REMOVED                `ServiceMutation.checkSchema` arg `gitContext` was removed\\nFAIL    FIELD_REMOVED              `Schema.fieldCount` was removed\\nFAIL    FIELD_REMOVED              `Schema.typeCount` was removed\\n\\nPASS    FIELD_ADDED                `SchemaTag.schemaRepoID` was added\\nPASS    FIELD_CHANGED_TYPE         `ServiceMutation.uploadPartialSchema` changed type from `UploadPartialSchemaResponse!` to `CompositionResult!`\\nPASS    FIELD_DEPRECATION_REMOVED  `IntrospectionSchema.fieldCount` is no longer deprecated\\nPASS    FIELD_DEPRECATION_REMOVED  `IntrospectionSchema.typeCount` is no longer deprecated\\nPASS    TYPE_REMOVED               `UploadPartialSchemaResponse` removed\\n\\nView full details at: https://engine.warthog.dev/service/example-1234/check/<DETAILS>\"), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"p\", null, \"Each change to the schema will be labeled with \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"PASS\"), \" or \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"FAIL\"), \" and a URL with full details on the changes and their impact on clients and operations will be generated. Following the URL will take you to Engine:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/service-check-page-1cead193c0c65131e50453559acef1ef.png\",\n    \"alt\": \"Service check page in the Engine UI\"\n  }))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" If you have \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#github-integration\"\n  }), \"installed schema validation checks on your GitHub PRs\"), \", the \\\"Details\\\" link in your GitHub checks will take you to the same details link in this output.\")), mdx(\"p\", null, \"A failed \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:check\"), \" command will exit with a non-0 exit code and fail CI checks. There are many cases where it is safe to make a potentially breaking change, as long as the change is made intentionally with an understanding of its impact.\"), mdx(\"p\", null, \"Since breaking changes are detected using live traffic, your service will \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"need active metrics\"), \" for the change algorithm to detect failures. If there are no metrics associated with your service, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"all changes will be labeled as a \", mdx(\"code\", _extends({\n    parentName: \"em\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"PASS\"), \" as opposed to a \", mdx(\"code\", _extends({\n    parentName: \"em\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"FAIL\")), \".\"), mdx(\"h2\", {\n    \"id\": \"set-up-schema-validation\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#set-up-schema-validation\",\n    \"aria-label\": \"set up schema validation permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Set up schema validation\"), mdx(\"p\", null, \"To set up schema validation, you will need to be both actively sending traces and registering schemas to Warthog:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/references/setup-analytics/\"\n  }), \"Set up trace reporting to Warthog Engine\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/platform/schema-registry/\"\n  }), \"Set up schema registration in your continuous delivery pipeline\"))), mdx(\"p\", null, \"Then, you will need to configure your project for the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:check\"), \" command:\"), mdx(ProjectConfigPanel, {\n    mdxType: \"ProjectConfigPanel\"\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" If you have set up one of Warthog's workflows previously, your project may already have its \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \".env\"), \" file and \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog.config.js\"), \" file configured.\")), mdx(\"p\", null, \"Once you've got these set up, running your schema check is as simple as running:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"console\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-console line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-console\"\n  }), \"$ npm install warthog\\n$ npx warthog service:check\"), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"p\", null, \"The command can be placed in any continuous integration pipeline. To surface results, \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog\"), \" emits an exit code and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#github-integration\"\n  }), \"integrates with GitHub statuses\"), \". The time window of live traffic that the check command validates against can be \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#adjusting-validation-parameters\"\n  }), \"configured\"), \" to any range within your data retention window.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" The Warthog CLI will be looking in your Warthog config for a location from which to fetch your local schema and using your ENGINE_API_KEY to authenticate its requests with the Engine service.\")), mdx(\"h3\", {\n    \"id\": \"run-validation-on-each-commit\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#run-validation-on-each-commit\",\n    \"aria-label\": \"run validation on each commit permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Run validation on each commit\"), mdx(\"p\", null, \"We highly recommended that you add validation to your continuous integration workflow (e.g. Jenkins, CircleCI, etc.). In doing so, you can detect potential problems automatically and display the results of checks directly on pull requests.\"), mdx(\"p\", null, \"Here's a example of how to add a schema validation check to CircleCI:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight has-highlighted-lines\",\n    \"data-language\": \"yaml\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-yaml line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"version\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"2\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"jobs\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"build\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"docker\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"image\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" circleci/node\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"8\"), \"\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"steps\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"-\"), \" checkout\\n\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"run\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" npm install\\n\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"# Start the GraphQL server.  If a different command is used to\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"# start the server, use it in place of `npm start` here.\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"run\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"name\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" Starting server\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"command\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" npm start\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"background\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token boolean important\"\n  }), \"true\"), \"\\n\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"# make sure the server has enough time to start up before running\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"# commands against it\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"run\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" sleep 5\\n\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"# This will authenticate using the `ENGINE_API_KEY` environment\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"# variable. Configure your endpoint's location in your Warthog config.\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"gatsby-highlight-code-line\"\n  }), \"      \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"run\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" npx warthog service\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"check\")), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" If you're using GitHub status checks, we recommend ignoring the exit code of the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:check\"), \" command so your continuous integration can complete without failing early. This can be done by appending \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"|| echo 'validation failed'\"), \" to the command call.\")), mdx(\"h3\", {\n    \"id\": \"github-integration\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#github-integration\",\n    \"aria-label\": \"github integration permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"GitHub integration\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/github-check-4a4238da8832c31605332a6a09ebd4b5.png\",\n    \"alt\": \"GitHub Status View\"\n  }))), mdx(\"p\", null, \"Like most tools, schema validation is best used when it is integrated directly into the rest of your workflow. If you're using GitHub, you can install the Warthog Engine GitHub app. This will enable Warthog's systems to send a webhook back to your project on each \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:check\"), \", providing built-in pass/fail status checks on your pull requests.\"), mdx(\"p\", null, \"To install the Warthog Engine integration on GitHub, go to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/apps/warthog-engine\"\n  }), \"https://github.com/apps/warthog-engine\"), \", click the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Configure\"), \" button, and select the appropriate GitHub profile or organization.\"), mdx(\"h3\", {\n    \"id\": \"posting-a-comment-to-your-prs\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#posting-a-comment-to-your-prs\",\n    \"aria-label\": \"posting a comment to your prs permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Posting a comment to your PRs\"), mdx(\"p\", null, \"For teams using GitHub Enterprise, Bitbucket, and other source control tools, we recommend setting up your CI to post a comment on your PRs with the results of schema validation. Surfacing schema diffs and breaking changes directly in your PR will speed up your review workflow by saving you the time of searching your CI logs to check why validation didn't pass.\"), mdx(\"p\", null, \"The CLI supports passing a \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"--markdown\"), \" flag to \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:check\"), \", which outputs the results of schema validation in a markdown format specifically. This markdown can be piped directly into a comment to your source control tool, like in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gist.github.com/daniman/e53d0589d18b778878bd8ef32d2e793c\"\n  }), \"this example of posting a comment with the results of schema validation to GitHub\"), \".\"), mdx(\"p\", null, \"The output of \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:check --markdown\"), \" looks like this:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"md\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-md line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-md\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token title important\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"###\"), \" Warthog Service Check\"), \"\\n\\n\\uD83D\\uDD04 Validated your local schema against schema tag \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token code keyword\"\n  }), \"`staging`\"), \" on service \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token code keyword\"\n  }), \"`engine`\"), \".\\n\\uD83D\\uDD22 Compared \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token bold\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"**\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token content\"\n  }), \"18 schema changes\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"**\")), \" against \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token bold\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"**\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token content\"\n  }), \"100 operations\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"**\")), \" seen over the \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token bold\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"**\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token content\"\n  }), \"last 24 hours\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"**\")), \".\\n\\u274C Found \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token bold\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"**\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token content\"\n  }), \"7 breaking changes\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"**\")), \" that would affect \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token bold\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"**\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token content\"\n  }), \"3 operations\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"**\")), \" across \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token bold\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"**\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token content\"\n  }), \"2 clients\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"**\")), \"\\n\\n\\uD83D\\uDD17 \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token url\"\n  }), \"[\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token content\"\n  }), \"View your service check details\"), \"](https://engine.warthog.dev/service/engine/checks?...)\"), \".\"), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"h3\", {\n    \"id\": \"multiple-environments\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#multiple-environments\",\n    \"aria-label\": \"multiple environments permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Multiple environments\"), mdx(\"p\", null, \"Product cycles move fast and it's common for schemas to be slightly different across environments as changes make their way through your system. To support this, schemas pushed to the registry can be associated with specific \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"variants\"), \" of your graph (also referred to tags).\"), mdx(\"p\", null, \"Variants mostly commonly represent environments and can also indicate branches or future schemas. Passing the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"--tag=<VARIANT>\"), \" flag to \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"warthog service:check\"), \" specifies which schema variant to compara against, such as \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"prod\"), \" or \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"staging\"), \". It's common to run checks against multple different graph variants in the same continuous integration pipeline to ensure that all important deployments are accounted for. Running \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"service:check\"), \" against multiple variants will result in status checks similar to:\"), mdx(\"div\", {\n    style: {\n      \"textAlign\": \"center\"\n    }\n  }, mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/multi-github-check-e095bc0eba1f4209a1df51b3cf3ce607.png\",\n    \"alt\": \"multiple service checks\"\n  })))), mdx(\"h2\", {\n    \"id\": \"adjusting-validation-parameters\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#adjusting-validation-parameters\",\n    \"aria-label\": \"adjusting validation parameters permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Adjusting validation parameters\"), mdx(\"p\", null, \"Depending on the requirements of your application, you may want to configure the timeframe to validate operations against. You can do so by providing a \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"validationPeriod\"), \" flag to the CLI. The timeframe will always end at \\\"now\\\", and go back in time by the amount specified.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-bash line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"warthog service:check --validationPeriod\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \"P2W\"), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" Valid durations are represented in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/ISO_8601#Durations\"\n  }), \"ISO 8601\"), \". It can also be provided as a number in seconds, i.e. 86400 for a single day.\")), mdx(\"p\", null, \"Two other parameters for customizing the results of \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"service:check\"), \" are threshold values. For example, you may wish to drop support for an old version of an app in order to remove some deprecated fields. Using these parameters, you can decide what amount of breakage is acceptable before shipping any breaking changes.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"queryCountThreshold\"), \" - This flag will only validate the schema against operations that have been executed at least the specified number of times within the provided duration.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"queryCountThresholdPercentage\"), \" - Similar to \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"queryCountThreshold\"), \", but expressed as a percentage of all operation volume.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" these flags are compatible with each other. In the case that both are provided, an operation must meet or exceed both thresholds.\")), mdx(\"p\", null, \"Here's an example of how to run a \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"service:check\"), \" with custom thresholds set:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-bash line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npx warthog service:check \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"\\\\\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"# Validate the schema against operations that have run in the last 5 days\"), \"\\n--validationPeriod\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \"P5D \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"\\\\\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"# Only validate against operations that have run at least 5 times during the 5 day duration\"), \"\\n--queryCountThreshold\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"5\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"\\\\\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"# Only validate against operations that account for at least 3% of total operation volume\"), \"\\n--queryCountThresholdPercentage\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"3\")), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"p\", null, \"If you have any requests for other filtering or threshold mechanisms, please get in touch with us on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/goldcaddy77/warthog-tooling/\"\n  }), \"warthog-tooling\"), \" repository.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport ProjectConfigPanel from 'gatsby-theme-apollo-docs/mdx/project-config-panel.mdx';\nexport const _frontmatter = {\"title\":\"Validating schema changes\",\"description\":\"Check if schema changes are safe or breaking by comparing against live server traffic\"}\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`There are many types of schema changes that can be potentially breaking to clients, like removing a field, if made without special consideration. For safety, some organizations take the approach of `}<em parentName=\"p\">{`never`}</em>{` making these types of changes, but this leads to an ever-growing schema and reduced API flexibility over time. In reality, making these types of changes to a schema can be very safe as long as you have tools in place to ensure that no queries are broken in the process.`}</p>\n    <p>{`Warthog provides a tool to protect for exactly this scenario called `}<strong parentName=\"p\">{`schema validation`}</strong>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note:`}</strong>{` Schema validation is an Warthog Platform feature available on the `}<a parentName=\"p\" {...{\n          \"href\": \"https://www.warthog.dev/plans/\"\n        }}>{`Team and Enterprise plans`}</a>{` of `}<a parentName=\"p\" {...{\n          \"href\": \"https://engine.warthog.dev\"\n        }}>{`Warthog Engine`}</a>{`.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"how-it-works\"\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#how-it-works\",\n        \"aria-label\": \"how it works permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`How it works`}</h2>\n    <p>{`Schema validation is run through the Warthog CLI by executing the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:check`}</code>{` command. Warthog will generate a diff between your local schema and your most recently registered schema, then validate that the changes are safe by checking if any queries actively running against your graph will be affected.`}</p>\n    <p>{`Here's how it works:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`You run `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`warthog service:check`}</code>{` locally or in CI. The proposed schema is sent to Engine's schema registry.`}</li>\n      <li parentName=\"ol\">{`Engine creates a diff between the local schema and the most recently published schema in the registry.`}</li>\n      <li parentName=\"ol\">{`Engine fetches a list of all operations sent to your graph in the last day (time window is `}<a parentName=\"li\" {...{\n          \"href\": \"#adjusting-validation-parameters\"\n        }}>{`configurable`}</a>{`).`}</li>\n      <li parentName=\"ol\">{`Engine walks through the schema diff change-by-change and compares against the operation list to see if the changes will affect the behavior of any operations.`}</li>\n      <li parentName=\"ol\">{`Engine returns the schema diff and indicates any breaking changes found.`}</li>\n      <li parentName=\"ol\">{`The CLI prints the output of this check with a link to view more details in the Engine UI.`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"breaking-change-detection\"\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#breaking-change-detection\",\n        \"aria-label\": \"breaking change detection permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Breaking change detection`}</h3>\n    <p>{`Not all schema changes are potentially breaking. Some changes, like adding a field, will always be safe and never cause unexpected behavior for active clients. Other changes, like removing a field or changing a return type, can potentially affect the behavior of clients making queries that use those fields. These are what we consider potentially breaking changes.`}</p>\n    <p>{`If schema validation detects that a proposed schema has a potentially breaking change, the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:check`}</code>{` command will return a non-0 exit code. Warthog schema validation will detect breaking changes according to the following rules:`}</p>\n    <h4 {...{\n      \"id\": \"removals\"\n    }}><a parentName=\"h4\" {...{\n        \"href\": \"#removals\",\n        \"aria-label\": \"removals permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Removals`}</h4>\n    <p>{`Each of these change types removes a schema element. If an element of your graph is being actively used by an operation and it is removed, your GraphQL layer will start returning errors to the dependent operations.`}</p>\n    <ul>\n  <li id=\"FIELD_REMOVED\">\n    <code>FIELD_REMOVED</code>: Field used by at least one operation was removed\n  </li>\n  <li id=\"TYPE_REMOVED\">\n    <code>TYPE_REMOVED</code>: Type(scalar, object) used by at least one operation was removed\n  </li>\n  <li id=\"ARG_REMOVED\">\n    <code>ARG_REMOVED</code>: Argument was removed from a field used by at least one operation\n  </li>\n  <li id=\"TYPE_REMOVED_FROM_UNION\">\n    <code>TYPE_REMOVED_FROM_UNION</code>: Type was removed from a union used by at least one operation\n  </li>\n  <li id=\"INPUT_FIELD_REMOVED\">\n    <code>INPUT_FIELD_REMOVED</code>: Field removed from an input type referenced by an argument on a field used by at least one operation\n  </li>\n  <li id=\"VALUE_REMOVED_FROM_ENUM\">\n    <code>VALUE_REMOVED_FROM_ENUM</code>: A value removed from an enum used by at least one operation\n  </li>\n  <li id=\"TYPE_REMOVED_FROM_INTERFACE\">\n    <code>TYPE_REMOVED_FROM_INTERFACE</code>: An object removed from an interface used by at least one operation\n  </li>\n    </ul>\n    <h4 {...{\n      \"id\": \"required-arguments\"\n    }}><a parentName=\"h4\" {...{\n        \"href\": \"#required-arguments\",\n        \"aria-label\": \"required arguments permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Required arguments`}</h4>\n    <p>{`Each of these changes adds a required input to a schema element. If an operation is actively using an element of your graph and doesn't update itself to add the new required input argument, the GraphQL layer will start returning an error to the operation.`}</p>\n    <ul>\n  <li id=\"REQUIRED_ARG_ADDED\">\n    <code>REQUIRED_ARG_ADDED</code>: Non-nullable argument added to field used by at least one operation\n  </li>\n  <li id=\"NON_NULL_INPUT_FIELD_ADDED\">\n    <code>NON_NULL_INPUT_FIELD_ADDED</code>: Non-null field added to an input object used by at least one operation\n  </li>\n    </ul>\n    <h4 {...{\n      \"id\": \"in-place-updates\"\n    }}><a parentName=\"h4\" {...{\n        \"href\": \"#in-place-updates\",\n        \"aria-label\": \"in place updates permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`In-place updates`}</h4>\n    <p>{`Each of these changes updates an existing schema element. If an operation is activley using an element of your graph and that element is updated, the operation could start receiving an error from the GraphQL layer or, in some cases, an unexpected result.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note:`}</strong>{` In some cases, these changes are compatible with the client at runtime, such as a type rename or an object to interface conversion with the same fields. Schema validation still marks these breaking changes because validation does not have enough information to ensure safety and these changes deserve extra scrutiny, such as their impact on type generation.`}</p>\n    </blockquote>\n    <ul>\n  <li id=\"FIELD_CHANGED_TYPE\">\n    <code>FIELD_CHANGED_TYPE</code>: Field used by at least one operation changed return type\n  </li>\n  <li id=\"INPUT_FIELD_CHANGED_TYPE\">\n    <code>INPUT_FIELD_CHANGED_TYPE</code>: Field in input object changed type and is referenced by argument on field used by at least one operation\n  </li>\n  <li id=\"TYPE_CHANGED_KIND\">\n    <code>TYPE_CHANGED_KIND</code>: Type used by at least one operation changed, ex: scalar to object or enum to union\n  </li>\n  <li id=\"ARG_CHANGED_TYPE\">\n    <code>ARG_CHANGED_TYPE</code>: Argument changed type on field used by at least one operation\n  </li>\n    </ul>\n    <h4 {...{\n      \"id\": \"type-extensions\"\n    }}><a parentName=\"h4\" {...{\n        \"href\": \"#type-extensions\",\n        \"aria-label\": \"type extensions permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Type extensions`}</h4>\n    <p>{`These changes add a type to an existing union or interface in your graph. If an operation is actively using an element of the union or interface, it could receive and unexpected result when updated depending on the fragment spreads requested.`}</p>\n    <ul>\n  <li id=\"TYPE_ADDED_TO_UNION\">\n    <code>TYPE_ADDED_TO_UNION</code>: Type added to a union used by at least one operation\n  </li>\n  <li id=\"TYPE_ADDED_TO_INTERFACE\">\n    <code>TYPE_ADDED_TO_INTERFACE</code>: Interface added to an object used by at least one operation\n  </li>\n    </ul>\n    <h4 {...{\n      \"id\": \"default-arguments\"\n    }}><a parentName=\"h4\" {...{\n        \"href\": \"#default-arguments\",\n        \"aria-label\": \"default arguments permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Default arguments`}</h4>\n    <p>{`These changes update the default value for an argument. If an operation is using an element of your graph and does not specify a value for this argument, the operation could experience unexpected results when the schema is updated if it was relying on the original default value.`}</p>\n    <ul>\n  <li id=\"ARG_DEFAULT_VALUE_CHANGE\">\n    <code>ARG_DEFAULT_VALUE_CHANGE</code>: Default value added or changed for argument on a field used by at least one operation\n  </li>\n    </ul>\n    <h4 {...{\n      \"id\": \"non-breaking-changes\"\n    }}><a parentName=\"h4\" {...{\n        \"href\": \"#non-breaking-changes\",\n        \"aria-label\": \"non breaking changes permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Non-breaking changes`}</h4>\n    <p>{`These are change types detected ny the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:check`}</code>{` command, but they are \"safe\" and will always be compatible with all exisitng client usage of the graph. They will not affect the behavior of any clients if deployed.`}</p>\n    <ul>\n  <li>Optional arguments</li>\n  <ul>\n    <li id=\"OPTIONAL_ARG_ADDED\"><code>OPTIONAL_ARG_ADDED</code> Nullable argument added to a field</li>\n    <li id=\"NULLABLE_FIELD_ADDED_TO_INPUT_OBJECT\"><code>NULLABLE_FIELD_ADDED_TO_INPUT_OBJECT</code> Nullable field added to an input object</li>\n  </ul>\n  <li>Additions</li>\n  <ul>\n    <li id=\"FIELD_ADDED\"><code>FIELD_ADDED</code> Field added to a type</li>\n    <li id=\"TYPE_ADDED\"><code>TYPE_ADDED</code> Type added to the schema</li>\n    <li id=\"VALUE_ADDED_TO_ENUM\"><code>VALUE_ADDED_TO_ENUM</code> Value added to an enum. If clients contain a switch case on the enum and do not include the `default`, this change could cause unexpected behavior</li>\n  </ul>\n  <li>Deprecations</li>\n  <ul>\n    <li id=\"FIELD_DEPRECATED\"><code>FIELD_DEPRECATED</code> Field deprecated</li>\n    <li id=\"FIELD_DEPRECATION_REMOVED\"><code>FIELD_DEPRECATION_REMOVED</code> Field no longer deprecated</li>\n    <li id=\"FIELD_DEPRECATED_REASON_CHANGE\"><code>FIELD_DEPRECATED_REASON_CHANGE</code> Reason for deprecation changed</li>\n    <li id=\"ENUM_DEPRECATED\"><code>ENUM_DEPRECATED</code> Enum deprecated</li>\n    <li id=\"ENUM_DEPRECATION_REMOVED\"><code>ENUM_DEPRECATION_REMOVED</code> Enum no longer deprecated</li>\n    <li id=\"ENUM_DEPRECATED_REASON_CHANGE\"><code>ENUM_DEPRECATED_REASON_CHANGE</code> Reason for enum deprecation changed</li>\n  </ul>\n    </ul>\n    <h3 {...{\n      \"id\": \"validation-response\"\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#validation-response\",\n        \"aria-label\": \"validation response permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Validation response`}</h3>\n    <p>{`Running a schema validation check is as simple as running `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:check`}</code>{` on the command line from within a service repository that is configured to be an Warthog project.`}</p>\n    <p>{`Running `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:check`}</code>{` will output the diff of all schema changes found and highlight changes determined to be breaking. Here's an example:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"console\"\n    }}><pre parentName=\"div\" {...{\n        \"style\": {\n          \"counterReset\": \"linenumber NaN\"\n        },\n        \"className\": \"language-console line-numbers\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-console\"\n        }}>{`$ npx warthog service:check --tag=prod\n  ✔ Loading Warthog Project\n  ✔ Validated local schema against tag prod on service engine\n  ✔ Compared 8 schema changes against 110 operations over the last 24 hours\n  ✖ Found 3 breaking changes and 5 compatible changes\n    → breaking changes found\n\nFAIL    ARG_REMOVED                \\`ServiceMutation.checkSchema\\` arg \\`gitContext\\` was removed\nFAIL    FIELD_REMOVED              \\`Schema.fieldCount\\` was removed\nFAIL    FIELD_REMOVED              \\`Schema.typeCount\\` was removed\n\nPASS    FIELD_ADDED                \\`SchemaTag.schemaRepoID\\` was added\nPASS    FIELD_CHANGED_TYPE         \\`ServiceMutation.uploadPartialSchema\\` changed type from \\`UploadPartialSchemaResponse!\\` to \\`CompositionResult!\\`\nPASS    FIELD_DEPRECATION_REMOVED  \\`IntrospectionSchema.fieldCount\\` is no longer deprecated\nPASS    FIELD_DEPRECATION_REMOVED  \\`IntrospectionSchema.typeCount\\` is no longer deprecated\nPASS    TYPE_REMOVED               \\`UploadPartialSchemaResponse\\` removed\n\nView full details at: https://engine.warthog.dev/service/example-1234/check/<DETAILS>`}</code><span parentName=\"pre\" {...{\n          \"aria-hidden\": \"true\",\n          \"className\": \"line-numbers-rows\",\n          \"style\": {\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0\"\n          }\n        }}><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span></span></pre></div>\n    <p>{`Each change to the schema will be labeled with `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`PASS`}</code>{` or `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`FAIL`}</code>{` and a URL with full details on the changes and their impact on clients and operations will be generated. Following the URL will take you to Engine:`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/service-check-page-1cead193c0c65131e50453559acef1ef.png\",\n        \"alt\": \"Service check page in the Engine UI\"\n      }}></img></p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note:`}</strong>{` If you have `}<a parentName=\"p\" {...{\n          \"href\": \"#github-integration\"\n        }}>{`installed schema validation checks on your GitHub PRs`}</a>{`, the \"Details\" link in your GitHub checks will take you to the same details link in this output.`}</p>\n    </blockquote>\n    <p>{`A failed `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:check`}</code>{` command will exit with a non-0 exit code and fail CI checks. There are many cases where it is safe to make a potentially breaking change, as long as the change is made intentionally with an understanding of its impact.`}</p>\n    <p>{`Since breaking changes are detected using live traffic, your service will `}<em parentName=\"p\">{`need active metrics`}</em>{` for the change algorithm to detect failures. If there are no metrics associated with your service, `}<em parentName=\"p\">{`all changes will be labeled as a `}<code parentName=\"em\" {...{\n          \"className\": \"language-text\"\n        }}>{`PASS`}</code>{` as opposed to a `}<code parentName=\"em\" {...{\n          \"className\": \"language-text\"\n        }}>{`FAIL`}</code></em>{`.`}</p>\n    <h2 {...{\n      \"id\": \"set-up-schema-validation\"\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#set-up-schema-validation\",\n        \"aria-label\": \"set up schema validation permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Set up schema validation`}</h2>\n    <p>{`To set up schema validation, you will need to be both actively sending traces and registering schemas to Warthog:`}</p>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"/references/setup-analytics/\"\n        }}>{`Set up trace reporting to Warthog Engine`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"/platform/schema-registry/\"\n        }}>{`Set up schema registration in your continuous delivery pipeline`}</a></li>\n    </ol>\n    <p>{`Then, you will need to configure your project for the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:check`}</code>{` command:`}</p>\n\n    <ProjectConfigPanel mdxType=\"ProjectConfigPanel\" />\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note:`}</strong>{` If you have set up one of Warthog's workflows previously, your project may already have its `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`.env`}</code>{` file and `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`warthog.config.js`}</code>{` file configured.`}</p>\n    </blockquote>\n    <p>{`Once you've got these set up, running your schema check is as simple as running:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"console\"\n    }}><pre parentName=\"div\" {...{\n        \"style\": {\n          \"counterReset\": \"linenumber NaN\"\n        },\n        \"className\": \"language-console line-numbers\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-console\"\n        }}>{`$ npm install warthog\n$ npx warthog service:check`}</code><span parentName=\"pre\" {...{\n          \"aria-hidden\": \"true\",\n          \"className\": \"line-numbers-rows\",\n          \"style\": {\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0\"\n          }\n        }}><span parentName=\"span\"></span><span parentName=\"span\"></span></span></pre></div>\n    <p>{`The command can be placed in any continuous integration pipeline. To surface results, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog`}</code>{` emits an exit code and `}<a parentName=\"p\" {...{\n        \"href\": \"#github-integration\"\n      }}>{`integrates with GitHub statuses`}</a>{`. The time window of live traffic that the check command validates against can be `}<a parentName=\"p\" {...{\n        \"href\": \"#adjusting-validation-parameters\"\n      }}>{`configured`}</a>{` to any range within your data retention window.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note:`}</strong>{` The Warthog CLI will be looking in your Warthog config for a location from which to fetch your local schema and using your ENGINE_API_KEY to authenticate its requests with the Engine service.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"run-validation-on-each-commit\"\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#run-validation-on-each-commit\",\n        \"aria-label\": \"run validation on each commit permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Run validation on each commit`}</h3>\n    <p>{`We highly recommended that you add validation to your continuous integration workflow (e.g. Jenkins, CircleCI, etc.). In doing so, you can detect potential problems automatically and display the results of checks directly on pull requests.`}</p>\n    <p>{`Here's a example of how to add a schema validation check to CircleCI:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight has-highlighted-lines\",\n      \"data-language\": \"yaml\"\n    }}><pre parentName=\"div\" {...{\n        \"style\": {\n          \"counterReset\": \"linenumber NaN\"\n        },\n        \"className\": \"language-yaml line-numbers\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-yaml\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`version`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`2`}</span>{`\n\n`}<span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`jobs`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`build`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`docker`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{`\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`-`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`image`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` circleci/node`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span><span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`8`}</span>{`\n\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`steps`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{`\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`-`}</span>{` checkout\n\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`-`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`run`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` npm install\n\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`# Start the GraphQL server.  If a different command is used to`}</span>{`\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`# start the server, use it in place of \\`npm start\\` here.`}</span>{`\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`-`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`run`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{`\n          `}<span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`name`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` Starting server\n          `}<span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`command`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` npm start\n          `}<span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`background`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token boolean important\"\n          }}>{`true`}</span>{`\n\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`# make sure the server has enough time to start up before running`}</span>{`\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`# commands against it`}</span>{`\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`-`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token key atrule\"\n          }}>{`run`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` sleep 5\n\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`# This will authenticate using the \\`ENGINE_API_KEY\\` environment`}</span>{`\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`# variable. Configure your endpoint's location in your Warthog config.`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"gatsby-highlight-code-line\"\n          }}>{`      `}<span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`-`}</span>{` `}<span parentName=\"span\" {...{\n              \"className\": \"token key atrule\"\n            }}>{`run`}</span><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`:`}</span>{` npx warthog service`}<span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`:`}</span>{`check`}</span></code><span parentName=\"pre\" {...{\n          \"aria-hidden\": \"true\",\n          \"className\": \"line-numbers-rows\",\n          \"style\": {\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0\"\n          }\n        }}><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span></span></pre></div>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note:`}</strong>{` If you're using GitHub status checks, we recommend ignoring the exit code of the `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`warthog service:check`}</code>{` command so your continuous integration can complete without failing early. This can be done by appending `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`|| echo 'validation failed'`}</code>{` to the command call.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"github-integration\"\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#github-integration\",\n        \"aria-label\": \"github integration permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`GitHub integration`}</h3>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/github-check-4a4238da8832c31605332a6a09ebd4b5.png\",\n        \"alt\": \"GitHub Status View\"\n      }}></img></p>\n    <p>{`Like most tools, schema validation is best used when it is integrated directly into the rest of your workflow. If you're using GitHub, you can install the Warthog Engine GitHub app. This will enable Warthog's systems to send a webhook back to your project on each `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:check`}</code>{`, providing built-in pass/fail status checks on your pull requests.`}</p>\n    <p>{`To install the Warthog Engine integration on GitHub, go to `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/apps/warthog-engine\"\n      }}>{`https://github.com/apps/warthog-engine`}</a>{`, click the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Configure`}</code>{` button, and select the appropriate GitHub profile or organization.`}</p>\n    <h3 {...{\n      \"id\": \"posting-a-comment-to-your-prs\"\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#posting-a-comment-to-your-prs\",\n        \"aria-label\": \"posting a comment to your prs permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Posting a comment to your PRs`}</h3>\n    <p>{`For teams using GitHub Enterprise, Bitbucket, and other source control tools, we recommend setting up your CI to post a comment on your PRs with the results of schema validation. Surfacing schema diffs and breaking changes directly in your PR will speed up your review workflow by saving you the time of searching your CI logs to check why validation didn't pass.`}</p>\n    <p>{`The CLI supports passing a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`--markdown`}</code>{` flag to `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:check`}</code>{`, which outputs the results of schema validation in a markdown format specifically. This markdown can be piped directly into a comment to your source control tool, like in `}<a parentName=\"p\" {...{\n        \"href\": \"https://gist.github.com/daniman/e53d0589d18b778878bd8ef32d2e793c\"\n      }}>{`this example of posting a comment with the results of schema validation to GitHub`}</a>{`.`}</p>\n    <p>{`The output of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:check --markdown`}</code>{` looks like this:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"md\"\n    }}><pre parentName=\"div\" {...{\n        \"style\": {\n          \"counterReset\": \"linenumber NaN\"\n        },\n        \"className\": \"language-md line-numbers\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-md\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token title important\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`###`}</span>{` Warthog Service Check`}</span>{`\n\n🔄 Validated your local schema against schema tag `}<span parentName=\"code\" {...{\n            \"className\": \"token code keyword\"\n          }}>{`\\`staging\\``}</span>{` on service `}<span parentName=\"code\" {...{\n            \"className\": \"token code keyword\"\n          }}>{`\\`engine\\``}</span>{`.\n🔢 Compared `}<span parentName=\"code\" {...{\n            \"className\": \"token bold\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`**`}</span><span parentName=\"span\" {...{\n              \"className\": \"token content\"\n            }}>{`18 schema changes`}</span><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`**`}</span></span>{` against `}<span parentName=\"code\" {...{\n            \"className\": \"token bold\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`**`}</span><span parentName=\"span\" {...{\n              \"className\": \"token content\"\n            }}>{`100 operations`}</span><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`**`}</span></span>{` seen over the `}<span parentName=\"code\" {...{\n            \"className\": \"token bold\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`**`}</span><span parentName=\"span\" {...{\n              \"className\": \"token content\"\n            }}>{`last 24 hours`}</span><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`**`}</span></span>{`.\n❌ Found `}<span parentName=\"code\" {...{\n            \"className\": \"token bold\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`**`}</span><span parentName=\"span\" {...{\n              \"className\": \"token content\"\n            }}>{`7 breaking changes`}</span><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`**`}</span></span>{` that would affect `}<span parentName=\"code\" {...{\n            \"className\": \"token bold\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`**`}</span><span parentName=\"span\" {...{\n              \"className\": \"token content\"\n            }}>{`3 operations`}</span><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`**`}</span></span>{` across `}<span parentName=\"code\" {...{\n            \"className\": \"token bold\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`**`}</span><span parentName=\"span\" {...{\n              \"className\": \"token content\"\n            }}>{`2 clients`}</span><span parentName=\"span\" {...{\n              \"className\": \"token punctuation\"\n            }}>{`**`}</span></span>{`\n\n🔗 `}<span parentName=\"code\" {...{\n            \"className\": \"token url\"\n          }}>{`[`}<span parentName=\"span\" {...{\n              \"className\": \"token content\"\n            }}>{`View your service check details`}</span>{`](https://engine.warthog.dev/service/engine/checks?...)`}</span>{`.`}</code><span parentName=\"pre\" {...{\n          \"aria-hidden\": \"true\",\n          \"className\": \"line-numbers-rows\",\n          \"style\": {\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0\"\n          }\n        }}><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span></span></pre></div>\n    <h3 {...{\n      \"id\": \"multiple-environments\"\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#multiple-environments\",\n        \"aria-label\": \"multiple environments permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Multiple environments`}</h3>\n    <p>{`Product cycles move fast and it's common for schemas to be slightly different across environments as changes make their way through your system. To support this, schemas pushed to the registry can be associated with specific `}<em parentName=\"p\">{`variants`}</em>{` of your graph (also referred to tags).`}</p>\n    <p>{`Variants mostly commonly represent environments and can also indicate branches or future schemas. Passing the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`--tag=<VARIANT>`}</code>{` flag to `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`warthog service:check`}</code>{` specifies which schema variant to compara against, such as `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`prod`}</code>{` or `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`staging`}</code>{`. It's common to run checks against multple different graph variants in the same continuous integration pipeline to ensure that all important deployments are accounted for. Running `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`service:check`}</code>{` against multiple variants will result in status checks similar to:`}</p>\n    <div style=\"text-align:center\">\n      <p><img parentName=\"p\" {...{\n          \"src\": \"/multi-github-check-e095bc0eba1f4209a1df51b3cf3ce607.png\",\n          \"alt\": \"multiple service checks\"\n        }}></img></p>\n    </div>\n    <h2 {...{\n      \"id\": \"adjusting-validation-parameters\"\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#adjusting-validation-parameters\",\n        \"aria-label\": \"adjusting validation parameters permalink\",\n        \"className\": \"anchor\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Adjusting validation parameters`}</h2>\n    <p>{`Depending on the requirements of your application, you may want to configure the timeframe to validate operations against. You can do so by providing a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`validationPeriod`}</code>{` flag to the CLI. The timeframe will always end at \"now\", and go back in time by the amount specified.`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"bash\"\n    }}><pre parentName=\"div\" {...{\n        \"style\": {\n          \"counterReset\": \"linenumber NaN\"\n        },\n        \"className\": \"language-bash line-numbers\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-bash\"\n        }}>{`warthog service:check --validationPeriod`}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{`P2W`}</code><span parentName=\"pre\" {...{\n          \"aria-hidden\": \"true\",\n          \"className\": \"line-numbers-rows\",\n          \"style\": {\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0\"\n          }\n        }}><span parentName=\"span\"></span></span></pre></div>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note:`}</strong>{` Valid durations are represented in `}<a parentName=\"p\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/ISO_8601#Durations\"\n        }}>{`ISO 8601`}</a>{`. It can also be provided as a number in seconds, i.e. 86400 for a single day.`}</p>\n    </blockquote>\n    <p>{`Two other parameters for customizing the results of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`service:check`}</code>{` are threshold values. For example, you may wish to drop support for an old version of an app in order to remove some deprecated fields. Using these parameters, you can decide what amount of breakage is acceptable before shipping any breaking changes.`}</p>\n    <ul>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`queryCountThreshold`}</code>{` - This flag will only validate the schema against operations that have been executed at least the specified number of times within the provided duration.`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`queryCountThresholdPercentage`}</code>{` - Similar to `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`queryCountThreshold`}</code>{`, but expressed as a percentage of all operation volume.`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note:`}</strong>{` these flags are compatible with each other. In the case that both are provided, an operation must meet or exceed both thresholds.`}</p>\n    </blockquote>\n    <p>{`Here's an example of how to run a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`service:check`}</code>{` with custom thresholds set:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"bash\"\n    }}><pre parentName=\"div\" {...{\n        \"style\": {\n          \"counterReset\": \"linenumber NaN\"\n        },\n        \"className\": \"language-bash line-numbers\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-bash\"\n        }}>{`npx warthog service:check `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`\\\\`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`# Validate the schema against operations that have run in the last 5 days`}</span>{`\n--validationPeriod`}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{`P5D `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`\\\\`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`# Only validate against operations that have run at least 5 times during the 5 day duration`}</span>{`\n--queryCountThreshold`}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span><span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`5`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`\\\\`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`# Only validate against operations that account for at least 3% of total operation volume`}</span>{`\n--queryCountThresholdPercentage`}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span><span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`3`}</span></code><span parentName=\"pre\" {...{\n          \"aria-hidden\": \"true\",\n          \"className\": \"line-numbers-rows\",\n          \"style\": {\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0\"\n          }\n        }}><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span></span></pre></div>\n    <p>{`If you have any requests for other filtering or threshold mechanisms, please get in touch with us on the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/goldcaddy77/warthog-tooling/\"\n      }}>{`warthog-tooling`}</a>{` repository.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}